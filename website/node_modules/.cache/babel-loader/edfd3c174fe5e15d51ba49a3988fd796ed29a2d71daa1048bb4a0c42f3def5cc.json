{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport Select from \"react-select\";\nimport { capitalizeFirstLetter } from \"../functions/capitalizeFirstLetter\";\nimport AddOptionModal from \"../components/addingEntries/AddOptionModal\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vehicleOptions = [\n  // { value: \"addNewOption\", label: \"Ajouter une option de véhicule\" },\n];\nexport const Test = () => {\n  _s();\n  const [showModal, setShowModal] = useState(false);\n  const handleOpenModal = () => setShowModal(true);\n  const handleCloseModal = () => setShowModal(false);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [options, setOptions] = useState(vehicleOptions); // Initialisation avec vehicleOptions\n\n  useEffect(() => {\n    const fetchOptions = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5001/api/options\");\n        const data = await response.json();\n\n        // Transformer les données reçues pour qu'elles correspondent au format de vehicleOptions\n        const transformedOptions = data.map(option => ({\n          value: option.id.toString(),\n          // Assurez-vous que la valeur est une chaîne\n          label: capitalizeFirstLetter(option.name)\n        }));\n        setOptions(prevOptions => [...prevOptions, ...transformedOptions]);\n      } catch (error) {\n        console.error(\"Error fetching options:\", error);\n      }\n    };\n    fetchOptions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(Test, \"BOZnwbqF50Zil5m7a4Tj0K6ZW74=\");\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","useEffect","Button","Form","Select","capitalizeFirstLetter","AddOptionModal","Fragment","_Fragment","jsxDEV","_jsxDEV","vehicleOptions","Test","_s","showModal","setShowModal","handleOpenModal","handleCloseModal","selectedOption","setSelectedOption","options","setOptions","fetchOptions","response","fetch","data","json","transformedOptions","map","option","value","id","toString","label","name","prevOptions","error","console","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/screens/Test.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport { capitalizeFirstLetter } from \"../functions/capitalizeFirstLetter\";\r\nimport AddOptionModal from \"../components/addingEntries/AddOptionModal\";\r\n\r\n\r\nconst vehicleOptions = [\r\n // { value: \"addNewOption\", label: \"Ajouter une option de véhicule\" },\r\n];\r\n\r\nexport const Test = () => {\r\nconst [showModal, setShowModal] = useState(false);\r\n\r\n  const handleOpenModal = () => setShowModal(true);\r\n  const handleCloseModal = () => setShowModal(false);\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [options, setOptions] = useState(vehicleOptions); // Initialisation avec vehicleOptions\r\n\r\n  useEffect(() => {\r\n    const fetchOptions = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5001/api/options\");\r\n        const data = await response.json();\r\n\r\n        // Transformer les données reçues pour qu'elles correspondent au format de vehicleOptions\r\n        const transformedOptions = data.map(option => ({\r\n          value: option.id.toString(), // Assurez-vous que la valeur est une chaîne\r\n          label: capitalizeFirstLetter(option.name),\r\n        }));\r\n\r\n        setOptions(prevOptions => [...prevOptions, ...transformedOptions]);\r\n      } catch (error) {\r\n        console.error(\"Error fetching options:\", error);\r\n      }\r\n    };\r\n    fetchOptions();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Test;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AAC9C,OAAOC,MAAM,MAAM,cAAc;AACjC,SAASC,qBAAqB,QAAQ,oCAAoC;AAC1E,OAAOC,cAAc,MAAM,4CAA4C;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGxE,MAAMC,cAAc,GAAG;EACtB;AAAA,CACA;AAED,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMgB,eAAe,GAAGA,CAAA,KAAMD,YAAY,CAAC,IAAI,CAAC;EAChD,MAAME,gBAAgB,GAAGA,CAAA,KAAMF,YAAY,CAAC,KAAK,CAAC;EAClD,MAAM,CAACG,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAACW,cAAc,CAAC,CAAC,CAAC;;EAExDV,SAAS,CAAC,MAAM;IACd,MAAMqB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,CAAC;QACjE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAElC;QACA,MAAMC,kBAAkB,GAAGF,IAAI,CAACG,GAAG,CAACC,MAAM,KAAK;UAC7CC,KAAK,EAAED,MAAM,CAACE,EAAE,CAACC,QAAQ,CAAC,CAAC;UAAE;UAC7BC,KAAK,EAAE5B,qBAAqB,CAACwB,MAAM,CAACK,IAAI;QAC1C,CAAC,CAAC,CAAC;QAEHb,UAAU,CAACc,WAAW,IAAI,CAAC,GAAGA,WAAW,EAAE,GAAGR,kBAAkB,CAAC,CAAC;MACpE,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IACDd,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA,CAAAF,SAAA,mBACE,CAAC;AAEP,CAAC;AAACK,EAAA,CAhCWD,IAAI;AAAA0B,EAAA,GAAJ1B,IAAI;AAkCjB,eAAeA,IAAI;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}