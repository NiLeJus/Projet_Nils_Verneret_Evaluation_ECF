{"ast":null,"code":"const serverUrl = \"http://localhost:5001/\";\n\n//#region //* vehicle types\nconst fetchBrands = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/brands\");\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching Brands:\", error);\n    throw error;\n  }\n};\n//#endregion\n\n//#region //* vehicle models\nconst fetchVehicleModels = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/vehicleModels\");\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching VehicleModels:\", error);\n    throw error;\n  }\n};\n\n//#endregion\n\n//#region //* vehicle types\nconst fetchVehicleTypes = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/vehicleTypes\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching vehicleTypes:\", error);\n    throw error;\n  }\n};\nconst fetchVehicleModelData = async model_id => {\n  try {\n    // Assurez-vous d'avoir l'URL correcte et la méthode pour récupérer les données\n    const response = await fetch(`serverUrl +/vehicleModels/${model_id}`);\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching Model Data:\", error);\n    throw error;\n  }\n};\n\n//#endregion*\n\n//#region //* customer request\nconst fetchCustomerRequest = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/requests\");\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching customerRequest:\", error);\n    throw error;\n  }\n};\nconst modifyCustomerRequest = async (requestId, updatedData) => {\n  try {\n    const response = await fetch(`${serverUrl}api/requests/${requestId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la modification de la demande\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error modifying customerRequest:\", error);\n    throw error;\n  }\n};\n//#endregion\n\n//#region //* Supprimer une demande client\nconst deleteCustomerRequest = async requestId => {\n  try {\n    const response = await fetch(`${serverUrl}api/requests/${requestId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression de la demande\");\n    // Pas besoin de lire le JSON car le statut 204 ne renvoie pas de corps de réponse\n    return response; // Vous pouvez simplement retourner la réponse\n  } catch (error) {\n    console.error(\"Error deleting customerRequest:\", error);\n    throw error;\n  }\n};\n\n//#endregion\n\n//#region //* Fetch vehicle conditions\n\n//#endregion\n\n//#region //* Fetch vehicles\nconst fetchVehicles = async () => {\n  try {\n    const response = await fetch('/api/vehicles/all');\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching vehicle:', error);\n  }\n};\n//#endregion\n\n//#region //* fetch Admins\nconst fetchAdmins = async () => {\n  try {\n    const response = await fetch('/api/admins');\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching admins:', error);\n  }\n};\n//#endregion\n// Exporting functions\nexport { fetchBrands, fetchVehicleModels, fetchVehicleModelData, fetchVehicleTypes, fetchVehicles, fetchAdmins, fetchCustomerRequest, modifyCustomerRequest, deleteCustomerRequest };","map":{"version":3,"names":["serverUrl","fetchBrands","response","fetch","ok","Error","json","error","console","fetchVehicleModels","fetchVehicleTypes","fetchVehicleModelData","model_id","fetchCustomerRequest","modifyCustomerRequest","requestId","updatedData","method","headers","body","JSON","stringify","deleteCustomerRequest","fetchVehicles","fetchAdmins"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/serverRelated/ApiRequest.js"],"sourcesContent":["const serverUrl = \"http://localhost:5001/\";\r\n\r\n//#region //* vehicle types\r\n const fetchBrands = async () => {\r\n  try {\r\n    const response = await fetch(serverUrl + \"api/brands\");\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching Brands:\", error);\r\n    throw error;\r\n  }\r\n};\r\n//#endregion\r\n\r\n//#region //* vehicle models\r\n const fetchVehicleModels = async () => {\r\n  try {\r\n    const response = await fetch(serverUrl + \"api/vehicleModels\");\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching VehicleModels:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//#endregion\r\n\r\n//#region //* vehicle types\r\n const fetchVehicleTypes = async () => {\r\n  try {\r\n    const response = await fetch(serverUrl + \"api/vehicleTypes\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching vehicleTypes:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst fetchVehicleModelData = async (model_id) => {\r\n  try {\r\n    // Assurez-vous d'avoir l'URL correcte et la méthode pour récupérer les données\r\n    const response = await fetch(`serverUrl +/vehicleModels/${model_id}`);\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n   \r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching Model Data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//#endregion*\r\n\r\n//#region //* customer request\r\n  const fetchCustomerRequest = async () => {\r\n    try {\r\n      const response = await fetch(serverUrl + \"api/requests\");\r\n      if (!response.ok) throw new Error(\"Erreur réseau\");\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error(\"Error fetching customerRequest:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  const modifyCustomerRequest = async (requestId, updatedData) => {\r\n    try {\r\n      const response = await fetch(`${serverUrl}api/requests/${requestId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n      if (!response.ok) throw new Error(\"Erreur réseau lors de la modification de la demande\");\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error(\"Error modifying customerRequest:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n  //#endregion\r\n  \r\n  //#region //* Supprimer une demande client\r\n  const deleteCustomerRequest = async (requestId) => {\r\n    try {\r\n      const response = await fetch(`${serverUrl}api/requests/${requestId}`, {\r\n        method: 'DELETE'\r\n      });\r\n      if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression de la demande\");\r\n      // Pas besoin de lire le JSON car le statut 204 ne renvoie pas de corps de réponse\r\n      return response; // Vous pouvez simplement retourner la réponse\r\n    } catch (error) {\r\n      console.error(\"Error deleting customerRequest:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n\r\n//#endregion\r\n\r\n\r\n//#region //* Fetch vehicle conditions\r\n\r\n//#endregion\r\n\r\n//#region //* Fetch vehicles\r\nconst fetchVehicles = async () => {\r\n    try {\r\n      const response = await fetch('/api/vehicles/all');\r\n      if (!response.ok) throw new Error(\"Erreur réseau\");\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching vehicle:', error);\r\n    }\r\n  };\r\n//#endregion\r\n\r\n//#region //* fetch Admins\r\nconst fetchAdmins = async () => {\r\n  try {\r\n    const response = await fetch('/api/admins');\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching admins:', error);\r\n  }\r\n};\r\n//#endregion\r\n// Exporting functions\r\nexport { fetchBrands, fetchVehicleModels, fetchVehicleModelData, fetchVehicleTypes, fetchVehicles, fetchAdmins, fetchCustomerRequest, modifyCustomerRequest, deleteCustomerRequest };\r\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,wBAAwB;;AAE1C;AACC,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC/B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,SAAS,GAAG,YAAY,CAAC;IACtD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAClD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;AACD;;AAEA;AACC,MAAME,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAACH,SAAS,GAAG,mBAAmB,CAAC;IAC7D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAClD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;;AAEA;AACC,MAAMG,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACH,SAAS,GAAG,kBAAkB,CAAC;IAC5D,OAAOE,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMI,qBAAqB,GAAG,MAAOC,QAAQ,IAAK;EAChD,IAAI;IACF;IACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,6BAA4BS,QAAS,EAAC,CAAC;IACrE,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAElD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;;AAEA;AACE,MAAMM,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAACH,SAAS,GAAG,cAAc,CAAC;IACxD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAClD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMO,qBAAqB,GAAG,MAAAA,CAAOC,SAAS,EAAEC,WAAW,KAAK;EAC9D,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,SAAU,gBAAee,SAAU,EAAC,EAAE;MACpEE,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;IAClC,CAAC,CAAC;IACF,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;IACxF,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF,CAAC;AACD;;AAEA;AACA,MAAMe,qBAAqB,GAAG,MAAOP,SAAS,IAAK;EACjD,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,SAAU,gBAAee,SAAU,EAAC,EAAE;MACpEE,MAAM,EAAE;IACV,CAAC,CAAC;IACF,IAAI,CAACf,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;IACvF;IACA,OAAOH,QAAQ,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;;AAGH;;AAGA;;AAEA;;AAEA;AACA,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;EAC9B,IAAI;IACF,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,CAAC;IACjD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAClD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD;AACF,CAAC;AACH;;AAEA;AACA,MAAMiB,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,IAAI;IACF,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,CAAC;IAC3C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAClD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAChD;AACF,CAAC;AACD;AACA;AACA,SAASN,WAAW,EAAEQ,kBAAkB,EAAEE,qBAAqB,EAAED,iBAAiB,EAAEa,aAAa,EAAEC,WAAW,EAAEX,oBAAoB,EAAEC,qBAAqB,EAAEQ,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}