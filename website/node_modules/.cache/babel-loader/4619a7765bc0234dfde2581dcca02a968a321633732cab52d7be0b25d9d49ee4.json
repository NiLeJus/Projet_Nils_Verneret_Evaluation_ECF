{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { scheduleGetAllDays, scheduleGetWeek } from \"../../../serverRelated/ApiRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagement = () => {\n  _s();\n  const [preparedData, setPreparedData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        const daysData = daysResponse.data ? daysResponse.data : daysResponse; // Adaptez selon la structure de la réponse\n\n        const weekResponse = await scheduleGetWeek(10, year, 8);\n        const weekData = weekResponse.data ? weekResponse.data : weekResponse; // Adaptez selon la structure de la réponse\n\n        // Vérifiez si les réponses sont des tableaux avant de les combiner\n        const allData = Array.isArray(daysData) && Array.isArray(weekData) ? [...daysData, ...weekData] : [];\n        const prepared = prepareDataForDisplay(allData);\n        setPreparedData(prepared);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const prepareDataForDisplay = data => {\n    const groupedData = [];\n    let currentGroup = [];\n    data.forEach(day => {\n      currentGroup.push(day);\n      if (currentGroup.length === 7) {\n        groupedData.push(currentGroup);\n        currentGroup = [];\n      }\n    });\n    if (currentGroup.length > 0) {\n      groupedData.push(currentGroup);\n    }\n    return groupedData;\n  };\n  const rowsHeaders = [\"Date\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: preparedData.map((week, index) => /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rowsHeaders.map((header, headerIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: header\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this), week.map((day, dayIndex) => /*#__PURE__*/_jsxDEV(\"td\", {}, dayIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 19\n          }, this))]\n        }, headerIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_s(ScheduleManagement, \"iKWBrHeWYydjV2iquAVOGFhht/M=\");\n_c = ScheduleManagement;\nexport default ScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","Table","scheduleGetAllDays","scheduleGetWeek","jsxDEV","_jsxDEV","Fragment","_Fragment","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagement","_s","preparedData","setPreparedData","fetchData","year","daysResponse","daysData","data","weekResponse","weekData","allData","Array","isArray","prepared","prepareDataForDisplay","error","console","groupedData","currentGroup","forEach","day","push","length","rowsHeaders","children","map","week","index","striped","bordered","hover","header","headerIndex","fileName","_jsxFileName","lineNumber","columnNumber","dayIndex","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { scheduleGetAllDays, scheduleGetWeek } from \"../../../serverRelated/ApiRequest\";\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagement = () => {\r\n  const [preparedData, setPreparedData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        const daysData = daysResponse.data ? daysResponse.data : daysResponse; // Adaptez selon la structure de la réponse\r\n        \r\n        const weekResponse = await scheduleGetWeek(10, year, 8);\r\n        const weekData = weekResponse.data ? weekResponse.data : weekResponse; // Adaptez selon la structure de la réponse\r\n        \r\n        // Vérifiez si les réponses sont des tableaux avant de les combiner\r\n        const allData = Array.isArray(daysData) && Array.isArray(weekData) ? [...daysData, ...weekData] : [];\r\n        const prepared = prepareDataForDisplay(allData);\r\n        setPreparedData(prepared);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const prepareDataForDisplay = (data) => {\r\n    const groupedData = [];\r\n    let currentGroup = [];\r\n\r\n    data.forEach((day) => {\r\n      currentGroup.push(day);\r\n      if (currentGroup.length === 7) {\r\n        groupedData.push(currentGroup);\r\n        currentGroup = [];\r\n      }\r\n    });\r\n\r\n    if (currentGroup.length > 0) {\r\n      groupedData.push(currentGroup);\r\n    }\r\n\r\n    return groupedData;\r\n  };\r\n\r\n  const rowsHeaders = [\r\n    \"Date\",\r\n    \"Ouverture Matin\",\r\n    \"Fermeture Matin\",\r\n    \"Ouverture Après-midi\",\r\n    \"Fermeture Après-midi\",\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {preparedData.map((week, index) => (\r\n        <Table key={index} striped bordered hover>\r\n          <tbody>\r\n            {rowsHeaders.map((header, headerIndex) => (\r\n              <tr key={headerIndex}>\r\n                <th>{header}</th>\r\n                {week.map((day, dayIndex) => (\r\n                  <td key={dayIndex}>\r\n                    {/* Implémentez l'accès aux données selon votre structure de données */}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScheduleManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}