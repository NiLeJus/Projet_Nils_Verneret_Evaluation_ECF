{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { scheduleGetAllDays } from \"../../../serverRelated/ApiRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagement = () => {\n  _s();\n  const [preparedData, setPreparedData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        console.log(\"daysResponse\", daysResponse);\n        const preparedData = prepareDataForDisplay(daysResponse);\n        setPreparedData(preparedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const prepareDataForDisplay = data => {\n    return groupedData;\n  };\n  const rowsHeaders = [\"Date\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: preparedData.map((week, index) => /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rowsHeaders.map((header, headerIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: header\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this), week.map((day, dayIndex) => {\n            let cellContent;\n            switch (header) {\n              case \"Date\":\n                cellContent = day.date;\n                break;\n              case \"Ouverture Matin\":\n                cellContent = day.morningOpening ? day.morningOpening : \"Fermé\";\n                break;\n              case \"Fermeture Matin\":\n                cellContent = day.morningClosing ? day.morningClosing : \"Fermé\";\n                break;\n              case \"Ouverture Après-midi\":\n                cellContent = day.afternoonOpening ? day.afternoonOpening : \"Fermé\";\n                break;\n              case \"Fermeture Après-midi\":\n                cellContent = day.afternoonClosing ? day.afternoonClosing : \"Fermé\";\n                break;\n              default:\n                cellContent = \"N/A\";\n            }\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: cellContent\n            }, dayIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 26\n            }, this);\n          })]\n        }, headerIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_s(ScheduleManagement, \"iKWBrHeWYydjV2iquAVOGFhht/M=\");\n_c = ScheduleManagement;\nexport default ScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","Table","scheduleGetAllDays","jsxDEV","_jsxDEV","Fragment","_Fragment","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagement","_s","preparedData","setPreparedData","fetchData","year","daysResponse","console","log","prepareDataForDisplay","error","data","groupedData","rowsHeaders","children","map","week","index","striped","bordered","hover","header","headerIndex","fileName","_jsxFileName","lineNumber","columnNumber","day","dayIndex","cellContent","date","morningOpening","morningClosing","afternoonOpening","afternoonClosing","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { scheduleGetAllDays } from \"../../../serverRelated/ApiRequest\";\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagement = () => {\r\n  const [preparedData, setPreparedData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        console.log(\"daysResponse\", daysResponse);\r\n\r\n        const preparedData = prepareDataForDisplay(daysResponse);\r\n        setPreparedData(preparedData);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const prepareDataForDisplay = (data) => {\r\n\r\n    return groupedData;\r\n  };\r\n\r\n  const rowsHeaders = [\r\n    \"Date\",\r\n    \"Ouverture Matin\",\r\n    \"Fermeture Matin\",\r\n    \"Ouverture Après-midi\",\r\n    \"Fermeture Après-midi\",\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {preparedData.map((week, index) => (\r\n        <Table\r\n          key={index}\r\n          striped\r\n          bordered\r\n          hover\r\n        >\r\n          <tbody>\r\n            {rowsHeaders.map((header, headerIndex) => (\r\n              <tr key={headerIndex}>\r\n                <th>{header}</th>\r\n                {week.map((day, dayIndex) => {\r\n                  let cellContent;\r\n                  switch (header) {\r\n                    case \"Date\":\r\n                      cellContent = day.date;\r\n                      break;\r\n                    case \"Ouverture Matin\":\r\n                      cellContent = day.morningOpening\r\n                        ? day.morningOpening\r\n                        : \"Fermé\";\r\n                      break;\r\n                    case \"Fermeture Matin\":\r\n                      cellContent = day.morningClosing\r\n                        ? day.morningClosing\r\n                        : \"Fermé\";\r\n                      break;\r\n                    case \"Ouverture Après-midi\":\r\n                      cellContent = day.afternoonOpening\r\n                        ? day.afternoonOpening\r\n                        : \"Fermé\";\r\n                      break;\r\n                    case \"Fermeture Après-midi\":\r\n                      cellContent = day.afternoonClosing\r\n                        ? day.afternoonClosing\r\n                        : \"Fermé\";\r\n                      break;\r\n                    default:\r\n                      cellContent = \"N/A\";\r\n                  }\r\n                  return <td key={dayIndex}>{cellContent}</td>;\r\n                })}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScheduleManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}