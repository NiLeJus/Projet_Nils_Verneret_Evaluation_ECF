{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport { scheduleGetAllDays } from \"../../../serverRelated/ApiRequest\";\nimport { format, parseISO } from \"date-fns\";\nimport { fr } from \"date-fns/locale\"; // Importer les locales françaises\nimport Button from 'react-bootstrap/Button'; // Assurez-vous d'importer Button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagement = () => {\n  _s();\n  const [preparedData, setPreparedData] = useState([]);\n  const toggleDayState = (weekIndex, dayIndex) => {\n    // Copie profonde pour éviter de muter l'état directement\n    const newData = preparedData.map(week => week.map(day => ({\n      ...day\n    })));\n\n    // Change l'état isOpen du jour concerné\n    newData[weekIndex][dayIndex].isOpen = !newData[weekIndex][dayIndex].isOpen;\n\n    // Met à jour l'état du composant\n    setPreparedData(newData);\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        console.log(\"daysResponse\", daysResponse);\n        const preparedData = prepareDataForDisplay(daysResponse);\n        setPreparedData(preparedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const prepareDataForDisplay = data => {\n    const groupedData = [];\n    let currentGroup = [];\n    Object.keys(data).forEach(weekNumber => {\n      const week = data[weekNumber];\n      // Pour chaque semaine, vérifiez si vous avez plus de 7 jours et ajustez en conséquence.\n      week.forEach((day, index) => {\n        if (index < 7) {\n          // Assurez-vous de ne prendre que les 7 premiers jours\n          currentGroup.push(day);\n        }\n      });\n      if (currentGroup.length > 0) {\n        groupedData.push(currentGroup);\n        currentGroup = [];\n      }\n    });\n    return groupedData;\n  };\n  const handleInputChange = (event, weekIndex, dayIndex, type) => {\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\n    const newData = preparedData.map(week => week.map(day => ({\n      ...day\n    })));\n    const key = type.toLowerCase().replace(/\\s/g, ''); // Convertit \"Ouverture Matin\" en \"ouverturematin\", par exemple\n    newData[weekIndex][dayIndex][key] = newValue;\n    setPreparedData(newData);\n  };\n  const rowsHeaders = [\"Date\", \"État\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: preparedData.map((week, index) => /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: rowsHeaders.map((header, headerIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: header\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this), week.map((day, dayIndex) => {\n              let cellContent;\n              switch (header) {\n                case \"Date\":\n                  const date = parseISO(day.date); // Supposons que vous avez déjà importé parseISO et format\n                  cellContent = format(date, \"EEEE dd MMMM yyyy\", {\n                    locale: fr\n                  });\n                  break;\n                case \"État\":\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      onClick: () => toggleDayState(index, dayIndex),\n                      style: {\n                        backgroundColor: day.isOpen ? 'green' : 'red',\n                        color: 'white'\n                      },\n                      children: day.isOpen ? 'Ouvert' : 'Fermé'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 119,\n                      columnNumber: 29\n                    }, this)\n                  }, `${headerIndex}-${dayIndex}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 27\n                  }, this);\n                case \"Ouverture Matin\":\n                case \"Fermeture Matin\":\n                case \"Ouverture Après-midi\":\n                case \"Fermeture Après-midi\":\n                  cellContent = /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    defaultValue: day[header.toLowerCase().replace(/\\s/g, '')] || \"none\",\n                    onBlur: e => handleInputChange(e, index, dayIndex, header),\n                    style: {\n                      backgroundColor: 'lightyellow'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 132,\n                    columnNumber: 31\n                  }, this);\n                  break;\n                default:\n                  cellContent = \"N/A\";\n              }\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: cellContent\n              }, `${headerIndex}-${dayIndex}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 23\n              }, this);\n            })]\n          }, headerIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ScheduleManagement, \"iKWBrHeWYydjV2iquAVOGFhht/M=\");\n_c = ScheduleManagement;\nexport default ScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","Table","Container","scheduleGetAllDays","format","parseISO","fr","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagement","_s","preparedData","setPreparedData","toggleDayState","weekIndex","dayIndex","newData","map","week","day","isOpen","fetchData","year","daysResponse","console","log","prepareDataForDisplay","error","data","groupedData","currentGroup","Object","keys","forEach","weekNumber","index","push","length","handleInputChange","event","type","newValue","target","value","key","toLowerCase","replace","rowsHeaders","children","striped","bordered","hover","header","headerIndex","fileName","_jsxFileName","lineNumber","columnNumber","cellContent","date","locale","onClick","style","backgroundColor","color","defaultValue","onBlur","e","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { scheduleGetAllDays } from \"../../../serverRelated/ApiRequest\";\r\n\r\nimport { format, parseISO } from \"date-fns\";\r\nimport { fr } from \"date-fns/locale\"; // Importer les locales françaises\r\nimport Button from 'react-bootstrap/Button'; // Assurez-vous d'importer Button\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagement = () => {\r\n  const [preparedData, setPreparedData] = useState([]);\r\n\r\n  const toggleDayState = (weekIndex, dayIndex) => {\r\n    // Copie profonde pour éviter de muter l'état directement\r\n    const newData = preparedData.map(week => week.map(day => ({ ...day })));\r\n  \r\n    // Change l'état isOpen du jour concerné\r\n    newData[weekIndex][dayIndex].isOpen = !newData[weekIndex][dayIndex].isOpen;\r\n  \r\n    // Met à jour l'état du composant\r\n    setPreparedData(newData);\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        console.log(\"daysResponse\", daysResponse);\r\n\r\n        const preparedData = prepareDataForDisplay(daysResponse);\r\n        setPreparedData(preparedData);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const prepareDataForDisplay = (data) => {\r\n    const groupedData = [];\r\n    let currentGroup = [];\r\n\r\n    Object.keys(data).forEach((weekNumber) => {\r\n      const week = data[weekNumber];\r\n      // Pour chaque semaine, vérifiez si vous avez plus de 7 jours et ajustez en conséquence.\r\n      week.forEach((day, index) => {\r\n        if (index < 7) {\r\n          // Assurez-vous de ne prendre que les 7 premiers jours\r\n          currentGroup.push(day);\r\n        }\r\n      });\r\n\r\n      if (currentGroup.length > 0) {\r\n        groupedData.push(currentGroup);\r\n        currentGroup = [];\r\n      }\r\n    });\r\n\r\n    return groupedData;\r\n  };\r\n\r\n  const handleInputChange = (event, weekIndex, dayIndex, type) => {\r\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\r\n  \r\n    const newData = preparedData.map(week => week.map(day => ({ ...day })));\r\n  \r\n    const key = type.toLowerCase().replace(/\\s/g, ''); // Convertit \"Ouverture Matin\" en \"ouverturematin\", par exemple\r\n    newData[weekIndex][dayIndex][key] = newValue;\r\n  \r\n    setPreparedData(newData);\r\n  \r\n  };\r\n  \r\n\r\n  const rowsHeaders = [\r\n    \"Date\",\r\n    \"État\",\r\n    \"Ouverture Matin\",\r\n    \"Fermeture Matin\",\r\n    \"Ouverture Après-midi\",\r\n    \"Fermeture Après-midi\",\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        {preparedData.map((week, index) => (\r\n          <Table\r\n            key={index}\r\n            striped\r\n            bordered\r\n            hover\r\n          >\r\n            <tbody>\r\n              {rowsHeaders.map((header, headerIndex) => (\r\n                <tr key={headerIndex}>\r\n                  <th>{header}</th>\r\n                  {week.map((day, dayIndex) => {\r\n                    let cellContent;\r\n                    switch (header) {\r\n                      case \"Date\":\r\n                        const date = parseISO(day.date); // Supposons que vous avez déjà importé parseISO et format\r\n                        cellContent = format(date, \"EEEE dd MMMM yyyy\", {\r\n                          locale: fr,\r\n                        });\r\n                        break;\r\n                      case \"État\":\r\n                        return (\r\n                          <td key={`${headerIndex}-${dayIndex}`}>\r\n                            <Button\r\n                              onClick={() => toggleDayState(index, dayIndex)}\r\n                              style={{ backgroundColor: day.isOpen ? 'green' : 'red', color: 'white' }}\r\n                            >\r\n                              {day.isOpen ? 'Ouvert' : 'Fermé'}\r\n                            </Button>\r\n                          </td>\r\n                        );\r\n                        case \"Ouverture Matin\":\r\n                          case \"Fermeture Matin\":\r\n                          case \"Ouverture Après-midi\":\r\n                          case \"Fermeture Après-midi\":\r\n                            cellContent = (\r\n                              <input\r\n                                type=\"text\"\r\n                                defaultValue={day[header.toLowerCase().replace(/\\s/g, '')] || \"none\"}\r\n                                onBlur={(e) => handleInputChange(e, index, dayIndex, header)}\r\n                                style={{ backgroundColor: 'lightyellow' }}\r\n                              />\r\n                            );\r\n                            break;\r\n                          \r\n                      default:\r\n                        cellContent = \"N/A\";\r\n                    }\r\n                    return (\r\n                      <td key={`${headerIndex}-${dayIndex}`}>{cellContent}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        ))}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScheduleManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}