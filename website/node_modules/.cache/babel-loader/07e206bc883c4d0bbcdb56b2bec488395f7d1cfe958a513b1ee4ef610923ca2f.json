{"ast":null,"code":"const serverUrl = \"http://localhost:5001/\";\n\n//Brand\nconst fetchBrands = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/brands\");\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching Brands:\", error);\n    throw error;\n  }\n};\n\n//vehicle models\nconst fetchVehicleModels = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/vehicleModels\");\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching VehicleModels:\", error);\n    throw error;\n  }\n};\nconst fetchVehicleModelData = async model_id => {\n  try {\n    // Assurez-vous d'avoir l'URL correcte et la méthode pour récupérer les données\n    const response = await fetch(serverUrl + \"api/vehicleModels/\" + {\n      model_id\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching Model Data:\", error);\n    throw error;\n  }\n};\n\n//Vehicle types\nconst fetchVehicleTypes = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/vehicleTypes\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching vehicleTypes:\", error);\n    throw error;\n  }\n};\n\n//Customer request\nconst fetchCustomerRequest = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/requests\");\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching customerRequest:\", error);\n    throw error;\n  }\n};\nconst modifyCustomerRequest = async (requestId, updatedData) => {\n  try {\n    const response = await fetch(`${serverUrl}api/requests/${requestId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la modification de la demande\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error modifying customerRequest:\", error);\n    throw error;\n  }\n};\nconst deleteCustomerRequest = async requestId => {\n  try {\n    const response = await fetch(`${serverUrl}api/requests/${requestId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression de la demande\");\n    return response;\n  } catch (error) {\n    console.error(\"Error deleting customerRequest:\", error);\n    throw error;\n  }\n};\n\n//Photos\n\nconst deletePhotos = async vehicleId => {\n  try {\n    const response = await fetch(`${serverUrl}api/photos/${vehicleId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression des photos\");\n    return response;\n  } catch (error) {\n    console.error(\"Error deleting photos:\", error);\n    throw error;\n  }\n};\n\n//Vehicles\nconst fetchVehicles = async () => {\n  try {\n    const response = await fetch(\"/api/vehicles/all\");\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching vehicle:\", error);\n  }\n};\nconst deleteVehicle = async vehicleId => {\n  try {\n    const response = await fetch(`${serverUrl}api/vehicles/${vehicleId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression du véhicule\");\n    return response;\n  } catch (error) {\n    console.error(\"Error deleting vehicle:\", error);\n    throw error;\n  }\n};\nconst addNewVehicle = async vehicleData => {\n  console.log(vehicleData);\n  try {\n    // Création de l'objet de données à envoyer\n    const dataToSend = {\n      vehicle_model_id: vehicleData.Vehicle.VehicleModel.id,\n      color_id: vehicleData.Vehicle.Color.id,\n      vehicle_type_id: 1,\n      paint_type: vehicleData.Vehicle.paint_type,\n      production_year: vehicleData.Vehicle.production_year,\n      mileage: vehicleData.Vehicle.mileage,\n      vehicle_condition_id: vehicleData.Vehicle.vehicle_condition_id,\n      price: vehicleData.Vehicle.price,\n      vehicle_comment: vehicleData.Vehicle.vehicle_comment,\n      fuel_type_id: vehicleData.Vehicle.fuel_type_id,\n      transmission_id: vehicleData.Vehicle.transmission_id,\n      tax_horsepower: vehicleData.Vehicle.tax_horsepower,\n      at_garage_id: 1\n    };\n    console.log(dataToSend);\n    const response = await fetch(serverUrl + \"api/vehicles/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(dataToSend)\n    });\n    if (!response.ok) {\n      throw new Error(\"Erreur réseau lors de l'ajout d'un nouveau véhicule\");\n    }\n    const responseData = await response.json();\n    console.log(\"réponse de la requête : \", responseData);\n    return responseData;\n  } catch (error) {\n    console.error(\"Error adding new vehicle:\", error);\n    throw error;\n  }\n};\n\n//Admins\nconst fetchAdmins = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/admins\");\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching admins:\", error);\n  }\n};\nconst deleteAdmin = async adminId => {\n  try {\n    const response = await fetch(`${serverUrl}api/admins/${adminId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression de l'administrateur\");\n    return response;\n  } catch (error) {\n    console.error(\"Error deleting admin:\", error);\n    throw error;\n  }\n};\nconst modifyAdmin = async (adminId, updatedData) => {\n  try {\n    const response = await fetch(`${serverUrl}api/admins/${adminId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la modification de l'administrateur\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error modifying admin:\", error);\n    throw error;\n  }\n};\nconst addNewAdmin = async newAdminData => {\n  console.log(newAdminData);\n  try {\n    const response = await fetch(`${serverUrl}api/admins`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newAdminData)\n    });\n    if (!response.ok) {\n      throw new Error(\"Erreur réseau lors de l'ajout de l'administrateur\");\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error adding new admin:\", error);\n    throw error;\n  }\n};\n\n//Services\n\nconst fetchServices = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/services\");\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching services:\", error);\n    throw error;\n  }\n};\nconst deleteService = async serviceId => {\n  try {\n    const response = await fetch(`${serverUrl}api/services/${serviceId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression du service\");\n    return response;\n  } catch (error) {\n    console.error(\"Error deleting service:\", error);\n    throw error;\n  }\n};\nconst modifyService = async (serviceId, updatedData) => {\n  try {\n    const response = await fetch(`${serverUrl}api/services/${serviceId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la modification du service\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error modifying service:\", error);\n    throw error;\n  }\n};\nconst addNewService = async newServiceData => {\n  try {\n    const response = await fetch(`${serverUrl}api/services`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newServiceData)\n    });\n    if (!response.ok) {\n      throw new Error(\"Erreur réseau lors de l'ajout du service\");\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error adding new service:\", error);\n    throw error;\n  }\n};\n\n// Exporting functions\nexport { addNewVehicle, fetchBrands, fetchVehicleModels, fetchVehicleModelData, fetchVehicleTypes, deletePhotos, fetchVehicles, addNewAdmin, fetchAdmins, deleteAdmin, modifyAdmin, fetchServices, addNewService, deleteService, modifyService, fetchCustomerRequest, modifyCustomerRequest, deleteCustomerRequest, deleteVehicle };","map":{"version":3,"names":["serverUrl","fetchBrands","response","fetch","ok","Error","json","error","console","fetchVehicleModels","fetchVehicleModelData","model_id","fetchVehicleTypes","fetchCustomerRequest","modifyCustomerRequest","requestId","updatedData","method","headers","body","JSON","stringify","deleteCustomerRequest","deletePhotos","vehicleId","fetchVehicles","deleteVehicle","addNewVehicle","vehicleData","log","dataToSend","vehicle_model_id","Vehicle","VehicleModel","id","color_id","Color","vehicle_type_id","paint_type","production_year","mileage","vehicle_condition_id","price","vehicle_comment","fuel_type_id","transmission_id","tax_horsepower","at_garage_id","responseData","fetchAdmins","deleteAdmin","adminId","modifyAdmin","addNewAdmin","newAdminData","fetchServices","deleteService","serviceId","modifyService","addNewService","newServiceData"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/serverRelated/ApiRequest.js"],"sourcesContent":["const serverUrl = \"http://localhost:5001/\";\r\n\r\n//Brand\r\nconst fetchBrands = async () => {\r\n  try {\r\n    const response = await fetch(serverUrl + \"api/brands\");\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching Brands:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//vehicle models\r\nconst fetchVehicleModels = async () => {\r\n  try {\r\n    const response = await fetch(serverUrl + \"api/vehicleModels\");\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching VehicleModels:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst fetchVehicleModelData = async (model_id) => {\r\n  try {\r\n    // Assurez-vous d'avoir l'URL correcte et la méthode pour récupérer les données\r\n    const response = await fetch(\r\n      serverUrl + \"api/vehicleModels/\" + { model_id }\r\n    );\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching Model Data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//Vehicle types\r\nconst fetchVehicleTypes = async () => {\r\n  try {\r\n    const response = await fetch(serverUrl + \"api/vehicleTypes\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching vehicleTypes:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//Customer request\r\nconst fetchCustomerRequest = async () => {\r\n  try {\r\n    const response = await fetch(serverUrl + \"api/requests\");\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching customerRequest:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst modifyCustomerRequest = async (requestId, updatedData) => {\r\n  try {\r\n    const response = await fetch(`${serverUrl}api/requests/${requestId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(updatedData),\r\n    });\r\n    if (!response.ok)\r\n      throw new Error(\"Erreur réseau lors de la modification de la demande\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error modifying customerRequest:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst deleteCustomerRequest = async (requestId) => {\r\n  try {\r\n    const response = await fetch(`${serverUrl}api/requests/${requestId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!response.ok)\r\n      throw new Error(\"Erreur réseau lors de la suppression de la demande\");\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Error deleting customerRequest:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//Photos\r\n\r\nconst deletePhotos = async (vehicleId) => {\r\n  try {\r\n    const response = await fetch(`${serverUrl}api/photos/${vehicleId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!response.ok)\r\n      throw new Error(\"Erreur réseau lors de la suppression des photos\");\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Error deleting photos:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//Vehicles\r\nconst fetchVehicles = async () => {\r\n  try {\r\n    const response = await fetch(\"/api/vehicles/all\");\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching vehicle:\", error);\r\n  }\r\n};\r\n\r\nconst deleteVehicle = async (vehicleId) => {\r\n  try {\r\n    const response = await fetch(`${serverUrl}api/vehicles/${vehicleId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!response.ok)\r\n      throw new Error(\"Erreur réseau lors de la suppression du véhicule\");\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Error deleting vehicle:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst addNewVehicle = async (vehicleData) => {\r\n  console.log(vehicleData);\r\n  try {\r\n    // Création de l'objet de données à envoyer\r\n    const dataToSend = {\r\n      vehicle_model_id: vehicleData.Vehicle.VehicleModel.id,\r\n      color_id: vehicleData.Vehicle.Color.id,\r\n      vehicle_type_id: 1,\r\n      paint_type: vehicleData.Vehicle.paint_type,\r\n      production_year: vehicleData.Vehicle.production_year,\r\n      mileage: vehicleData.Vehicle.mileage,\r\n      vehicle_condition_id: vehicleData.Vehicle.vehicle_condition_id,\r\n      price: vehicleData.Vehicle.price,\r\n      vehicle_comment: vehicleData.Vehicle.vehicle_comment,\r\n      fuel_type_id: vehicleData.Vehicle.fuel_type_id,\r\n      transmission_id: vehicleData.Vehicle.transmission_id,\r\n      tax_horsepower: vehicleData.Vehicle.tax_horsepower,\r\n      at_garage_id: 1,\r\n    };\r\n    console.log(dataToSend);\r\n\r\n    const response = await fetch(serverUrl + \"api/vehicles/add\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(dataToSend),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur réseau lors de l'ajout d'un nouveau véhicule\");\r\n    }\r\n\r\n    const responseData = await response.json();\r\n    console.log(\"réponse de la requête : \", responseData);\r\n    return responseData;\r\n  } catch (error) {\r\n    console.error(\"Error adding new vehicle:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//Admins\r\nconst fetchAdmins = async () => {\r\n  try {\r\n    const response = await fetch(serverUrl + \"api/admins\");\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching admins:\", error);\r\n  }\r\n};\r\n\r\nconst deleteAdmin = async (adminId) => {\r\n  try {\r\n    const response = await fetch(`${serverUrl}api/admins/${adminId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!response.ok)\r\n      throw new Error(\r\n        \"Erreur réseau lors de la suppression de l'administrateur\"\r\n      );\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Error deleting admin:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst modifyAdmin = async (adminId, updatedData) => {\r\n  try {\r\n    const response = await fetch(`${serverUrl}api/admins/${adminId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(updatedData),\r\n    });\r\n    if (!response.ok)\r\n      throw new Error(\r\n        \"Erreur réseau lors de la modification de l'administrateur\"\r\n      );\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error modifying admin:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst addNewAdmin = async (newAdminData) => {\r\n  console.log(newAdminData);\r\n  try {\r\n    const response = await fetch(`${serverUrl}api/admins`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newAdminData),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur réseau lors de l'ajout de l'administrateur\");\r\n    }\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error adding new admin:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//Services\r\n\r\nconst fetchServices = async () => {\r\n  try {\r\n    const response = await fetch(serverUrl + \"api/services\");\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching services:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst deleteService = async (serviceId) => {\r\n  try {\r\n    const response = await fetch(`${serverUrl}api/services/${serviceId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!response.ok)\r\n      throw new Error(\"Erreur réseau lors de la suppression du service\");\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Error deleting service:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst modifyService = async (serviceId, updatedData) => {\r\n  try {\r\n    const response = await fetch(`${serverUrl}api/services/${serviceId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(updatedData),\r\n    });\r\n    if (!response.ok)\r\n      throw new Error(\"Erreur réseau lors de la modification du service\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error modifying service:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst addNewService = async (newServiceData) => {\r\n  try {\r\n    const response = await fetch(`${serverUrl}api/services`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newServiceData),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur réseau lors de l'ajout du service\");\r\n    }\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error adding new service:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Exporting functions\r\nexport {\r\n  addNewVehicle,\r\n  fetchBrands,\r\n  fetchVehicleModels,\r\n  fetchVehicleModelData,\r\n  fetchVehicleTypes,\r\n  deletePhotos,\r\n  fetchVehicles,\r\n  addNewAdmin,\r\n  fetchAdmins,\r\n  deleteAdmin,\r\n  modifyAdmin,\r\n  fetchServices,\r\n  addNewService,\r\n  deleteService,\r\n  modifyService,\r\n  fetchCustomerRequest,\r\n  modifyCustomerRequest,\r\n  deleteCustomerRequest,\r\n  deleteVehicle,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}