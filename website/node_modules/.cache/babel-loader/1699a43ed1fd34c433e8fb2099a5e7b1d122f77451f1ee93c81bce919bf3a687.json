{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport { scheduleGetAllDays } from \"../../../serverRelated/ApiRequest\";\nimport { format, parseISO } from \"date-fns\";\nimport { fr } from \"date-fns/locale\"; // Importer les locales françaises\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagement = () => {\n  _s();\n  const [preparedData, setPreparedData] = useState([]);\n  const toggleDayState = (weekIndex, dayIndex) => {\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n    const day = newData[weekIndex][dayIndex];\n\n    // Change l'état isOpen du jour concerné\n    day.isOpen = !day.isOpen;\n\n    // Si le jour est maintenant fermé, réinitialisez également les horaires\n    if (!day.isOpen) {\n      day.morningOpening = \"\";\n      day.morningClosing = \"\";\n      day.afternoonOpening = \"\";\n      day.afternoonClosing = \"\";\n    }\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        console.log(\"daysResponse\", daysResponse);\n        const preparedData = prepareDataForDisplay(daysResponse);\n        setPreparedData(preparedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const prepareDataForDisplay = data => {\n    const groupedData = [];\n    let currentGroup = [];\n    Object.keys(data).forEach(weekNumber => {\n      const week = data[weekNumber];\n      // Pour chaque semaine, vérifiez si vous avez plus de 7 jours et ajustez en conséquence.\n      week.forEach((day, index) => {\n        if (index < 7) {\n          // Assurez-vous de ne prendre que les 7 premiers jours\n          currentGroup.push(day);\n        }\n      });\n      if (currentGroup.length > 0) {\n        groupedData.push(currentGroup);\n        currentGroup = [];\n      }\n    });\n    return groupedData;\n  };\n  const handleInputChange = (event, weekIndex, dayIndex, type) => {\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\n    const newData = preparedData.map(week => week.map(day => ({\n      ...day\n    })));\n    const key = type.toLowerCase().replace(/\\s/g, \"\"); // Convertit \"Ouverture Matin\" en \"ouverturematin\", par exemple\n    newData[weekIndex][dayIndex][key] = newValue;\n    setPreparedData(newData);\n  };\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\n    const newValue = event.target.value;\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertit l'en-tête en clé correspondante\n\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n    const day = newData[weekIndex][dayIndex];\n\n    // Met à jour la valeur spécifique\n    day[key] = newValue || \"\"; // Utilisez une chaîne vide si la nouvelle valeur est falsy\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Ici, vous pourriez également envisager d'envoyer une mise à jour à votre serveur\n    // pour refléter le changement d'état, par exemple :\n    // updateDayOnServer(day.id, {[key]: newValue});\n  };\n\n  const copyDayContent = dayId => {\n    console.log(`copyDayContent 1 déclenché pour le jour ${dayId}`);\n    // Votre logique ici\n  };\n\n  const pasteStoredDayContent = dayId => {\n    console.log(`pasteStoredDayContent 2 déclenché pour le jour ${dayId}`);\n    // Votre logique ici\n  };\n\n  const pasteStoredWeekContent = weekId => {\n    console.log(`pasteStoredDayContent 2 déclenché pour le jour ${dayId}`);\n    // Votre logique ici\n  };\n\n  const rowsHeaders = [\"Date\", \"État\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\", `Actions`];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: preparedData.map((week, index) => /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        className: \"text-center mt-4\",\n        responsive: true,\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: rowsHeaders.map((header, headerIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: header\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this), week.map((day, dayIndex) => {\n              let cellContent;\n              switch (header) {\n                case \"Date\":\n                  const date = parseISO(day.date); // Supposons que vous avez déjà importé parseISO et format\n                  cellContent = format(date, \"EEEE dd MMMM yyyy\", {\n                    locale: fr\n                  });\n                  break;\n                case \"État\":\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      onClick: () => toggleDayState(index, dayIndex),\n                      style: {\n                        backgroundColor: day.isOpen ? \"green\" : \"red\",\n                        color: \"white\"\n                      },\n                      children: day.isOpen ? \"Ouvert\" : \"Fermé\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 165,\n                      columnNumber: 29\n                    }, this)\n                  }, `${headerIndex}-${dayIndex}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 27\n                  }, this);\n                case \"Ouverture Matin\":\n                case \"Fermeture Matin\":\n                case \"Ouverture Après-midi\":\n                case \"Fermeture Après-midi\":\n                  cellContent = /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"time\",\n                    value: day[header.toLowerCase().replace(/\\s/g, \"\")] || \"\",\n                    onChange: e => handleInputChange(e, index, dayIndex, header),\n                    onBlur: e => handleInputBlur(e, index, dayIndex, header),\n                    disabled: !day.isOpen,\n                    style: {\n                      backgroundColor: day.isOpen ? \"lightyellow\" : \"lightgrey\"\n                    }\n                  }, `input-${dayIndex}-${day.isOpen ? \"open\" : \"closed\"}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 27\n                  }, this);\n                  break;\n                case \"Actions\":\n                  cellContent = /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"primary\",\n                      onClick: () => copyDayContent(day.id),\n                      className: \"me-2\",\n                      children: \"Copier\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 207,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"secondary\",\n                      onClick: () => pasteStoredContent(day.id),\n                      children: \"Coller\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 214,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 27\n                  }, this);\n                  break;\n                default:\n                  cellContent = \"N/A\";\n              }\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: cellContent\n              }, `${headerIndex}-${dayIndex}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 23\n              }, this);\n            })]\n          }, headerIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ScheduleManagement, \"iKWBrHeWYydjV2iquAVOGFhht/M=\");\n_c = ScheduleManagement;\nexport default ScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","Table","Container","scheduleGetAllDays","format","parseISO","fr","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagement","_s","preparedData","setPreparedData","toggleDayState","weekIndex","dayIndex","newData","day","isOpen","morningOpening","morningClosing","afternoonOpening","afternoonClosing","fetchData","year","daysResponse","console","log","prepareDataForDisplay","error","data","groupedData","currentGroup","Object","keys","forEach","weekNumber","week","index","push","length","handleInputChange","event","type","newValue","target","value","map","key","toLowerCase","replace","handleInputBlur","header","copyDayContent","dayId","pasteStoredDayContent","pasteStoredWeekContent","weekId","rowsHeaders","children","striped","bordered","hover","className","responsive","headerIndex","fileName","_jsxFileName","lineNumber","columnNumber","cellContent","date","locale","onClick","style","backgroundColor","color","onChange","e","onBlur","disabled","variant","id","pasteStoredContent","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { scheduleGetAllDays } from \"../../../serverRelated/ApiRequest\";\r\n\r\nimport { format, parseISO } from \"date-fns\";\r\nimport { fr } from \"date-fns/locale\"; // Importer les locales françaises\r\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagement = () => {\r\n  const [preparedData, setPreparedData] = useState([]);\r\n\r\n  const toggleDayState = (weekIndex, dayIndex) => {\r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex][dayIndex];\r\n\r\n    // Change l'état isOpen du jour concerné\r\n    day.isOpen = !day.isOpen;\r\n\r\n    // Si le jour est maintenant fermé, réinitialisez également les horaires\r\n    if (!day.isOpen) {\r\n      day.morningOpening = \"\";\r\n      day.morningClosing = \"\";\r\n      day.afternoonOpening = \"\";\r\n      day.afternoonClosing = \"\";\r\n    }\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        console.log(\"daysResponse\", daysResponse);\r\n\r\n        const preparedData = prepareDataForDisplay(daysResponse);\r\n        setPreparedData(preparedData);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const prepareDataForDisplay = (data) => {\r\n    const groupedData = [];\r\n    let currentGroup = [];\r\n\r\n    Object.keys(data).forEach((weekNumber) => {\r\n      const week = data[weekNumber];\r\n      // Pour chaque semaine, vérifiez si vous avez plus de 7 jours et ajustez en conséquence.\r\n      week.forEach((day, index) => {\r\n        if (index < 7) {\r\n          // Assurez-vous de ne prendre que les 7 premiers jours\r\n          currentGroup.push(day);\r\n        }\r\n      });\r\n\r\n      if (currentGroup.length > 0) {\r\n        groupedData.push(currentGroup);\r\n        currentGroup = [];\r\n      }\r\n    });\r\n\r\n    return groupedData;\r\n  };\r\n\r\n  const handleInputChange = (event, weekIndex, dayIndex, type) => {\r\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\r\n\r\n    const newData = preparedData.map((week) => week.map((day) => ({ ...day })));\r\n\r\n    const key = type.toLowerCase().replace(/\\s/g, \"\"); // Convertit \"Ouverture Matin\" en \"ouverturematin\", par exemple\r\n    newData[weekIndex][dayIndex][key] = newValue;\r\n\r\n    setPreparedData(newData);\r\n  };\r\n\r\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\r\n    const newValue = event.target.value;\r\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertit l'en-tête en clé correspondante\r\n\r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex][dayIndex];\r\n\r\n    // Met à jour la valeur spécifique\r\n    day[key] = newValue || \"\"; // Utilisez une chaîne vide si la nouvelle valeur est falsy\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Ici, vous pourriez également envisager d'envoyer une mise à jour à votre serveur\r\n    // pour refléter le changement d'état, par exemple :\r\n    // updateDayOnServer(day.id, {[key]: newValue});\r\n  };\r\n\r\n  const copyDayContent = (dayId) => {\r\n    console.log(`copyDayContent 1 déclenché pour le jour ${dayId}`);\r\n    // Votre logique ici\r\n  };\r\n\r\n  const pasteStoredDayContent = (dayId) => {\r\n    console.log(`pasteStoredDayContent 2 déclenché pour le jour ${dayId}`);\r\n    // Votre logique ici\r\n  };\r\n  const pasteStoredWeekContent = (weekId) => {\r\n    console.log(`pasteStoredDayContent 2 déclenché pour le jour ${dayId}`);\r\n    // Votre logique ici\r\n  };\r\n\r\n\r\n\r\n  const rowsHeaders = [\r\n    \"Date\",\r\n    \"État\",\r\n    \"Ouverture Matin\",\r\n    \"Fermeture Matin\",\r\n    \"Ouverture Après-midi\",\r\n    \"Fermeture Après-midi\",\r\n    `Actions` ,\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        {preparedData.map((week, index) => (\r\n          <Table\r\n            key={index}\r\n            striped\r\n            bordered\r\n            hover\r\n            className=\"text-center mt-4\"\r\n            responsive\r\n          >\r\n            <tbody>\r\n              {rowsHeaders.map((header, headerIndex) => (\r\n                <tr key={headerIndex}>\r\n                  <th>{header}</th>\r\n                  {week.map((day, dayIndex) => {\r\n                    let cellContent;\r\n                    switch (header) {\r\n                      case \"Date\":\r\n                        const date = parseISO(day.date); // Supposons que vous avez déjà importé parseISO et format\r\n                        cellContent = format(date, \"EEEE dd MMMM yyyy\", {\r\n                          locale: fr,\r\n                        });\r\n                        break;\r\n                      case \"État\":\r\n                        return (\r\n                          <td key={`${headerIndex}-${dayIndex}`}>\r\n                            <Button\r\n                              onClick={() => toggleDayState(index, dayIndex)}\r\n                              style={{\r\n                                backgroundColor: day.isOpen ? \"green\" : \"red\",\r\n                                color: \"white\",\r\n                              }}\r\n                            >\r\n                              {day.isOpen ? \"Ouvert\" : \"Fermé\"}\r\n                            </Button>\r\n                          </td>\r\n                        );\r\n                      case \"Ouverture Matin\":\r\n                      case \"Fermeture Matin\":\r\n                      case \"Ouverture Après-midi\":\r\n                      case \"Fermeture Après-midi\":\r\n                        cellContent = (\r\n                          <input\r\n                            key={`input-${dayIndex}-${\r\n                              day.isOpen ? \"open\" : \"closed\"\r\n                            }`}\r\n                            type=\"time\"\r\n                            value={\r\n                              day[header.toLowerCase().replace(/\\s/g, \"\")] || \"\"\r\n                            }\r\n                            onChange={(e) =>\r\n                              handleInputChange(e, index, dayIndex, header)\r\n                            }\r\n                            onBlur={(e) =>\r\n                              handleInputBlur(e, index, dayIndex, header)\r\n                            }\r\n                            disabled={!day.isOpen}\r\n                            style={{\r\n                              backgroundColor: day.isOpen\r\n                                ? \"lightyellow\"\r\n                                : \"lightgrey\",\r\n                            }}\r\n                          />\r\n                        );\r\n                        break;\r\n                      case \"Actions\":\r\n                        cellContent = (\r\n                          <div>\r\n                            <Button\r\n                              variant=\"primary\"\r\n                              onClick={() => copyDayContent(day.id)}\r\n                              className=\"me-2\"\r\n                            >\r\n                              Copier\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"secondary\"\r\n                              onClick={() => pasteStoredContent(day.id)}\r\n                            >\r\n                              Coller\r\n                            </Button>\r\n                          </div>\r\n                        );\r\n                        break;\r\n                      default:\r\n                        cellContent = \"N/A\";\r\n                    }\r\n                    return (\r\n                      <td key={`${headerIndex}-${dayIndex}`}>{cellContent}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        ))}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScheduleManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}