{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport { scheduleGetAllDays } from \"../../../serverRelated/ApiRequest\";\nimport { format, parseISO } from \"date-fns\";\nimport { fr } from \"date-fns/locale\"; // Importer les locales françaises\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagement = () => {\n  _s();\n  const [copiedDayData, setCopiedDayData] = useState(null);\n  const [preparedData, setPreparedData] = useState([]);\n  const toggleDayState = (weekIndex, dayIndex) => {\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n    const day = newData[weekIndex][dayIndex];\n\n    // Change l'état isOpen du jour concerné\n    day.isOpen = !day.isOpen;\n\n    // Si le jour est maintenant fermé, réinitialisez également les horaires\n    if (!day.isOpen) {\n      day.morningOpening = \"\";\n      day.morningClosing = \"\";\n      day.afternoonOpening = \"\";\n      day.afternoonClosing = \"\";\n    }\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  const copyDayContent = dayId => {\n    // Trouvez le jour avec l'ID spécifié dans les données préparées\n    const dayToCopy = preparedData.flat().find(day => day.id === dayId);\n    if (dayToCopy) {\n      setCopiedDayData({\n        ...dayToCopy\n      });\n      console.log(`Contenu du jour ${dayId} copié.`);\n    }\n  };\n  const pasteStoredDayContent = dayId => {\n    if (!copiedDayData) {\n      console.log(\"Aucun contenu à coller.\");\n      return;\n    }\n    const newData = preparedData.map(week => week.map(day => day.id === dayId ? {\n      ...day,\n      ...copiedDayData,\n      id: day.id\n    } : day));\n    setPreparedData(newData);\n    console.log(`Contenu collé dans le jour ${dayId}.`);\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        console.log(\"daysResponse\", daysResponse);\n        const preparedData = prepareDataForDisplay(daysResponse);\n        setPreparedData(preparedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const prepareDataForDisplay = data => {\n    const groupedData = [];\n    let currentGroup = [];\n    Object.keys(data).forEach(weekNumber => {\n      const week = data[weekNumber];\n      // Pour chaque semaine, vérifiez si vous avez plus de 7 jours et ajustez en conséquence.\n      week.forEach((day, index) => {\n        if (index < 7) {\n          // Assurez-vous de ne prendre que les 7 premiers jours\n          currentGroup.push(day);\n        }\n      });\n      if (currentGroup.length > 0) {\n        groupedData.push(currentGroup);\n        currentGroup = [];\n      }\n    });\n    return groupedData;\n  };\n  const handleInputChange = (event, weekIndex, dayIndex, type) => {\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\n    const newData = preparedData.map(week => week.map(day => ({\n      ...day\n    })));\n    const key = type.toLowerCase().replace(/\\s/g, \"\"); // Convertit \"Ouverture Matin\" en \"ouverturematin\", par exemple\n    newData[weekIndex][dayIndex][key] = newValue;\n    setPreparedData(newData);\n  };\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\n    const newValue = event.target.value;\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertit l'en-tête en clé correspondante\n\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n    const day = newData[weekIndex][dayIndex];\n\n    // Met à jour la valeur spécifique\n    day[key] = newValue || \"\"; // Utilisez une chaîne vide si la nouvelle valeur est falsy\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Ici, vous pourriez également envisager d'envoyer une mise à jour à votre serveur\n    // pour refléter le changement d'état, par exemple :\n    // updateDayOnServer(day.id, {[key]: newValue});\n  };\n\n  const openDaysInWeek = weekIndex => {\n    const newData = [...preparedData];\n    newData[weekIndex] = newData[weekIndex].map(day => ({\n      ...day,\n      isOpen: true // Ouvre le jour\n      // Vous pouvez laisser les horaires d'ouverture et de fermeture inchangés ou les définir selon un besoin spécifique\n    }));\n\n    setPreparedData(newData);\n\n    // Si nécessaire, envoyez les mises à jour au serveur ici\n  };\n\n  const pasteStoredWeekContent = weekId => {\n    console.log(`copyWeekContent 1 déclenché pour la semaine ${weekId}`);\n  };\n  const copyWeekContent = weekId => {\n    console.log(`copyWeekContent 1 déclenché pour la semaine ${weekId}`);\n  };\n  const closeDaysInWeek = weekIndex => {\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n\n    // Parcours tous les jours de la semaine spécifiée et les ferme\n    newData[weekIndex] = newData[weekIndex].map(day => ({\n      ...day,\n      isOpen: false,\n      // Ferme le jour\n      morningOpening: \"\",\n      // Réinitialise les horaires d'ouverture et de fermeture\n      morningClosing: \"\",\n      afternoonOpening: \"\",\n      afternoonClosing: \"\"\n    }));\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  const rowsHeaders = [\"Date\", \"État\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\", `Actions`];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: preparedData.map((week, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-light mt-5\",\n            children: [\"Semaine \", index + 1]\n          }, `week-title-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => copyWeekContent(index),\n            children: \"Copier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => copyWeekContent(index),\n            children: \"Coller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => openDaysInWeek(index),\n            children: \"Ouvrir la semaine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => closeDaysInWeek(index),\n            children: \"Fermer la semaine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          striped: true,\n          bordered: true,\n          hover: true,\n          className: \"text-center mt-4\",\n          responsive: true,\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: rowsHeaders.map((header, headerIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: header\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 21\n              }, this), week.map((day, dayIndex) => {\n                let cellContent;\n                switch (header) {\n                  case \"Date\":\n                    const date = parseISO(day.date); // Supposons que vous avez déjà importé parseISO et format\n                    cellContent = format(date, \"EEEE dd MMMM yyyy\", {\n                      locale: fr\n                    });\n                    break;\n                  case \"État\":\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        onClick: () => toggleDayState(index, dayIndex),\n                        style: {\n                          backgroundColor: day.isOpen ? \"green\" : \"red\",\n                          color: \"white\"\n                        },\n                        children: day.isOpen ? \"Ouvert\" : \"Fermé\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 254,\n                        columnNumber: 31\n                      }, this)\n                    }, `${headerIndex}-${dayIndex}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 253,\n                      columnNumber: 29\n                    }, this);\n                  case \"Ouverture Matin\":\n                  case \"Fermeture Matin\":\n                  case \"Ouverture Après-midi\":\n                  case \"Fermeture Après-midi\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      value: day[header.toLowerCase().replace(/\\s/g, \"\")] || \"\",\n                      onChange: e => handleInputChange(e, index, dayIndex, header),\n                      onBlur: e => handleInputBlur(e, index, dayIndex, header),\n                      disabled: !day.isOpen,\n                      style: {\n                        backgroundColor: day.isOpen ? \"lightyellow\" : \"lightgrey\"\n                      }\n                    }, `input-${dayIndex}-${day.isOpen ? \"open\" : \"closed\"}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 270,\n                      columnNumber: 29\n                    }, this);\n                    break;\n                  case \"Actions\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"secondary\",\n                        onClick: () => pasteStoredDayContent(day.id),\n                        children: \"Coller\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 297,\n                        columnNumber: 31\n                      }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"secondary\",\n                        onClick: () => copyDayContent(day.id),\n                        children: \"Copier\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 302,\n                        columnNumber: 41\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 296,\n                      columnNumber: 29\n                    }, this);\n                    break;\n                  default:\n                    cellContent = \"N/A\";\n                }\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: cellContent\n                }, `${headerIndex}-${dayIndex}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 316,\n                  columnNumber: 25\n                }, this);\n              })]\n            }, headerIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ScheduleManagement, \"afOblEvYgVFv0R37iKBGp1CxvCQ=\");\n_c = ScheduleManagement;\nexport default ScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","Table","Container","scheduleGetAllDays","format","parseISO","fr","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagement","_s","copiedDayData","setCopiedDayData","preparedData","setPreparedData","toggleDayState","weekIndex","dayIndex","newData","day","isOpen","morningOpening","morningClosing","afternoonOpening","afternoonClosing","copyDayContent","dayId","dayToCopy","flat","find","id","console","log","pasteStoredDayContent","map","week","fetchData","year","daysResponse","prepareDataForDisplay","error","data","groupedData","currentGroup","Object","keys","forEach","weekNumber","index","push","length","handleInputChange","event","type","newValue","target","value","key","toLowerCase","replace","handleInputBlur","header","openDaysInWeek","pasteStoredWeekContent","weekId","copyWeekContent","closeDaysInWeek","rowsHeaders","children","className","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","striped","bordered","hover","responsive","headerIndex","cellContent","date","locale","style","backgroundColor","color","onChange","e","onBlur","disabled","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { scheduleGetAllDays } from \"../../../serverRelated/ApiRequest\";\r\n\r\nimport { format, parseISO } from \"date-fns\";\r\nimport { fr } from \"date-fns/locale\"; // Importer les locales françaises\r\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagement = () => {\r\n  \r\n  const [copiedDayData, setCopiedDayData] = useState(null);\r\n  const [preparedData, setPreparedData] = useState([]);\r\n\r\n  const toggleDayState = (weekIndex, dayIndex) => {\r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex][dayIndex];\r\n\r\n    // Change l'état isOpen du jour concerné\r\n    day.isOpen = !day.isOpen;\r\n\r\n    // Si le jour est maintenant fermé, réinitialisez également les horaires\r\n    if (!day.isOpen) {\r\n      day.morningOpening = \"\";\r\n      day.morningClosing = \"\";\r\n      day.afternoonOpening = \"\";\r\n      day.afternoonClosing = \"\";\r\n    }\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  const copyDayContent = (dayId) => {\r\n    // Trouvez le jour avec l'ID spécifié dans les données préparées\r\n    const dayToCopy = preparedData.flat().find(day => day.id === dayId);\r\n  \r\n    if (dayToCopy) {\r\n      setCopiedDayData({...dayToCopy});\r\n      console.log(`Contenu du jour ${dayId} copié.`);\r\n    }\r\n  };\r\n\r\n  const pasteStoredDayContent = (dayId) => {\r\n    if (!copiedDayData) {\r\n      console.log(\"Aucun contenu à coller.\");\r\n      return;\r\n    }\r\n  \r\n    const newData = preparedData.map(week => \r\n      week.map(day => \r\n        day.id === dayId ? {...day, ...copiedDayData, id: day.id} : day\r\n      )\r\n    );\r\n  \r\n    setPreparedData(newData);\r\n    console.log(`Contenu collé dans le jour ${dayId}.`);\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        console.log(\"daysResponse\", daysResponse);\r\n\r\n        const preparedData = prepareDataForDisplay(daysResponse);\r\n        setPreparedData(preparedData);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const prepareDataForDisplay = (data) => {\r\n    const groupedData = [];\r\n    let currentGroup = [];\r\n\r\n    Object.keys(data).forEach((weekNumber) => {\r\n      const week = data[weekNumber];\r\n      // Pour chaque semaine, vérifiez si vous avez plus de 7 jours et ajustez en conséquence.\r\n      week.forEach((day, index) => {\r\n        if (index < 7) {\r\n          // Assurez-vous de ne prendre que les 7 premiers jours\r\n          currentGroup.push(day);\r\n        }\r\n      });\r\n\r\n      if (currentGroup.length > 0) {\r\n        groupedData.push(currentGroup);\r\n        currentGroup = [];\r\n      }\r\n    });\r\n\r\n    return groupedData;\r\n  };\r\n\r\n  const handleInputChange = (event, weekIndex, dayIndex, type) => {\r\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\r\n\r\n    const newData = preparedData.map((week) => week.map((day) => ({ ...day })));\r\n\r\n    const key = type.toLowerCase().replace(/\\s/g, \"\"); // Convertit \"Ouverture Matin\" en \"ouverturematin\", par exemple\r\n    newData[weekIndex][dayIndex][key] = newValue;\r\n\r\n    setPreparedData(newData);\r\n  };\r\n\r\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\r\n    const newValue = event.target.value;\r\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertit l'en-tête en clé correspondante\r\n\r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex][dayIndex];\r\n\r\n    // Met à jour la valeur spécifique\r\n    day[key] = newValue || \"\"; // Utilisez une chaîne vide si la nouvelle valeur est falsy\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Ici, vous pourriez également envisager d'envoyer une mise à jour à votre serveur\r\n    // pour refléter le changement d'état, par exemple :\r\n    // updateDayOnServer(day.id, {[key]: newValue});\r\n  };\r\n\r\n  const openDaysInWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n  \r\n    newData[weekIndex] = newData[weekIndex].map(day => ({\r\n      ...day,\r\n      isOpen: true, // Ouvre le jour\r\n      // Vous pouvez laisser les horaires d'ouverture et de fermeture inchangés ou les définir selon un besoin spécifique\r\n    }));\r\n  \r\n    setPreparedData(newData);\r\n  \r\n    // Si nécessaire, envoyez les mises à jour au serveur ici\r\n  };\r\n  \r\n  \r\n  const pasteStoredWeekContent = (weekId) => {\r\n    console.log(`copyWeekContent 1 déclenché pour la semaine ${weekId}`);\r\n  };\r\n  const copyWeekContent = (weekId) => {\r\n    console.log(`copyWeekContent 1 déclenché pour la semaine ${weekId}`);\r\n  };\r\n\r\n  const closeDaysInWeek = (weekIndex) => {\r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n\r\n    // Parcours tous les jours de la semaine spécifiée et les ferme\r\n    newData[weekIndex] = newData[weekIndex].map((day) => ({\r\n      ...day,\r\n      isOpen: false, // Ferme le jour\r\n      morningOpening: \"\", // Réinitialise les horaires d'ouverture et de fermeture\r\n      morningClosing: \"\",\r\n      afternoonOpening: \"\",\r\n      afternoonClosing: \"\",\r\n    }));\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  const rowsHeaders = [\r\n    \"Date\",\r\n    \"État\",\r\n    \"Ouverture Matin\",\r\n    \"Fermeture Matin\",\r\n    \"Ouverture Après-midi\",\r\n    \"Fermeture Après-midi\",\r\n    `Actions`,\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        {preparedData.map((week, index) => (\r\n          <>\r\n            <div>\r\n              <h2\r\n                key={`week-title-${index}`}\r\n                className=\"text-light mt-5\"\r\n              >\r\n                Semaine {index + 1}\r\n              </h2>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => copyWeekContent(index)}\r\n              >\r\n                Copier\r\n              </Button>{\" \"}\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => copyWeekContent(index)}\r\n              >\r\n                Coller\r\n              </Button>{\" \"}\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => openDaysInWeek(index)}\r\n              >\r\n                Ouvrir la semaine\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => closeDaysInWeek(index)}\r\n              >\r\n                Fermer la semaine\r\n              </Button>\r\n            </div>\r\n\r\n            <Table\r\n              key={index}\r\n              striped\r\n              bordered\r\n              hover\r\n              className=\"text-center mt-4\"\r\n              responsive\r\n            >\r\n              <tbody>\r\n                {rowsHeaders.map((header, headerIndex) => (\r\n                  <tr key={headerIndex}>\r\n                    <th>{header}</th>\r\n                    {week.map((day, dayIndex) => {\r\n                      let cellContent;\r\n                      switch (header) {\r\n                        case \"Date\":\r\n                          const date = parseISO(day.date); // Supposons que vous avez déjà importé parseISO et format\r\n                          cellContent = format(date, \"EEEE dd MMMM yyyy\", {\r\n                            locale: fr,\r\n                          });\r\n                          break;\r\n                        case \"État\":\r\n                          return (\r\n                            <td key={`${headerIndex}-${dayIndex}`}>\r\n                              <Button\r\n                                onClick={() => toggleDayState(index, dayIndex)}\r\n                                style={{\r\n                                  backgroundColor: day.isOpen ? \"green\" : \"red\",\r\n                                  color: \"white\",\r\n                                }}\r\n                              >\r\n                                {day.isOpen ? \"Ouvert\" : \"Fermé\"}\r\n                              </Button>\r\n                            </td>\r\n                          );\r\n                        case \"Ouverture Matin\":\r\n                        case \"Fermeture Matin\":\r\n                        case \"Ouverture Après-midi\":\r\n                        case \"Fermeture Après-midi\":\r\n                          cellContent = (\r\n                            <input\r\n                              key={`input-${dayIndex}-${\r\n                                day.isOpen ? \"open\" : \"closed\"\r\n                              }`}\r\n                              type=\"time\"\r\n                              value={\r\n                                day[header.toLowerCase().replace(/\\s/g, \"\")] ||\r\n                                \"\"\r\n                              }\r\n                              onChange={(e) =>\r\n                                handleInputChange(e, index, dayIndex, header)\r\n                              }\r\n                              onBlur={(e) =>\r\n                                handleInputBlur(e, index, dayIndex, header)\r\n                              }\r\n                              disabled={!day.isOpen}\r\n                              style={{\r\n                                backgroundColor: day.isOpen\r\n                                  ? \"lightyellow\"\r\n                                  : \"lightgrey\",\r\n                              }}\r\n                            />\r\n                          );\r\n                          break;\r\n                        case \"Actions\":\r\n                          cellContent = (\r\n                            <div>\r\n                              <Button\r\n                                variant=\"secondary\"\r\n                                onClick={() => pasteStoredDayContent(day.id)}\r\n                              >\r\n                                Coller\r\n                              </Button> <Button\r\n                                variant=\"secondary\"\r\n                                onClick={() => copyDayContent(day.id)}\r\n                              >\r\n                                Copier\r\n                              </Button>\r\n                            </div>\r\n                          );\r\n                          break;\r\n\r\n                        default:\r\n                          cellContent = \"N/A\";\r\n                      }\r\n                      return (\r\n                        <td key={`${headerIndex}-${dayIndex}`}>\r\n                          {cellContent}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </>\r\n        ))}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScheduleManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}