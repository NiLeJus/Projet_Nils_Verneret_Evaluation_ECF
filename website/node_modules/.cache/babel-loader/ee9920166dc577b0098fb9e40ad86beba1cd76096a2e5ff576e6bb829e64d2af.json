{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport { scheduleGetAllDays } from \"../../../serverRelated/ApiRequest\";\nimport { format, parseISO } from \"date-fns\";\nimport { fr } from \"date-fns/locale\"; // Importer les locales françaises\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagement = () => {\n  _s();\n  const [preparedData, setPreparedData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        console.log(\"daysResponse\", daysResponse);\n        const preparedData = prepareDataForDisplay(daysResponse);\n        setPreparedData(preparedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const prepareDataForDisplay = data => {\n    const groupedData = [];\n    let currentGroup = [];\n    Object.keys(data).forEach(weekNumber => {\n      const week = data[weekNumber];\n      // Pour chaque semaine, vérifiez si vous avez plus de 7 jours et ajustez en conséquence.\n      week.forEach((day, index) => {\n        if (index < 7) {\n          // Assurez-vous de ne prendre que les 7 premiers jours\n          currentGroup.push(day);\n        }\n      });\n      if (currentGroup.length > 0) {\n        groupedData.push(currentGroup);\n        currentGroup = [];\n      }\n    });\n    return groupedData;\n  };\n  const rowsHeaders = [\"Date\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: preparedData.map((week, index) => /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: rowsHeaders.map((header, headerIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: header\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this), week.map((day, dayIndex) => {\n              let cellContent;\n              switch (header) {\n                case \"Date\":\n                  const date = parseISO(day.date); // Convertir la chaîne de date ISO en objet Date\n                  cellContent = format(date, \"EEEE dd MMMM yyyy\", {\n                    locale: fr\n                  }); // Formatter la date\n                  break;\n                case \"Ouverture Matin\":\n                  cellContent = day.morningOpening ? day.morningOpening : \"Fermé\";\n                  break;\n                case \"Fermeture Matin\":\n                  cellContent = day.morningClosing ? day.morningClosing : \"Fermé\";\n                  break;\n                case \"Ouverture Après-midi\":\n                  cellContent = day.afternoonOpening ? day.afternoonOpening : \"Fermé\";\n                  break;\n                case \"Fermeture Après-midi\":\n                  cellContent = day.afternoonClosing ? day.afternoonClosing : \"Fermé\";\n                  break;\n                default:\n                  cellContent = \"N/A\";\n              }\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: cellContent\n              }, dayIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 28\n              }, this);\n            })]\n          }, headerIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ScheduleManagement, \"iKWBrHeWYydjV2iquAVOGFhht/M=\");\n_c = ScheduleManagement;\nexport default ScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","Table","Container","scheduleGetAllDays","format","parseISO","fr","jsxDEV","_jsxDEV","Fragment","_Fragment","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagement","_s","preparedData","setPreparedData","fetchData","year","daysResponse","console","log","prepareDataForDisplay","error","data","groupedData","currentGroup","Object","keys","forEach","weekNumber","week","day","index","push","length","rowsHeaders","children","map","striped","bordered","hover","header","headerIndex","fileName","_jsxFileName","lineNumber","columnNumber","dayIndex","cellContent","date","locale","morningOpening","morningClosing","afternoonOpening","afternoonClosing","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { scheduleGetAllDays } from \"../../../serverRelated/ApiRequest\";\r\n\r\nimport { format, parseISO } from \"date-fns\";\r\nimport { fr } from \"date-fns/locale\"; // Importer les locales françaises\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagement = () => {\r\n  const [preparedData, setPreparedData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        console.log(\"daysResponse\", daysResponse);\r\n\r\n        const preparedData = prepareDataForDisplay(daysResponse);\r\n        setPreparedData(preparedData);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const prepareDataForDisplay = (data) => {\r\n    const groupedData = [];\r\n    let currentGroup = [];\r\n\r\n    Object.keys(data).forEach((weekNumber) => {\r\n      const week = data[weekNumber];\r\n      // Pour chaque semaine, vérifiez si vous avez plus de 7 jours et ajustez en conséquence.\r\n      week.forEach((day, index) => {\r\n        if (index < 7) {\r\n          // Assurez-vous de ne prendre que les 7 premiers jours\r\n          currentGroup.push(day);\r\n        }\r\n      });\r\n\r\n      if (currentGroup.length > 0) {\r\n        groupedData.push(currentGroup);\r\n        currentGroup = [];\r\n      }\r\n    });\r\n\r\n    return groupedData;\r\n  };\r\n\r\n  const rowsHeaders = [\r\n    \"Date\",\r\n    \"Ouverture Matin\",\r\n    \"Fermeture Matin\",\r\n    \"Ouverture Après-midi\",\r\n    \"Fermeture Après-midi\",\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        {preparedData.map((week, index) => (\r\n          <Table\r\n            key={index}\r\n            striped\r\n            bordered\r\n            hover\r\n          >\r\n            <tbody>\r\n              {rowsHeaders.map((header, headerIndex) => (\r\n                <tr key={headerIndex}>\r\n                  <th>{header}</th>\r\n                  {week.map((day, dayIndex) => {\r\n                    let cellContent;\r\n                    switch (header) {\r\n                      case \"Date\":\r\n                        const date = parseISO(day.date); // Convertir la chaîne de date ISO en objet Date\r\n                        cellContent = format(date, \"EEEE dd MMMM yyyy\", {\r\n                          locale: fr,\r\n                        }); // Formatter la date\r\n                        break;\r\n                      case \"Ouverture Matin\":\r\n                        cellContent = day.morningOpening\r\n                          ? day.morningOpening\r\n                          : \"Fermé\";\r\n                        break;\r\n                      case \"Fermeture Matin\":\r\n                        cellContent = day.morningClosing\r\n                          ? day.morningClosing\r\n                          : \"Fermé\";\r\n                        break;\r\n                      case \"Ouverture Après-midi\":\r\n                        cellContent = day.afternoonOpening\r\n                          ? day.afternoonOpening\r\n                          : \"Fermé\";\r\n                        break;\r\n                      case \"Fermeture Après-midi\":\r\n                        cellContent = day.afternoonClosing\r\n                          ? day.afternoonClosing\r\n                          : \"Fermé\";\r\n                        break;\r\n                      default:\r\n                        cellContent = \"N/A\";\r\n                    }\r\n                    return <td key={dayIndex}>{cellContent}</td>;\r\n                  })}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        ))}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScheduleManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}