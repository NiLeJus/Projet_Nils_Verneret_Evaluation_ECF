{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport { scheduleGetAllDays } from \"../../../serverRelated/ApiRequest\";\nimport { format, parseISO } from \"date-fns\";\nimport { fr } from \"date-fns/locale\"; // Importer les locales françaises\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagement = () => {\n  _s();\n  const [preparedData, setPreparedData] = useState([]);\n  const toggleDayState = (weekIndex, dayIndex) => {\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n    const day = newData[weekIndex][dayIndex];\n\n    // Change l'état isOpen du jour concerné\n    day.isOpen = !day.isOpen;\n\n    // Si le jour est maintenant fermé, réinitialisez également les horaires\n    if (!day.isOpen) {\n      day.morningOpening = \"\";\n      day.morningClosing = \"\";\n      day.afternoonOpening = \"\";\n      day.afternoonClosing = \"\";\n    }\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        console.log(\"daysResponse\", daysResponse);\n        const preparedData = prepareDataForDisplay(daysResponse);\n        setPreparedData(preparedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const prepareDataForDisplay = data => {\n    const groupedData = [];\n    let currentGroup = [];\n    Object.keys(data).forEach(weekNumber => {\n      const week = data[weekNumber];\n      // Pour chaque semaine, vérifiez si vous avez plus de 7 jours et ajustez en conséquence.\n      week.forEach((day, index) => {\n        if (index < 7) {\n          // Assurez-vous de ne prendre que les 7 premiers jours\n          currentGroup.push(day);\n        }\n      });\n      if (currentGroup.length > 0) {\n        groupedData.push(currentGroup);\n        currentGroup = [];\n      }\n    });\n    return groupedData;\n  };\n  const handleInputChange = (event, weekIndex, dayIndex, type) => {\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\n    const newData = preparedData.map(week => week.map(day => ({\n      ...day\n    })));\n    const key = type.toLowerCase().replace(/\\s/g, \"\"); // Convertit \"Ouverture Matin\" en \"ouverturematin\", par exemple\n    newData[weekIndex][dayIndex][key] = newValue;\n    setPreparedData(newData);\n  };\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\n    const newValue = event.target.value;\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertit l'en-tête en clé correspondante\n\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n    const day = newData[weekIndex][dayIndex];\n\n    // Met à jour la valeur spécifique\n    day[key] = newValue || \"\"; // Utilisez une chaîne vide si la nouvelle valeur est falsy\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Ici, vous pourriez également envisager d'envoyer une mise à jour à votre serveur\n    // pour refléter le changement d'état, par exemple :\n    // updateDayOnServer(day.id, {[key]: newValue});\n  };\n\n  const openDaysInWeek = weekIndex => {\n    const newData = [...preparedData];\n    newData[weekIndex] = newData[weekIndex].map(day => ({\n      ...day,\n      isOpen: true // Ouvre le jour\n      // Vous pouvez laisser les horaires d'ouverture et de fermeture inchangés ou les définir selon un besoin spécifique\n    }));\n\n    setPreparedData(newData);\n\n    // Si nécessaire, envoyez les mises à jour au serveur ici\n  };\n\n  const copyDayContent = dayId => {\n    console.log(`copyDayContent 1 déclenché pour le jour ${dayId}`);\n  };\n  const pasteStoredDayContent = dayId => {\n    console.log(`pasteStoredDayContent 2 déclenché pour le jour ${dayId}`);\n  };\n  const pasteStoredWeekContent = weekId => {\n    console.log(`copyWeekContent 1 déclenché pour la semaine ${weekId}`);\n  };\n  const copyWeekContent = weekId => {\n    console.log(`copyWeekContent 1 déclenché pour la semaine ${weekId}`);\n  };\n  const closeDaysInWeek = weekIndex => {\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n\n    // Parcours tous les jours de la semaine spécifiée et les ferme\n    newData[weekIndex] = newData[weekIndex].map(day => ({\n      ...day,\n      isOpen: false,\n      // Ferme le jour\n      morningOpening: \"\",\n      // Réinitialise les horaires d'ouverture et de fermeture\n      morningClosing: \"\",\n      afternoonOpening: \"\",\n      afternoonClosing: \"\"\n    }));\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  const rowsHeaders = [\"Date\", \"État\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\", `Actions`];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: preparedData.map((week, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-light mt-5\",\n            children: [\"Semaine \", index + 1]\n          }, `week-title-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => copyWeekContent(index),\n            children: \"Copier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => copyWeekContent(index),\n            children: \"Coller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => openDaysInWeek(index),\n            children: \"Ouvrir la semaine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => closeDaysInWeek(index),\n            children: \"Fermer la semaine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          striped: true,\n          bordered: true,\n          hover: true,\n          className: \"text-center mt-4\",\n          responsive: true,\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: rowsHeaders.map((header, headerIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: header\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 21\n              }, this), week.map((day, dayIndex) => {\n                let cellContent;\n                switch (header) {\n                  case \"Date\":\n                    const date = parseISO(day.date); // Supposons que vous avez déjà importé parseISO et format\n                    cellContent = format(date, \"EEEE dd MMMM yyyy\", {\n                      locale: fr\n                    });\n                    break;\n                  case \"État\":\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        onClick: () => toggleDayState(index, dayIndex),\n                        style: {\n                          backgroundColor: day.isOpen ? \"green\" : \"red\",\n                          color: \"white\"\n                        },\n                        children: day.isOpen ? \"Ouvert\" : \"Fermé\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 232,\n                        columnNumber: 31\n                      }, this)\n                    }, `${headerIndex}-${dayIndex}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 231,\n                      columnNumber: 29\n                    }, this);\n                  case \"Ouverture Matin\":\n                  case \"Fermeture Matin\":\n                  case \"Ouverture Après-midi\":\n                  case \"Fermeture Après-midi\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      value: day[header.toLowerCase().replace(/\\s/g, \"\")] || \"\",\n                      onChange: e => handleInputChange(e, index, dayIndex, header),\n                      onBlur: e => handleInputBlur(e, index, dayIndex, header),\n                      disabled: !day.isOpen,\n                      style: {\n                        backgroundColor: day.isOpen ? \"lightyellow\" : \"lightgrey\"\n                      }\n                    }, `input-${dayIndex}-${day.isOpen ? \"open\" : \"closed\"}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 248,\n                      columnNumber: 29\n                    }, this);\n                    break;\n                  case \"Actions\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"secondary\",\n                        onClick: () => pasteStoredDayContent(day.id),\n                        children: \"Coller\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 275,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 274,\n                      columnNumber: 29\n                    }, this);\n                    break;\n                  default:\n                    cellContent = \"N/A\";\n                }\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: cellContent\n                }, `${headerIndex}-${dayIndex}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 25\n                }, this);\n              })]\n            }, headerIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ScheduleManagement, \"iKWBrHeWYydjV2iquAVOGFhht/M=\");\n_c = ScheduleManagement;\nexport default ScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","Table","Container","scheduleGetAllDays","format","parseISO","fr","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagement","_s","preparedData","setPreparedData","toggleDayState","weekIndex","dayIndex","newData","day","isOpen","morningOpening","morningClosing","afternoonOpening","afternoonClosing","fetchData","year","daysResponse","console","log","prepareDataForDisplay","error","data","groupedData","currentGroup","Object","keys","forEach","weekNumber","week","index","push","length","handleInputChange","event","type","newValue","target","value","map","key","toLowerCase","replace","handleInputBlur","header","openDaysInWeek","copyDayContent","dayId","pasteStoredDayContent","pasteStoredWeekContent","weekId","copyWeekContent","closeDaysInWeek","rowsHeaders","children","className","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","striped","bordered","hover","responsive","headerIndex","cellContent","date","locale","style","backgroundColor","color","onChange","e","onBlur","disabled","id","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { scheduleGetAllDays } from \"../../../serverRelated/ApiRequest\";\r\n\r\nimport { format, parseISO } from \"date-fns\";\r\nimport { fr } from \"date-fns/locale\"; // Importer les locales françaises\r\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagement = () => {\r\n  const [preparedData, setPreparedData] = useState([]);\r\n\r\n  const toggleDayState = (weekIndex, dayIndex) => {\r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex][dayIndex];\r\n\r\n    // Change l'état isOpen du jour concerné\r\n    day.isOpen = !day.isOpen;\r\n\r\n    // Si le jour est maintenant fermé, réinitialisez également les horaires\r\n    if (!day.isOpen) {\r\n      day.morningOpening = \"\";\r\n      day.morningClosing = \"\";\r\n      day.afternoonOpening = \"\";\r\n      day.afternoonClosing = \"\";\r\n    }\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        console.log(\"daysResponse\", daysResponse);\r\n\r\n        const preparedData = prepareDataForDisplay(daysResponse);\r\n        setPreparedData(preparedData);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const prepareDataForDisplay = (data) => {\r\n    const groupedData = [];\r\n    let currentGroup = [];\r\n\r\n    Object.keys(data).forEach((weekNumber) => {\r\n      const week = data[weekNumber];\r\n      // Pour chaque semaine, vérifiez si vous avez plus de 7 jours et ajustez en conséquence.\r\n      week.forEach((day, index) => {\r\n        if (index < 7) {\r\n          // Assurez-vous de ne prendre que les 7 premiers jours\r\n          currentGroup.push(day);\r\n        }\r\n      });\r\n\r\n      if (currentGroup.length > 0) {\r\n        groupedData.push(currentGroup);\r\n        currentGroup = [];\r\n      }\r\n    });\r\n\r\n    return groupedData;\r\n  };\r\n\r\n  const handleInputChange = (event, weekIndex, dayIndex, type) => {\r\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\r\n\r\n    const newData = preparedData.map((week) => week.map((day) => ({ ...day })));\r\n\r\n    const key = type.toLowerCase().replace(/\\s/g, \"\"); // Convertit \"Ouverture Matin\" en \"ouverturematin\", par exemple\r\n    newData[weekIndex][dayIndex][key] = newValue;\r\n\r\n    setPreparedData(newData);\r\n  };\r\n\r\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\r\n    const newValue = event.target.value;\r\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertit l'en-tête en clé correspondante\r\n\r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex][dayIndex];\r\n\r\n    // Met à jour la valeur spécifique\r\n    day[key] = newValue || \"\"; // Utilisez une chaîne vide si la nouvelle valeur est falsy\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Ici, vous pourriez également envisager d'envoyer une mise à jour à votre serveur\r\n    // pour refléter le changement d'état, par exemple :\r\n    // updateDayOnServer(day.id, {[key]: newValue});\r\n  };\r\n\r\n  const openDaysInWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n  \r\n    newData[weekIndex] = newData[weekIndex].map(day => ({\r\n      ...day,\r\n      isOpen: true, // Ouvre le jour\r\n      // Vous pouvez laisser les horaires d'ouverture et de fermeture inchangés ou les définir selon un besoin spécifique\r\n    }));\r\n  \r\n    setPreparedData(newData);\r\n  \r\n    // Si nécessaire, envoyez les mises à jour au serveur ici\r\n  };\r\n  \r\n\r\n  const copyDayContent = (dayId) => {\r\n    console.log(`copyDayContent 1 déclenché pour le jour ${dayId}`);\r\n  };\r\n\r\n  const pasteStoredDayContent = (dayId) => {\r\n    console.log(`pasteStoredDayContent 2 déclenché pour le jour ${dayId}`);\r\n  };\r\n  const pasteStoredWeekContent = (weekId) => {\r\n    console.log(`copyWeekContent 1 déclenché pour la semaine ${weekId}`);\r\n  };\r\n  const copyWeekContent = (weekId) => {\r\n    console.log(`copyWeekContent 1 déclenché pour la semaine ${weekId}`);\r\n  };\r\n\r\n  const closeDaysInWeek = (weekIndex) => {\r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n\r\n    // Parcours tous les jours de la semaine spécifiée et les ferme\r\n    newData[weekIndex] = newData[weekIndex].map((day) => ({\r\n      ...day,\r\n      isOpen: false, // Ferme le jour\r\n      morningOpening: \"\", // Réinitialise les horaires d'ouverture et de fermeture\r\n      morningClosing: \"\",\r\n      afternoonOpening: \"\",\r\n      afternoonClosing: \"\",\r\n    }));\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  const rowsHeaders = [\r\n    \"Date\",\r\n    \"État\",\r\n    \"Ouverture Matin\",\r\n    \"Fermeture Matin\",\r\n    \"Ouverture Après-midi\",\r\n    \"Fermeture Après-midi\",\r\n    `Actions`,\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        {preparedData.map((week, index) => (\r\n          <>\r\n            <div>\r\n              <h2\r\n                key={`week-title-${index}`}\r\n                className=\"text-light mt-5\"\r\n              >\r\n                Semaine {index + 1}\r\n              </h2>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => copyWeekContent(index)}\r\n              >\r\n                Copier\r\n              </Button>{\" \"}\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => copyWeekContent(index)}\r\n              >\r\n                Coller\r\n              </Button>{\" \"}\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => openDaysInWeek(index)}\r\n              >\r\n                Ouvrir la semaine\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => closeDaysInWeek(index)}\r\n              >\r\n                Fermer la semaine\r\n              </Button>\r\n            </div>\r\n\r\n            <Table\r\n              key={index}\r\n              striped\r\n              bordered\r\n              hover\r\n              className=\"text-center mt-4\"\r\n              responsive\r\n            >\r\n              <tbody>\r\n                {rowsHeaders.map((header, headerIndex) => (\r\n                  <tr key={headerIndex}>\r\n                    <th>{header}</th>\r\n                    {week.map((day, dayIndex) => {\r\n                      let cellContent;\r\n                      switch (header) {\r\n                        case \"Date\":\r\n                          const date = parseISO(day.date); // Supposons que vous avez déjà importé parseISO et format\r\n                          cellContent = format(date, \"EEEE dd MMMM yyyy\", {\r\n                            locale: fr,\r\n                          });\r\n                          break;\r\n                        case \"État\":\r\n                          return (\r\n                            <td key={`${headerIndex}-${dayIndex}`}>\r\n                              <Button\r\n                                onClick={() => toggleDayState(index, dayIndex)}\r\n                                style={{\r\n                                  backgroundColor: day.isOpen ? \"green\" : \"red\",\r\n                                  color: \"white\",\r\n                                }}\r\n                              >\r\n                                {day.isOpen ? \"Ouvert\" : \"Fermé\"}\r\n                              </Button>\r\n                            </td>\r\n                          );\r\n                        case \"Ouverture Matin\":\r\n                        case \"Fermeture Matin\":\r\n                        case \"Ouverture Après-midi\":\r\n                        case \"Fermeture Après-midi\":\r\n                          cellContent = (\r\n                            <input\r\n                              key={`input-${dayIndex}-${\r\n                                day.isOpen ? \"open\" : \"closed\"\r\n                              }`}\r\n                              type=\"time\"\r\n                              value={\r\n                                day[header.toLowerCase().replace(/\\s/g, \"\")] ||\r\n                                \"\"\r\n                              }\r\n                              onChange={(e) =>\r\n                                handleInputChange(e, index, dayIndex, header)\r\n                              }\r\n                              onBlur={(e) =>\r\n                                handleInputBlur(e, index, dayIndex, header)\r\n                              }\r\n                              disabled={!day.isOpen}\r\n                              style={{\r\n                                backgroundColor: day.isOpen\r\n                                  ? \"lightyellow\"\r\n                                  : \"lightgrey\",\r\n                              }}\r\n                            />\r\n                          );\r\n                          break;\r\n                        case \"Actions\":\r\n                          cellContent = (\r\n                            <div>\r\n                              <Button\r\n                                variant=\"secondary\"\r\n                                onClick={() => pasteStoredDayContent(day.id)}\r\n                              >\r\n                                Coller\r\n                              </Button>\r\n                            </div>\r\n                          );\r\n                          break;\r\n\r\n                        default:\r\n                          cellContent = \"N/A\";\r\n                      }\r\n                      return (\r\n                        <td key={`${headerIndex}-${dayIndex}`}>\r\n                          {cellContent}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </>\r\n        ))}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScheduleManagement;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,SAAS,MAAM,2BAA2B;AACjD,SAASC,kBAAkB,QAAQ,mCAAmC;AAEtE,SAASC,MAAM,EAAEC,QAAQ,QAAQ,UAAU;AAC3C,SAASC,EAAE,QAAQ,iBAAiB,CAAC,CAAC;AACtC,OAAOC,MAAM,MAAM,wBAAwB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC9B,OAAOD,WAAW,CAACE,WAAW,CAAC,CAAC;AAClC,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMqB,cAAc,GAAGA,CAACC,SAAS,EAAEC,QAAQ,KAAK;IAC9C;IACA,MAAMC,OAAO,GAAG,CAAC,GAAGL,YAAY,CAAC;IACjC,MAAMM,GAAG,GAAGD,OAAO,CAACF,SAAS,CAAC,CAACC,QAAQ,CAAC;;IAExC;IACAE,GAAG,CAACC,MAAM,GAAG,CAACD,GAAG,CAACC,MAAM;;IAExB;IACA,IAAI,CAACD,GAAG,CAACC,MAAM,EAAE;MACfD,GAAG,CAACE,cAAc,GAAG,EAAE;MACvBF,GAAG,CAACG,cAAc,GAAG,EAAE;MACvBH,GAAG,CAACI,gBAAgB,GAAG,EAAE;MACzBJ,GAAG,CAACK,gBAAgB,GAAG,EAAE;IAC3B;;IAEA;IACAV,eAAe,CAACI,OAAO,CAAC;;IAExB;EACF,CAAC;;EAEDvB,SAAS,CAAC,MAAM;IACd,MAAM8B,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,IAAI,GAAGnB,cAAc,CAAC,CAAC;MAC7B,IAAI;QACF;QACA,MAAMoB,YAAY,GAAG,MAAM7B,kBAAkB,CAAC4B,IAAI,CAAC;QACnDE,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,YAAY,CAAC;QAEzC,MAAMd,YAAY,GAAGiB,qBAAqB,CAACH,YAAY,CAAC;QACxDb,eAAe,CAACD,YAAY,CAAC;MAC/B,CAAC,CAAC,OAAOkB,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;MACtE;IACF,CAAC;IAEDN,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,qBAAqB,GAAIE,IAAI,IAAK;IACtC,MAAMC,WAAW,GAAG,EAAE;IACtB,IAAIC,YAAY,GAAG,EAAE;IAErBC,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,CAACK,OAAO,CAAEC,UAAU,IAAK;MACxC,MAAMC,IAAI,GAAGP,IAAI,CAACM,UAAU,CAAC;MAC7B;MACAC,IAAI,CAACF,OAAO,CAAC,CAAClB,GAAG,EAAEqB,KAAK,KAAK;QAC3B,IAAIA,KAAK,GAAG,CAAC,EAAE;UACb;UACAN,YAAY,CAACO,IAAI,CAACtB,GAAG,CAAC;QACxB;MACF,CAAC,CAAC;MAEF,IAAIe,YAAY,CAACQ,MAAM,GAAG,CAAC,EAAE;QAC3BT,WAAW,CAACQ,IAAI,CAACP,YAAY,CAAC;QAC9BA,YAAY,GAAG,EAAE;MACnB;IACF,CAAC,CAAC;IAEF,OAAOD,WAAW;EACpB,CAAC;EAED,MAAMU,iBAAiB,GAAGA,CAACC,KAAK,EAAE5B,SAAS,EAAEC,QAAQ,EAAE4B,IAAI,KAAK;IAC9D,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAACC,KAAK,KAAK,EAAE,GAAGJ,KAAK,CAACG,MAAM,CAACC,KAAK,GAAG,IAAI;IAEtE,MAAM9B,OAAO,GAAGL,YAAY,CAACoC,GAAG,CAAEV,IAAI,IAAKA,IAAI,CAACU,GAAG,CAAE9B,GAAG,KAAM;MAAE,GAAGA;IAAI,CAAC,CAAC,CAAC,CAAC;IAE3E,MAAM+B,GAAG,GAAGL,IAAI,CAACM,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;IACnDlC,OAAO,CAACF,SAAS,CAAC,CAACC,QAAQ,CAAC,CAACiC,GAAG,CAAC,GAAGJ,QAAQ;IAE5ChC,eAAe,CAACI,OAAO,CAAC;EAC1B,CAAC;EAED,MAAMmC,eAAe,GAAGA,CAACT,KAAK,EAAE5B,SAAS,EAAEC,QAAQ,EAAEqC,MAAM,KAAK;IAC9D,MAAMR,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAACC,KAAK;IACnC,MAAME,GAAG,GAAGI,MAAM,CAACH,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;;IAErD;IACA,MAAMlC,OAAO,GAAG,CAAC,GAAGL,YAAY,CAAC;IACjC,MAAMM,GAAG,GAAGD,OAAO,CAACF,SAAS,CAAC,CAACC,QAAQ,CAAC;;IAExC;IACAE,GAAG,CAAC+B,GAAG,CAAC,GAAGJ,QAAQ,IAAI,EAAE,CAAC,CAAC;;IAE3B;IACAhC,eAAe,CAACI,OAAO,CAAC;;IAExB;IACA;IACA;EACF,CAAC;;EAED,MAAMqC,cAAc,GAAIvC,SAAS,IAAK;IACpC,MAAME,OAAO,GAAG,CAAC,GAAGL,YAAY,CAAC;IAEjCK,OAAO,CAACF,SAAS,CAAC,GAAGE,OAAO,CAACF,SAAS,CAAC,CAACiC,GAAG,CAAC9B,GAAG,KAAK;MAClD,GAAGA,GAAG;MACNC,MAAM,EAAE,IAAI,CAAE;MACd;IACF,CAAC,CAAC,CAAC;;IAEHN,eAAe,CAACI,OAAO,CAAC;;IAExB;EACF,CAAC;;EAGD,MAAMsC,cAAc,GAAIC,KAAK,IAAK;IAChC7B,OAAO,CAACC,GAAG,CAAE,2CAA0C4B,KAAM,EAAC,CAAC;EACjE,CAAC;EAED,MAAMC,qBAAqB,GAAID,KAAK,IAAK;IACvC7B,OAAO,CAACC,GAAG,CAAE,kDAAiD4B,KAAM,EAAC,CAAC;EACxE,CAAC;EACD,MAAME,sBAAsB,GAAIC,MAAM,IAAK;IACzChC,OAAO,CAACC,GAAG,CAAE,+CAA8C+B,MAAO,EAAC,CAAC;EACtE,CAAC;EACD,MAAMC,eAAe,GAAID,MAAM,IAAK;IAClChC,OAAO,CAACC,GAAG,CAAE,+CAA8C+B,MAAO,EAAC,CAAC;EACtE,CAAC;EAED,MAAME,eAAe,GAAI9C,SAAS,IAAK;IACrC;IACA,MAAME,OAAO,GAAG,CAAC,GAAGL,YAAY,CAAC;;IAEjC;IACAK,OAAO,CAACF,SAAS,CAAC,GAAGE,OAAO,CAACF,SAAS,CAAC,CAACiC,GAAG,CAAE9B,GAAG,KAAM;MACpD,GAAGA,GAAG;MACNC,MAAM,EAAE,KAAK;MAAE;MACfC,cAAc,EAAE,EAAE;MAAE;MACpBC,cAAc,EAAE,EAAE;MAClBC,gBAAgB,EAAE,EAAE;MACpBC,gBAAgB,EAAE;IACpB,CAAC,CAAC,CAAC;;IAEH;IACAV,eAAe,CAACI,OAAO,CAAC;;IAExB;EACF,CAAC;;EAED,MAAM6C,WAAW,GAAG,CAClB,MAAM,EACN,MAAM,EACN,iBAAiB,EACjB,iBAAiB,EACjB,sBAAsB,EACtB,sBAAsB,EACrB,SAAQ,CACV;EAED,oBACE3D,OAAA,CAAAE,SAAA;IAAA0D,QAAA,eACE5D,OAAA,CAACP,SAAS;MAAAmE,QAAA,EACPnD,YAAY,CAACoC,GAAG,CAAC,CAACV,IAAI,EAAEC,KAAK,kBAC5BpC,OAAA,CAAAE,SAAA;QAAA0D,QAAA,gBACE5D,OAAA;UAAA4D,QAAA,gBACE5D,OAAA;YAEE6D,SAAS,EAAC,iBAAiB;YAAAD,QAAA,GAC5B,UACS,EAACxB,KAAK,GAAG,CAAC;UAAA,GAHZ,cAAaA,KAAM,EAAC;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIxB,CAAC,eACLjE,OAAA,CAACF,MAAM;YACLoE,OAAO,EAAC,WAAW;YACnBC,OAAO,EAAEA,CAAA,KAAMV,eAAe,CAACrB,KAAK,CAAE;YAAAwB,QAAA,EACvC;UAED;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAAC,GAAG,eACbjE,OAAA,CAACF,MAAM;YACLoE,OAAO,EAAC,WAAW;YACnBC,OAAO,EAAEA,CAAA,KAAMV,eAAe,CAACrB,KAAK,CAAE;YAAAwB,QAAA,EACvC;UAED;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAAC,GAAG,eACbjE,OAAA,CAACF,MAAM;YACLoE,OAAO,EAAC,WAAW;YACnBC,OAAO,EAAEA,CAAA,KAAMhB,cAAc,CAACf,KAAK,CAAE;YAAAwB,QAAA,EACtC;UAED;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTjE,OAAA,CAACF,MAAM;YACLoE,OAAO,EAAC,WAAW;YACnBC,OAAO,EAAEA,CAAA,KAAMT,eAAe,CAACtB,KAAK,CAAE;YAAAwB,QAAA,EACvC;UAED;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENjE,OAAA,CAACR,KAAK;UAEJ4E,OAAO;UACPC,QAAQ;UACRC,KAAK;UACLT,SAAS,EAAC,kBAAkB;UAC5BU,UAAU;UAAAX,QAAA,eAEV5D,OAAA;YAAA4D,QAAA,EACGD,WAAW,CAACd,GAAG,CAAC,CAACK,MAAM,EAAEsB,WAAW,kBACnCxE,OAAA;cAAA4D,QAAA,gBACE5D,OAAA;gBAAA4D,QAAA,EAAKV;cAAM;gBAAAY,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,EAChB9B,IAAI,CAACU,GAAG,CAAC,CAAC9B,GAAG,EAAEF,QAAQ,KAAK;gBAC3B,IAAI4D,WAAW;gBACf,QAAQvB,MAAM;kBACZ,KAAK,MAAM;oBACT,MAAMwB,IAAI,GAAG9E,QAAQ,CAACmB,GAAG,CAAC2D,IAAI,CAAC,CAAC,CAAC;oBACjCD,WAAW,GAAG9E,MAAM,CAAC+E,IAAI,EAAE,mBAAmB,EAAE;sBAC9CC,MAAM,EAAE9E;oBACV,CAAC,CAAC;oBACF;kBACF,KAAK,MAAM;oBACT,oBACEG,OAAA;sBAAA4D,QAAA,eACE5D,OAAA,CAACF,MAAM;wBACLqE,OAAO,EAAEA,CAAA,KAAMxD,cAAc,CAACyB,KAAK,EAAEvB,QAAQ,CAAE;wBAC/C+D,KAAK,EAAE;0BACLC,eAAe,EAAE9D,GAAG,CAACC,MAAM,GAAG,OAAO,GAAG,KAAK;0BAC7C8D,KAAK,EAAE;wBACT,CAAE;wBAAAlB,QAAA,EAED7C,GAAG,CAACC,MAAM,GAAG,QAAQ,GAAG;sBAAO;wBAAA8C,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAC1B;oBAAC,GATD,GAAEO,WAAY,IAAG3D,QAAS,EAAC;sBAAAiD,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAUjC,CAAC;kBAET,KAAK,iBAAiB;kBACtB,KAAK,iBAAiB;kBACtB,KAAK,sBAAsB;kBAC3B,KAAK,sBAAsB;oBACzBQ,WAAW,gBACTzE,OAAA;sBAIEyC,IAAI,EAAC,MAAM;sBACXG,KAAK,EACH7B,GAAG,CAACmC,MAAM,CAACH,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAC5C,EACD;sBACD+B,QAAQ,EAAGC,CAAC,IACVzC,iBAAiB,CAACyC,CAAC,EAAE5C,KAAK,EAAEvB,QAAQ,EAAEqC,MAAM,CAC7C;sBACD+B,MAAM,EAAGD,CAAC,IACR/B,eAAe,CAAC+B,CAAC,EAAE5C,KAAK,EAAEvB,QAAQ,EAAEqC,MAAM,CAC3C;sBACDgC,QAAQ,EAAE,CAACnE,GAAG,CAACC,MAAO;sBACtB4D,KAAK,EAAE;wBACLC,eAAe,EAAE9D,GAAG,CAACC,MAAM,GACvB,aAAa,GACb;sBACN;oBAAE,GAnBI,SAAQH,QAAS,IACrBE,GAAG,CAACC,MAAM,GAAG,MAAM,GAAG,QACvB,EAAC;sBAAA8C,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAkBH,CACF;oBACD;kBACF,KAAK,SAAS;oBACZQ,WAAW,gBACTzE,OAAA;sBAAA4D,QAAA,eACE5D,OAAA,CAACF,MAAM;wBACLoE,OAAO,EAAC,WAAW;wBACnBC,OAAO,EAAEA,CAAA,KAAMb,qBAAqB,CAACvC,GAAG,CAACoE,EAAE,CAAE;wBAAAvB,QAAA,EAC9C;sBAED;wBAAAE,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAQ;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACN,CACN;oBACD;kBAEF;oBACEQ,WAAW,GAAG,KAAK;gBACvB;gBACA,oBACEzE,OAAA;kBAAA4D,QAAA,EACGa;gBAAW,GADJ,GAAED,WAAY,IAAG3D,QAAS,EAAC;kBAAAiD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEjC,CAAC;cAET,CAAC,CAAC;YAAA,GA3EKO,WAAW;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA4EhB,CACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG;QAAC,GAvFH7B,KAAK;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAwFL,CAAC;MAAA,eACR,CACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC,gBACZ,CAAC;AAEP,CAAC;AAACzD,EAAA,CAhSWD,kBAAkB;AAAA6E,EAAA,GAAlB7E,kBAAkB;AAkS/B,eAAeA,kBAAkB;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}