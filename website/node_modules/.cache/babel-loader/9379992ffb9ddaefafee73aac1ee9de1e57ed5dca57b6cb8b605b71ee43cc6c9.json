{"ast":null,"code":"const serverUrl = \"http://localhost:5001/\";\n\n//#region //* vehicle types\nconst fetchBrands = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/brands\");\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching Brands:\", error);\n    throw error;\n  }\n};\n//#endregion\n\n//#region //* vehicle models\nconst fetchVehicleModels = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/vehicleModels\");\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching VehicleModels:\", error);\n    throw error;\n  }\n};\n\n//#endregion\n\n//#region //* vehicle types\nconst fetchVehicleTypes = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/vehicleTypes\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching vehicleTypes:\", error);\n    throw error;\n  }\n};\nconst fetchVehicleModelData = async model_id => {\n  try {\n    // Assurez-vous d'avoir l'URL correcte et la méthode pour récupérer les données\n    const response = await fetch(serverUrl + \"api/vehicleModels/\" + {\n      model_id\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching Model Data:\", error);\n    throw error;\n  }\n};\n\n//#endregion*\n\n//#region //* customer request\nconst fetchCustomerRequest = async () => {\n  try {\n    const response = await fetch(serverUrl + \"api/requests\");\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching customerRequest:\", error);\n    throw error;\n  }\n};\nconst modifyCustomerRequest = async (requestId, updatedData) => {\n  try {\n    const response = await fetch(`${serverUrl}api/requests/${requestId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la modification de la demande\");\n    return response.json();\n  } catch (error) {\n    console.error(\"Error modifying customerRequest:\", error);\n    throw error;\n  }\n};\n//#endregion\n\n//#region //* Supprimer une demande client\nconst deleteCustomerRequest = async requestId => {\n  try {\n    const response = await fetch(`${serverUrl}api/requests/${requestId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression de la demande\");\n    // Pas besoin de lire le JSON car le statut 204 ne renvoie pas de corps de réponse\n    return response; // Vous pouvez simplement retourner la réponse\n  } catch (error) {\n    console.error(\"Error deleting customerRequest:\", error);\n    throw error;\n  }\n};\nconst deletePhotos = async vehicleId => {\n  try {\n    const response = await fetch(`${serverUrl}api/photos/${vehicleId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression des photos\");\n    return response; // Vous pouvez simplement retourner la réponse\n  } catch (error) {\n    console.error(\"Error deleting photos:\", error);\n    throw error;\n  }\n};\n\n//#endregion\n\n//#region //* Fetch vehicle conditions\n\n//#endregion\n\n//#region //* Fetch vehicles\nconst fetchVehicles = async () => {\n  try {\n    const response = await fetch('/api/vehicles/all');\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching vehicle:', error);\n  }\n};\n//#endregion\n\nconst deleteVehicle = async vehicleId => {\n  try {\n    const response = await fetch(`${serverUrl}api/vehicles/${vehicleId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression du véhicule\");\n    return response;\n  } catch (error) {\n    console.error(\"Error deleting vehicle:\", error);\n    throw error;\n  }\n};\n\n//#region //* fetch Admins\nconst fetchAdmins = async () => {\n  try {\n    const response = await fetch('/api/admins');\n    if (!response.ok) throw new Error(\"Erreur réseau\");\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching admins:', error);\n  }\n};\n//#endregion\n\n//#region //* Add new vehicle\nconst addNewVehicle = async vehicleData => {\n  console.log(vehicleData);\n  try {\n    // Création de l'objet de données à envoyer\n    const dataToSend = {\n      vehicle_model_id: vehicleData.Vehicle.VehicleModel.id,\n      color_id: vehicleData.Vehicle.Color.id,\n      vehicle_type_id: 1,\n      //vehicleData.Vehicle.type_id, // Assurez-vous que cette propriété est correcte\n      paint_type: vehicleData.Vehicle.paint_type,\n      // Vous devez avoir cette donnée dans vehicleData\n      production_year: vehicleData.Vehicle.production_year,\n      mileage: vehicleData.Vehicle.mileage,\n      vehicle_condition_id: vehicleData.Vehicle.vehicle_condition_id,\n      // Assurez-vous que cette propriété est correcte\n      price: vehicleData.Vehicle.price,\n      vehicle_comment: vehicleData.Vehicle.vehicle_comment,\n      fuel_type_id: vehicleData.Vehicle.fuel_type_id,\n      transmission_id: vehicleData.Vehicle.transmission_id,\n      tax_horsepower: vehicleData.Vehicle.tax_horsepower,\n      at_garage_id: 1 // Assurez-vous que cette propriété est correcte\n      // Ajoutez d'autres champs si nécessaire\n    };\n\n    console.log(dataToSend);\n\n    // Effectuer la requête POST\n    const response = await fetch(serverUrl + \"api/vehicles/add\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(dataToSend)\n    });\n    if (!response.ok) {\n      throw new Error(\"Erreur réseau lors de l'ajout d'un nouveau véhicule\");\n    }\n\n    // Lire la réponse JSON une seule fois\n    const responseData = await response.json();\n    console.log(\"réponse de la requête : \", responseData);\n    return responseData;\n  } catch (error) {\n    console.error(\"Error adding new vehicle:\", error);\n    throw error;\n  }\n};\n\n// #endregion\n\n// Exporting functions\nexport { addNewVehicle, fetchBrands, fetchVehicleModels, fetchVehicleModelData, fetchVehicleTypes, fetchVehicles, deletePhotos, fetchAdmins, fetchCustomerRequest, modifyCustomerRequest, deleteCustomerRequest, deleteVehicle };","map":{"version":3,"names":["serverUrl","fetchBrands","response","fetch","ok","Error","json","error","console","fetchVehicleModels","fetchVehicleTypes","fetchVehicleModelData","model_id","fetchCustomerRequest","modifyCustomerRequest","requestId","updatedData","method","headers","body","JSON","stringify","deleteCustomerRequest","deletePhotos","vehicleId","fetchVehicles","deleteVehicle","fetchAdmins","addNewVehicle","vehicleData","log","dataToSend","vehicle_model_id","Vehicle","VehicleModel","id","color_id","Color","vehicle_type_id","paint_type","production_year","mileage","vehicle_condition_id","price","vehicle_comment","fuel_type_id","transmission_id","tax_horsepower","at_garage_id","responseData"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/serverRelated/ApiRequest.js"],"sourcesContent":["const serverUrl = \"http://localhost:5001/\";\r\n\r\n//#region //* vehicle types\r\n const fetchBrands = async () => {\r\n  try {\r\n    const response = await fetch(serverUrl + \"api/brands\");\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching Brands:\", error);\r\n    throw error;\r\n  }\r\n};\r\n//#endregion\r\n\r\n//#region //* vehicle models\r\n const fetchVehicleModels = async () => {\r\n  try {\r\n    const response = await fetch(serverUrl + \"api/vehicleModels\");\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching VehicleModels:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//#endregion\r\n\r\n//#region //* vehicle types\r\n const fetchVehicleTypes = async () => {\r\n  try {\r\n    const response = await fetch(serverUrl + \"api/vehicleTypes\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching vehicleTypes:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst fetchVehicleModelData = async (model_id) => {\r\n  try {\r\n    // Assurez-vous d'avoir l'URL correcte et la méthode pour récupérer les données\r\n    const response = await fetch(serverUrl + \"api/vehicleModels/\" + {model_id});\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n   \r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching Model Data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//#endregion*\r\n\r\n//#region //* customer request\r\n  const fetchCustomerRequest = async () => {\r\n    try {\r\n      const response = await fetch(serverUrl + \"api/requests\");\r\n      if (!response.ok) throw new Error(\"Erreur réseau\");\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error(\"Error fetching customerRequest:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  const modifyCustomerRequest = async (requestId, updatedData) => {\r\n    try {\r\n      const response = await fetch(`${serverUrl}api/requests/${requestId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n      if (!response.ok) throw new Error(\"Erreur réseau lors de la modification de la demande\");\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error(\"Error modifying customerRequest:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n  //#endregion\r\n  \r\n  //#region //* Supprimer une demande client\r\n  const deleteCustomerRequest = async (requestId) => {\r\n    try {\r\n      const response = await fetch(`${serverUrl}api/requests/${requestId}`, {\r\n        method: 'DELETE'\r\n      });\r\n      if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression de la demande\");\r\n      // Pas besoin de lire le JSON car le statut 204 ne renvoie pas de corps de réponse\r\n      return response; // Vous pouvez simplement retourner la réponse\r\n    } catch (error) {\r\n      console.error(\"Error deleting customerRequest:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const deletePhotos = async (vehicleId) => {\r\n    try {\r\n      const response = await fetch(`${serverUrl}api/photos/${vehicleId}`, {\r\n        method: 'DELETE'\r\n      });\r\n      if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression des photos\");\r\n      return response; // Vous pouvez simplement retourner la réponse\r\n    } catch (error) {\r\n      console.error(\"Error deleting photos:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n//#endregion\r\n\r\n\r\n//#region //* Fetch vehicle conditions\r\n\r\n//#endregion\r\n\r\n//#region //* Fetch vehicles\r\nconst fetchVehicles = async () => {\r\n    try {\r\n      const response = await fetch('/api/vehicles/all');\r\n      if (!response.ok) throw new Error(\"Erreur réseau\");\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching vehicle:', error);\r\n    }\r\n  };\r\n//#endregion\r\n\r\nconst deleteVehicle = async (vehicleId) => {\r\n  try {\r\n    const response = await fetch(`${serverUrl}api/vehicles/${vehicleId}`, {\r\n      method: 'DELETE'\r\n    });\r\n    if (!response.ok) throw new Error(\"Erreur réseau lors de la suppression du véhicule\");\r\n    return response; \r\n  } catch (error) {\r\n    console.error(\"Error deleting vehicle:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n//#region //* fetch Admins\r\nconst fetchAdmins = async () => {\r\n  try {\r\n    const response = await fetch('/api/admins');\r\n    if (!response.ok) throw new Error(\"Erreur réseau\");\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching admins:', error);\r\n  }\r\n};\r\n//#endregion\r\n\r\n//#region //* Add new vehicle\r\nconst addNewVehicle = async (vehicleData) => {\r\n  console.log(vehicleData);\r\n  try {\r\n    // Création de l'objet de données à envoyer\r\n    const dataToSend = {\r\n      vehicle_model_id: vehicleData.Vehicle.VehicleModel.id,\r\n      color_id: vehicleData.Vehicle.Color.id,\r\n      vehicle_type_id: 1, //vehicleData.Vehicle.type_id, // Assurez-vous que cette propriété est correcte\r\n      paint_type: vehicleData.Vehicle.paint_type, // Vous devez avoir cette donnée dans vehicleData\r\n      production_year: vehicleData.Vehicle.production_year,\r\n      mileage: vehicleData.Vehicle.mileage,\r\n      vehicle_condition_id: vehicleData.Vehicle.vehicle_condition_id, // Assurez-vous que cette propriété est correcte\r\n      price: vehicleData.Vehicle.price,\r\n      vehicle_comment: vehicleData.Vehicle.vehicle_comment,\r\n      fuel_type_id: vehicleData.Vehicle.fuel_type_id,\r\n      transmission_id: vehicleData.Vehicle.transmission_id,\r\n      tax_horsepower: vehicleData.Vehicle.tax_horsepower,\r\n      at_garage_id: 1, // Assurez-vous que cette propriété est correcte\r\n      // Ajoutez d'autres champs si nécessaire\r\n    };\r\n    console.log(dataToSend);\r\n\r\n    // Effectuer la requête POST\r\n    const response = await fetch(serverUrl + \"api/vehicles/add\", {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(dataToSend),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur réseau lors de l'ajout d'un nouveau véhicule\");\r\n    }\r\n\r\n    // Lire la réponse JSON une seule fois\r\n    const responseData = await response.json();\r\n    console.log(\"réponse de la requête : \", responseData);\r\n    return responseData;\r\n  } catch (error) {\r\n    console.error(\"Error adding new vehicle:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// #endregion\r\n\r\n// Exporting functions\r\nexport { addNewVehicle, fetchBrands, fetchVehicleModels, fetchVehicleModelData, fetchVehicleTypes,\r\n   fetchVehicles, deletePhotos, fetchAdmins, fetchCustomerRequest, modifyCustomerRequest, deleteCustomerRequest, deleteVehicle };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}