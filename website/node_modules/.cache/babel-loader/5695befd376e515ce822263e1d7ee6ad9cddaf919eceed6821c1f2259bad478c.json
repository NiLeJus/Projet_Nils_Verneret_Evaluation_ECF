{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagementLogic.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { scheduleGetAllDays, scheduleGetDefaultWeek, scheduleUpdateDay } from '../../../serverRelated/ApiRequest';\nimport { format, parseISO } from 'date-fns';\nimport { fr, getWeek } from 'date-fns';\nimport ScheduleManagement from './ScheduleManagement'; // Assurez-vous d'ajuster le chemin selon votre structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagementLogic = () => {\n  _s();\n  const [copiedDayData, setCopiedDayData] = useState(null);\n  const [preparedData, setPreparedData] = useState([]);\n  const [copiedWeekData, setCopiedWeekData] = useState(null);\n\n  // Toute la logique de gestion des états, y compris toggleDayState, copyDayContent, etc.\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        console.log(\"daysResponse\", daysResponse);\n        const preparedData = prepareDataForDisplay(daysResponse);\n        setPreparedData(preparedData);\n        console.log(\"peparedData\", preparedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const prepareDataForDisplay = data => {\n    const groupedData = [];\n    let currentGroup = [];\n    const currentWeekNumber = getWeek(new Date());\n    Object.keys(data).sort().forEach(weekNumber => {\n      if (parseInt(weekNumber) >= currentWeekNumber) {\n        const week = data[weekNumber];\n        const firstDayOfWeek = week[0] ? parseISO(week[0].date) : null;\n        const weekNum = firstDayOfWeek ? getWeek(firstDayOfWeek) : null;\n        week.forEach((day, index) => {\n          if (index < 7) {\n            currentGroup.push(day);\n          }\n        });\n        if (currentGroup.length > 0 && weekNum !== null) {\n          groupedData.push({\n            weekNum,\n            days: currentGroup\n          });\n          currentGroup = [];\n        }\n      }\n    });\n    return groupedData;\n  };\n  const toggleDayState = (weekIndex, dayIndex) => {\n    const newData = [...preparedData];\n    // Trouver le bon jour dans la propriété `days`\n    const day = newData[weekIndex].days[dayIndex];\n\n    // Modifier l'état isOpen\n    day.isOpen = !day.isOpen;\n\n    // Appliquer d'autres logiques si nécessaire...\n\n    setPreparedData(newData);\n  };\n  const copyDayContent = dayId => {\n    // Directement trouver le jour spécifique par son ID dans le tableau de jours\n    const dayToCopy = preparedData.find(day => day.id === dayId);\n    if (dayToCopy) {\n      // Exclure la propriété 'date' lors de la copie\n      const {\n        day_of_week,\n        ...rest\n      } = dayToCopy;\n      setCopiedDayData({\n        ...rest\n      });\n      console.log(`Contenu du jour :` + dayToCopy);\n      console.log(`Contenu du jour ${dayId} copié, à l'exception du jour.`);\n    } else {\n      console.log(\"Jour non trouvé.\");\n    }\n  };\n  const pasteStoredDayContent = dayId => {\n    if (!copiedDayData) {\n      console.log(\"Aucun contenu à coller.\");\n      return;\n    }\n    const newData = preparedData.map(day => day.id === dayId ? {\n      ...day,\n      ...copiedDayData,\n      id: day.id\n    } : day);\n    setPreparedData(newData);\n    console.log(`Contenu collé dans le jour ${dayId}.`);\n  };\n  const handleInputChange = (event, weekIndex, dayIndex, header) => {\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\n\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n    const day = newData[weekIndex].days[dayIndex]; // Accéder à l'objet jour spécifique\n\n    // Mettre à jour la valeur spécifique\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertir l'en-tête en clé correspondante\n    day[key] = newValue || \"\"; // Utiliser une chaîne vide si la nouvelle valeur est falsy\n\n    // Mettre à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n  };\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\n    const newValue = event.target.value;\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertit l'en-tête en clé correspondante\n\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n    const day = newData[weekIndex].days[dayIndex]; // Accéder à l'objet jour spécifique\n\n    // Met à jour la valeur spécifique\n    day[key] = newValue || \"\"; // Utilisez une chaîne vide si la nouvelle valeur est falsy\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n  };\n  const openDaysInWeek = weekIndex => {\n    const newData = [...preparedData];\n\n    // Accéder à la propriété `days` pour la semaine concernée\n    newData[weekIndex].days = newData[weekIndex].days.map(day => ({\n      ...day,\n      isOpen: true,\n      // Ferme le jour\n      morningOpening: \"\",\n      // Réinitialise les horaires d'ouverture et de fermeture\n      morningClosing: \"\",\n      afternoonOpening: \"\",\n      afternoonClosing: \"\"\n    }));\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  const pasteDefaultWeekContent = async weekIndex => {\n    try {\n      const defaultWeekData = await scheduleGetDefaultWeek();\n      if (defaultWeekData && defaultWeekData.length > 0 && preparedData[weekIndex]) {\n        const newData = [...preparedData];\n        const targetWeek = newData[weekIndex];\n        const updatedDays = targetWeek.days.map((day, dayIndex) => {\n          const defaultDay = defaultWeekData.find(day => day.day_of_week === dayIndex + 1);\n          if (defaultDay) {\n            return {\n              ...day,\n              isOpen: defaultDay.isOpen,\n              morningOpening: defaultDay.morningOpening ? defaultDay.morningOpening.substring(0, 5) : day.morningOpening,\n              morningClosing: defaultDay.morningClosing ? defaultDay.morningClosing.substring(0, 5) : day.morningClosing,\n              afternoonOpening: defaultDay.afternoonOpening ? defaultDay.afternoonOpening.substring(0, 5) : day.afternoonOpening,\n              afternoonClosing: defaultDay.afternoonClosing ? defaultDay.afternoonClosing.substring(0, 5) : day.afternoonClosing\n            };\n          } else {\n            return day;\n          }\n        });\n        newData[weekIndex] = {\n          ...targetWeek,\n          days: updatedDays\n        };\n        setPreparedData(newData);\n        console.log(\"NewData\", newData);\n      } else {\n        console.error(\"Aucune donnée de semaine par défaut ou données de semaine préparées invalides.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération de la semaine par défaut:\", error);\n    }\n  };\n  const copyWeekContent = weekIndex => {\n    const weekToCopy = preparedData[weekIndex];\n    if (weekToCopy) {\n      // Exclure la propriété 'date' de chaque jour lors de la copie\n      const daysWithoutDate = weekToCopy.days.map(day => {\n        const {\n          date,\n          ...dayWithoutDate\n        } = day;\n        return dayWithoutDate;\n      });\n\n      // Stocker les données copiées sans les dates\n      setCopiedWeekData({\n        ...weekToCopy,\n        days: daysWithoutDate\n      });\n      console.log(`Contenu de la semaine ${weekToCopy.weekNum} copié, à l'exception des dates.`);\n      console.log(\"CopiedWeekData\", copiedWeekData);\n    }\n  };\n  const pasteStoredWeekContent = weekIndex => {\n    if (!copiedWeekData) {\n      console.log(\"Aucun contenu de semaine à coller.\");\n      return;\n    }\n    const newData = [...preparedData];\n    const targetWeek = newData[weekIndex];\n\n    // Fusionner les données copiées avec les jours cibles tout en conservant les dates originales\n    const mergedDays = targetWeek.days.map((day, index) => {\n      if (copiedWeekData.days[index]) {\n        return {\n          ...day,\n          ...copiedWeekData.days[index],\n          date: day.date\n        };\n      }\n      return day;\n    });\n    newData[weekIndex] = {\n      ...targetWeek,\n      days: mergedDays\n    };\n    setPreparedData(newData);\n    console.log(`Contenu de la semaine collé dans la semaine ${newData[weekIndex].weekNum}, en conservant les dates originales.`);\n  };\n  const closeDaysInWeek = weekIndex => {\n    const newData = [...preparedData];\n\n    // Accéder à la propriété `days` pour la semaine concernée\n    newData[weekIndex].days = newData[weekIndex].days.map(day => ({\n      ...day,\n      isOpen: false,\n      // Ferme le jour\n      morningOpening: \"\",\n      // Réinitialise les horaires d'ouverture et de fermeture\n      morningClosing: \"\",\n      afternoonOpening: \"\",\n      afternoonClosing: \"\"\n    }));\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  // Fonctions comme toggleDayState, copyDayContent, pasteStoredDayContent, etc.\n\n  return /*#__PURE__*/_jsxDEV(ScheduleManagement, {\n    preparedData: preparedData,\n    toggleDayState: toggleDayState,\n    copyDayContent: copyDayContent,\n    pasteStoredDayContent: pasteStoredDayContent,\n    handleInputChange: handleInputChange,\n    handleInputBlur: handleInputBlur,\n    copyWeekContent: copyWeekContent,\n    pasteStoredWeekContent: pasteStoredWeekContent,\n    openDaysInWeek: openDaysInWeek,\n    closeDaysInWeek: closeDaysInWeek,\n    pasteDefaultWeekContent: pasteDefaultWeekContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s(ScheduleManagementLogic, \"dt/pkK2fk2l91oClWq20YfY86HQ=\");\n_c = ScheduleManagementLogic;\nexport default ScheduleManagementLogic;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagementLogic\");","map":{"version":3,"names":["React","useState","useEffect","scheduleGetAllDays","scheduleGetDefaultWeek","scheduleUpdateDay","format","parseISO","fr","getWeek","ScheduleManagement","jsxDEV","_jsxDEV","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagementLogic","_s","copiedDayData","setCopiedDayData","preparedData","setPreparedData","copiedWeekData","setCopiedWeekData","fetchData","year","daysResponse","console","log","prepareDataForDisplay","error","data","groupedData","currentGroup","currentWeekNumber","Object","keys","sort","forEach","weekNumber","parseInt","week","firstDayOfWeek","date","weekNum","day","index","push","length","days","toggleDayState","weekIndex","dayIndex","newData","isOpen","copyDayContent","dayId","dayToCopy","find","id","day_of_week","rest","pasteStoredDayContent","map","handleInputChange","event","header","newValue","target","value","key","toLowerCase","replace","handleInputBlur","openDaysInWeek","morningOpening","morningClosing","afternoonOpening","afternoonClosing","pasteDefaultWeekContent","defaultWeekData","targetWeek","updatedDays","defaultDay","substring","copyWeekContent","weekToCopy","daysWithoutDate","dayWithoutDate","pasteStoredWeekContent","mergedDays","closeDaysInWeek","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagementLogic.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { scheduleGetAllDays, scheduleGetDefaultWeek, scheduleUpdateDay } from '../../../serverRelated/ApiRequest';\r\nimport { format, parseISO } from 'date-fns';\r\nimport { fr, getWeek } from 'date-fns';\r\nimport ScheduleManagement from './ScheduleManagement'; // Assurez-vous d'ajuster le chemin selon votre structure\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagementLogic = () => {\r\n  const [copiedDayData, setCopiedDayData] = useState(null);\r\n  const [preparedData, setPreparedData] = useState([]);\r\n  const [copiedWeekData, setCopiedWeekData] = useState(null);\r\n\r\n  // Toute la logique de gestion des états, y compris toggleDayState, copyDayContent, etc.\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        console.log(\"daysResponse\", daysResponse);\r\n\r\n        const preparedData = prepareDataForDisplay(daysResponse);\r\n        setPreparedData(preparedData);\r\n        console.log(\"peparedData\", preparedData)\r\n\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n\r\n    fetchData();\r\n \r\n  }, []);\r\n\r\n  const prepareDataForDisplay = (data) => {\r\n    const groupedData = [];\r\n    let currentGroup = [];\r\n    const currentWeekNumber = getWeek(new Date());\r\n\r\n    Object.keys(data)\r\n      .sort()\r\n      .forEach((weekNumber) => {\r\n        if (parseInt(weekNumber) >= currentWeekNumber) {\r\n          const week = data[weekNumber];\r\n          const firstDayOfWeek = week[0] ? parseISO(week[0].date) : null;\r\n          const weekNum = firstDayOfWeek ? getWeek(firstDayOfWeek) : null;\r\n\r\n          week.forEach((day, index) => {\r\n            if (index < 7) {\r\n              currentGroup.push(day);\r\n            }\r\n          });\r\n\r\n          if (currentGroup.length > 0 && weekNum !== null) {\r\n            groupedData.push({ weekNum, days: currentGroup });\r\n            currentGroup = [];\r\n          }\r\n        }\r\n      });\r\n\r\n    return groupedData;\r\n  };\r\n\r\n\r\n  const toggleDayState = (weekIndex, dayIndex) => {\r\n    const newData = [...preparedData];\r\n    // Trouver le bon jour dans la propriété `days`\r\n    const day = newData[weekIndex].days[dayIndex];\r\n\r\n    // Modifier l'état isOpen\r\n    day.isOpen = !day.isOpen;\r\n\r\n    // Appliquer d'autres logiques si nécessaire...\r\n\r\n    setPreparedData(newData);\r\n  };\r\n\r\n  const copyDayContent = (dayId) => {\r\n    // Directement trouver le jour spécifique par son ID dans le tableau de jours\r\n    const dayToCopy = preparedData.find((day) => day.id === dayId);\r\n\r\n    if (dayToCopy) {\r\n      // Exclure la propriété 'date' lors de la copie\r\n      const { day_of_week, ...rest } = dayToCopy;\r\n      setCopiedDayData({ ...rest });\r\n      console.log(`Contenu du jour :` + dayToCopy);\r\n      console.log(`Contenu du jour ${dayId} copié, à l'exception du jour.`);\r\n    } else {\r\n      console.log(\"Jour non trouvé.\");\r\n    }\r\n  };\r\n\r\n  const pasteStoredDayContent = (dayId) => {\r\n    if (!copiedDayData) {\r\n      console.log(\"Aucun contenu à coller.\");\r\n      return;\r\n    }\r\n\r\n    const newData = preparedData.map((day) =>\r\n      day.id === dayId ? { ...day, ...copiedDayData, id: day.id } : day\r\n    );\r\n\r\n    setPreparedData(newData);\r\n    console.log(`Contenu collé dans le jour ${dayId}.`);\r\n  };\r\n\r\n  const handleInputChange = (event, weekIndex, dayIndex, header) => {\r\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\r\n  \r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex].days[dayIndex]; // Accéder à l'objet jour spécifique\r\n  \r\n    // Mettre à jour la valeur spécifique\r\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertir l'en-tête en clé correspondante\r\n    day[key] = newValue || \"\"; // Utiliser une chaîne vide si la nouvelle valeur est falsy\r\n  \r\n    // Mettre à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n  };\r\n  \r\n\r\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\r\n    const newValue = event.target.value;\r\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertit l'en-tête en clé correspondante\r\n  \r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex].days[dayIndex]; // Accéder à l'objet jour spécifique\r\n  \r\n    // Met à jour la valeur spécifique\r\n    day[key] = newValue || \"\"; // Utilisez une chaîne vide si la nouvelle valeur est falsy\r\n  \r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n  };\r\n\r\n  const openDaysInWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n\r\n    // Accéder à la propriété `days` pour la semaine concernée\r\n    newData[weekIndex].days = newData[weekIndex].days.map((day) => ({\r\n      ...day,\r\n      isOpen: true, // Ferme le jour\r\n      morningOpening: \"\", // Réinitialise les horaires d'ouverture et de fermeture\r\n      morningClosing: \"\",\r\n      afternoonOpening: \"\",\r\n      afternoonClosing: \"\",\r\n    }));\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  const pasteDefaultWeekContent = async (weekIndex) => {\r\n    try {\r\n      const defaultWeekData = await scheduleGetDefaultWeek();\r\n      if (defaultWeekData && defaultWeekData.length > 0 && preparedData[weekIndex]) {\r\n        const newData = [...preparedData];\r\n        const targetWeek = newData[weekIndex];\r\n\r\n        const updatedDays = targetWeek.days.map((day, dayIndex) => {\r\n          const defaultDay = defaultWeekData.find(day => day.day_of_week === dayIndex + 1);\r\n          if (defaultDay) {\r\n            return {\r\n              ...day,\r\n              isOpen: defaultDay.isOpen,\r\n              morningOpening: defaultDay.morningOpening ? defaultDay.morningOpening.substring(0, 5) : day.morningOpening,\r\n              morningClosing: defaultDay.morningClosing ? defaultDay.morningClosing.substring(0, 5) : day.morningClosing,\r\n              afternoonOpening: defaultDay.afternoonOpening ? defaultDay.afternoonOpening.substring(0, 5) : day.afternoonOpening,\r\n              afternoonClosing: defaultDay.afternoonClosing ? defaultDay.afternoonClosing.substring(0, 5) : day.afternoonClosing,\r\n            };\r\n          } else {\r\n            return day;\r\n          }\r\n        });\r\n\r\n        newData[weekIndex] = { ...targetWeek, days: updatedDays };\r\n        setPreparedData(newData);\r\n        console.log(\"NewData\", newData);\r\n\r\n      } else {\r\n        console.error(\"Aucune donnée de semaine par défaut ou données de semaine préparées invalides.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération de la semaine par défaut:\", error);\r\n    }\r\n  };\r\n\r\n  const copyWeekContent = (weekIndex) => {\r\n    const weekToCopy = preparedData[weekIndex];\r\n    if (weekToCopy) {\r\n      // Exclure la propriété 'date' de chaque jour lors de la copie\r\n      const daysWithoutDate = weekToCopy.days.map((day) => {\r\n        const { date, ...dayWithoutDate } = day;\r\n        return dayWithoutDate;\r\n      });\r\n\r\n      // Stocker les données copiées sans les dates\r\n      setCopiedWeekData({ ...weekToCopy, days: daysWithoutDate });\r\n      console.log(\r\n        `Contenu de la semaine ${weekToCopy.weekNum} copié, à l'exception des dates.`\r\n      );\r\n      console.log(\"CopiedWeekData\", copiedWeekData);\r\n    }\r\n  };\r\n\r\n  const pasteStoredWeekContent = (weekIndex) => {\r\n    if (!copiedWeekData) {\r\n      console.log(\"Aucun contenu de semaine à coller.\");\r\n      return;\r\n    }\r\n\r\n    const newData = [...preparedData];\r\n    const targetWeek = newData[weekIndex];\r\n\r\n    // Fusionner les données copiées avec les jours cibles tout en conservant les dates originales\r\n    const mergedDays = targetWeek.days.map((day, index) => {\r\n      if (copiedWeekData.days[index]) {\r\n        return { ...day, ...copiedWeekData.days[index], date: day.date };\r\n      }\r\n      return day;\r\n    });\r\n\r\n    newData[weekIndex] = { ...targetWeek, days: mergedDays };\r\n    setPreparedData(newData);\r\n    console.log(\r\n      `Contenu de la semaine collé dans la semaine ${newData[weekIndex].weekNum}, en conservant les dates originales.`\r\n    );\r\n  };\r\n\r\n  const closeDaysInWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n\r\n    // Accéder à la propriété `days` pour la semaine concernée\r\n    newData[weekIndex].days = newData[weekIndex].days.map((day) => ({\r\n      ...day,\r\n      isOpen: false, // Ferme le jour\r\n      morningOpening: \"\", // Réinitialise les horaires d'ouverture et de fermeture\r\n      morningClosing: \"\",\r\n      afternoonOpening: \"\",\r\n      afternoonClosing: \"\",\r\n    }));\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  // Fonctions comme toggleDayState, copyDayContent, pasteStoredDayContent, etc.\r\n\r\n  return (\r\n    <ScheduleManagement\r\n      preparedData={preparedData}\r\n      toggleDayState={toggleDayState}\r\n      copyDayContent={copyDayContent}\r\n      pasteStoredDayContent={pasteStoredDayContent}\r\n      handleInputChange={handleInputChange}\r\n      handleInputBlur={handleInputBlur}\r\n      copyWeekContent={copyWeekContent}\r\n      pasteStoredWeekContent={pasteStoredWeekContent}\r\n      openDaysInWeek={openDaysInWeek}\r\n      closeDaysInWeek={closeDaysInWeek}\r\n      pasteDefaultWeekContent={pasteDefaultWeekContent}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ScheduleManagementLogic;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}