{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagementLogic.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { scheduleGetAllDays, scheduleGetDefaultWeek, scheduleUpdateDay } from \"../../../serverRelated/ApiRequest\";\nimport { format, parseISO } from \"date-fns\";\nimport { fr, getWeek } from \"date-fns\";\nimport ScheduleManagement from \"./ScheduleManagement\"; // Assurez-vous d'ajuster le chemin selon votre structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagementLogic = () => {\n  _s();\n  const [copiedDayData, setCopiedDayData] = useState(null);\n  const [preparedData, setPreparedData] = useState([]);\n  const [copiedWeekData, setCopiedWeekData] = useState(null);\n\n  // Toute la logique de gestion des états, y compris toggleDayState, copyDayContent, etc.\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        console.log(\"daysResponse\", daysResponse);\n        const preparedData = prepareDataForDisplay(daysResponse);\n        setPreparedData(preparedData);\n        console.log(\"peparedData\", preparedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const prepareDataForDisplay = data => {\n    const groupedData = [];\n    let currentGroup = [];\n    const currentWeekNumber = getWeek(new Date());\n    Object.keys(data).sort().forEach(weekNumber => {\n      if (parseInt(weekNumber) >= currentWeekNumber) {\n        const week = data[weekNumber];\n        const firstDayOfWeek = week[0] ? parseISO(week[0].date) : null;\n        const weekNum = firstDayOfWeek ? getWeek(firstDayOfWeek) : null;\n        week.forEach((day, index) => {\n          if (index < 7) {\n            currentGroup.push(day);\n          }\n        });\n        if (currentGroup.length > 0 && weekNum !== null) {\n          groupedData.push({\n            weekNum,\n            days: currentGroup\n          });\n          currentGroup = [];\n        }\n      }\n    });\n    console.log(\"grouped data :\", groupedData);\n    return groupedData;\n  };\n  const toggleDayState = async (weekIndex, dayIndex) => {\n    let day; // Déclarer la variable day en dehors du bloc try\n    let newData; // Déclarer la variable newData en dehors du bloc try\n\n    try {\n      // Deep copy to avoid mutating the state directly\n      newData = [...preparedData];\n      day = newData[weekIndex].days[dayIndex]; // Accessing the specific day object\n\n      // Modify the isOpen state\n      day.isOpen = !day.isOpen;\n\n      // Update the component state with the new data\n      setPreparedData(newData);\n\n      // Update the server with the new day data\n      const {\n        date,\n        ...dayData\n      } = day; // Exclude the date property\n      const formattedDayData = {\n        date: formatDate(date),\n        // Format the date\n        ...dayData\n      };\n      await scheduleUpdateDay(date, formattedDayData);\n      console.log(`Day ${date} updated successfully.`);\n    } catch (error) {\n      console.error(`Error updating day ${day.date}:`, error);\n      // Revert the state change if update fails\n      if (day) {\n        day.isOpen = !day.isOpen; // Revert the isOpen state\n      }\n\n      if (newData) {\n        setPreparedData([...newData]); // Revert the state change\n      }\n    }\n  };\n\n  const handleInputChange = async (event, weekIndex, dayIndex, header) => {\n    const newValue = event.target.value;\n    console.log(\"New input value:\", newValue); // Vérifiez ce log\n    await updateDayData(weekIndex, dayIndex, header, newValue);\n  };\n  const updateDayData = async (weekIndex, dayIndex, header, newValue) => {\n    // Deep copy to avoid mutating the state directly\n    const newData = [...preparedData];\n    const day = newData[weekIndex].days[dayIndex]; // Accessing the specific day object\n\n    // Directly assign the new value. Do not use the fallback to empty string if newValue is null or empty\n    day[header] = newValue !== null ? newValue : \"\"; // Utilisez `header` directement\n\n    // Update the component state with the new data\n    setPreparedData(newData);\n\n    // Update the server with the new day data\n    try {\n      const {\n        date,\n        ...dayData\n      } = day;\n      // Exclude the date property\n      const formattedDayData = {\n        date: formatDate(date),\n        // Format the date\n        ...dayData\n      };\n      await scheduleUpdateDay(date, formattedDayData);\n      console.log(`Day ${date} updated successfully.`);\n    } catch (error) {\n      console.error(`Error updating day ${day.date}:`, error);\n      // Revert the state change if update fails\n      day[header] = \"\"; // Revert to previous value using `header` directly\n      setPreparedData([...newData]); // Revert the state change\n    }\n  };\n\n  const pasteDefaultWeekContent = async weekIndex => {\n    try {\n      const defaultWeekData = await scheduleGetDefaultWeek();\n      if (defaultWeekData && defaultWeekData.length > 0 && preparedData[weekIndex]) {\n        defaultWeekData.forEach(async (defaultDay, index) => {\n          // Trouvez l'index du jour correspondant dans la semaine cible\n          const dayIndex = preparedData[weekIndex].days.findIndex(day => day.day_of_week === index + 1);\n          if (dayIndex !== -1) {\n            // Si le jour correspondant est trouvé\n            await updateDayData(weekIndex, dayIndex, \"isOpen\", defaultDay.isOpen);\n            await updateDayData(weekIndex, dayIndex, \"morningOpening\", defaultDay.morningOpening ? defaultDay.morningOpening.substring(0, 5) : \"\");\n            await updateDayData(weekIndex, dayIndex, \"morningClosing\", defaultDay.morningClosing ? defaultDay.morningClosing.substring(0, 5) : \"\");\n            await updateDayData(weekIndex, dayIndex, \"afternoonOpening\", defaultDay.afternoonOpening ? defaultDay.afternoonOpening.substring(0, 5) : \"\");\n            await updateDayData(weekIndex, dayIndex, \"afternoonClosing\", defaultDay.afternoonClosing ? defaultDay.afternoonClosing.substring(0, 5) : \"\");\n            // Répétez pour les autres champs si nécessaire\n          }\n        });\n      } else {\n        console.error(\"Aucune donnée de semaine par défaut ou données de semaine préparées invalides.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération de la semaine par défaut:\", error);\n    }\n  };\n  const copyDayContent = dayId => {\n    console.log(\"day Id:\", dayId);\n    console.log(preparedData);\n\n    // Parcourir chaque semaine dans preparedData\n    for (const week of preparedData) {\n      // Trouver le jour spécifique par son ID dans le tableau de jours de cette semaine\n      const dayToCopy = week.days.find(day => day.id === dayId);\n      if (dayToCopy) {\n        // Exclure la propriété 'date' lors de la copie\n        const {\n          day_of_week,\n          ...rest\n        } = dayToCopy;\n        setCopiedDayData({\n          ...rest\n        });\n        console.log(`Contenu du jour :`, dayToCopy);\n        console.log(`Contenu du jour ${dayId} copié, à l'exception du jour.`);\n        return; // Sortir de la fonction après avoir trouvé et copié le jour\n      }\n    }\n\n    console.log(\"Jour non trouvé.\");\n  };\n  const pasteStoredDayContent = dayId => {\n    if (!copiedDayData) {\n      console.log(\"Aucun contenu à coller.\");\n      return;\n    }\n\n    // Parcourir chaque semaine dans preparedData\n    const newData = preparedData.map(week => {\n      // Trouver le jour spécifique par son ID dans le tableau de jours de cette semaine\n      const updatedDays = week.days.map(day => {\n        if (day.id === dayId) {\n          // Copier les données du jour et les fusionner avec les données copiées\n          return {\n            ...day,\n            ...copiedDayData\n          };\n        }\n        return day; // Retourner le jour inchangé si ce n'est pas celui à coller\n      });\n\n      // Retourner une nouvelle semaine avec les jours mis à jour\n      return {\n        ...week,\n        days: updatedDays\n      };\n    });\n\n    // Mettre à jour preparedData avec les nouvelles données\n    setPreparedData(newData);\n    console.log(`Contenu collé dans le jour ${dayId}.`);\n  };\n\n  // Function to format the date\n  const formatDate = date => {\n    return format(new Date(date), \"yyyy-MM-dd\");\n  };\n  const handleInputBlur = async (event, weekIndex, dayIndex, header) => {\n    const newValue = event.target.value;\n    await updateDayData(weekIndex, dayIndex, header, newValue);\n  };\n  const openDaysInWeek = weekIndex => {\n    const newData = [...preparedData];\n\n    // Accéder à la propriété `days` pour la semaine concernée\n    newData[weekIndex].days = newData[weekIndex].days.map(day => ({\n      ...day,\n      isOpen: true,\n      // Ferme le jour\n      morningOpening: \"\",\n      // Réinitialise les horaires d'ouverture et de fermeture\n      morningClosing: \"\",\n      afternoonOpening: \"\",\n      afternoonClosing: \"\"\n    }));\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  const copyWeekContent = weekIndex => {\n    const weekToCopy = preparedData[weekIndex];\n    if (weekToCopy) {\n      // Exclure la propriété 'date' de chaque jour lors de la copie\n      const daysWithoutDate = weekToCopy.days.map(day => {\n        const {\n          date,\n          ...dayWithoutDate\n        } = day;\n        return dayWithoutDate;\n      });\n\n      // Stocker les données copiées sans les dates\n      setCopiedWeekData({\n        ...weekToCopy,\n        days: daysWithoutDate\n      });\n      console.log(`Contenu de la semaine ${weekToCopy.weekNum} copié, à l'exception des dates.`);\n      console.log(\"CopiedWeekData\", copiedWeekData);\n    }\n  };\n  const pasteStoredWeekContent = weekIndex => {\n    if (!copiedWeekData) {\n      console.log(\"Aucun contenu de semaine à coller.\");\n      return;\n    }\n    const newData = [...preparedData];\n    const targetWeek = newData[weekIndex];\n\n    // Fusionner les données copiées avec les jours cibles tout en conservant les dates originales\n    const mergedDays = targetWeek.days.map((day, index) => {\n      if (copiedWeekData.days[index]) {\n        return {\n          ...day,\n          ...copiedWeekData.days[index],\n          date: day.date\n        };\n      }\n      return day;\n    });\n    newData[weekIndex] = {\n      ...targetWeek,\n      days: mergedDays\n    };\n    setPreparedData(newData);\n    console.log(`Contenu de la semaine collé dans la semaine ${newData[weekIndex].weekNum}, en conservant les dates originales.`);\n  };\n  const closeDaysInWeek = weekIndex => {\n    const newData = [...preparedData];\n\n    // Accéder à la propriété `days` pour la semaine concernée\n    newData[weekIndex].days = newData[weekIndex].days.map(day => ({\n      ...day,\n      isOpen: false,\n      // Ferme le jour\n      morningOpening: \"\",\n      // Réinitialise les horaires d'ouverture et de fermeture\n      morningClosing: \"\",\n      afternoonOpening: \"\",\n      afternoonClosing: \"\"\n    }));\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  // Fonctions comme toggleDayState, copyDayContent, pasteStoredDayContent, etc.\n\n  return /*#__PURE__*/_jsxDEV(ScheduleManagement, {\n    preparedData: preparedData,\n    toggleDayState: toggleDayState,\n    copyDayContent: copyDayContent,\n    pasteStoredDayContent: pasteStoredDayContent,\n    handleInputChange: handleInputChange,\n    handleInputBlur: handleInputBlur,\n    copyWeekContent: copyWeekContent,\n    pasteStoredWeekContent: pasteStoredWeekContent,\n    openDaysInWeek: openDaysInWeek,\n    closeDaysInWeek: closeDaysInWeek,\n    pasteDefaultWeekContent: pasteDefaultWeekContent,\n    updateDayData: updateDayData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n};\n_s(ScheduleManagementLogic, \"dt/pkK2fk2l91oClWq20YfY86HQ=\");\n_c = ScheduleManagementLogic;\nexport default ScheduleManagementLogic;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagementLogic\");","map":{"version":3,"names":["React","useState","useEffect","scheduleGetAllDays","scheduleGetDefaultWeek","scheduleUpdateDay","format","parseISO","fr","getWeek","ScheduleManagement","jsxDEV","_jsxDEV","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagementLogic","_s","copiedDayData","setCopiedDayData","preparedData","setPreparedData","copiedWeekData","setCopiedWeekData","fetchData","year","daysResponse","console","log","prepareDataForDisplay","error","data","groupedData","currentGroup","currentWeekNumber","Object","keys","sort","forEach","weekNumber","parseInt","week","firstDayOfWeek","date","weekNum","day","index","push","length","days","toggleDayState","weekIndex","dayIndex","newData","isOpen","dayData","formattedDayData","formatDate","handleInputChange","event","header","newValue","target","value","updateDayData","pasteDefaultWeekContent","defaultWeekData","defaultDay","findIndex","day_of_week","morningOpening","substring","morningClosing","afternoonOpening","afternoonClosing","copyDayContent","dayId","dayToCopy","find","id","rest","pasteStoredDayContent","map","updatedDays","handleInputBlur","openDaysInWeek","copyWeekContent","weekToCopy","daysWithoutDate","dayWithoutDate","pasteStoredWeekContent","targetWeek","mergedDays","closeDaysInWeek","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagementLogic.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  scheduleGetAllDays,\r\n  scheduleGetDefaultWeek,\r\n  scheduleUpdateDay,\r\n} from \"../../../serverRelated/ApiRequest\";\r\nimport { format, parseISO } from \"date-fns\";\r\nimport { fr, getWeek } from \"date-fns\";\r\nimport ScheduleManagement from \"./ScheduleManagement\"; // Assurez-vous d'ajuster le chemin selon votre structure\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagementLogic = () => {\r\n  const [copiedDayData, setCopiedDayData] = useState(null);\r\n  const [preparedData, setPreparedData] = useState([]);\r\n  const [copiedWeekData, setCopiedWeekData] = useState(null);\r\n\r\n  // Toute la logique de gestion des états, y compris toggleDayState, copyDayContent, etc.\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        console.log(\"daysResponse\", daysResponse);\r\n\r\n        const preparedData = prepareDataForDisplay(daysResponse);\r\n        setPreparedData(preparedData);\r\n        console.log(\"peparedData\", preparedData);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const prepareDataForDisplay = (data) => {\r\n    const groupedData = [];\r\n    let currentGroup = [];\r\n    const currentWeekNumber = getWeek(new Date());\r\n\r\n    Object.keys(data)\r\n      .sort()\r\n      .forEach((weekNumber) => {\r\n        if (parseInt(weekNumber) >= currentWeekNumber) {\r\n          const week = data[weekNumber];\r\n          const firstDayOfWeek = week[0] ? parseISO(week[0].date) : null;\r\n          const weekNum = firstDayOfWeek ? getWeek(firstDayOfWeek) : null;\r\n\r\n          week.forEach((day, index) => {\r\n            if (index < 7) {\r\n              currentGroup.push(day);\r\n            }\r\n          });\r\n\r\n          if (currentGroup.length > 0 && weekNum !== null) {\r\n            groupedData.push({ weekNum, days: currentGroup });\r\n            currentGroup = [];\r\n          }\r\n        }\r\n      });\r\n    console.log(\"grouped data :\", groupedData);\r\n    return groupedData;\r\n  };\r\n\r\n  const toggleDayState = async (weekIndex, dayIndex) => {\r\n    let day; // Déclarer la variable day en dehors du bloc try\r\n    let newData; // Déclarer la variable newData en dehors du bloc try\r\n\r\n    try {\r\n      // Deep copy to avoid mutating the state directly\r\n      newData = [...preparedData];\r\n      day = newData[weekIndex].days[dayIndex]; // Accessing the specific day object\r\n\r\n      // Modify the isOpen state\r\n      day.isOpen = !day.isOpen;\r\n\r\n      // Update the component state with the new data\r\n      setPreparedData(newData);\r\n\r\n      // Update the server with the new day data\r\n      const { date, ...dayData } = day; // Exclude the date property\r\n      const formattedDayData = {\r\n        date: formatDate(date), // Format the date\r\n        ...dayData,\r\n      };\r\n      await scheduleUpdateDay(date, formattedDayData);\r\n      console.log(`Day ${date} updated successfully.`);\r\n    } catch (error) {\r\n      console.error(`Error updating day ${day.date}:`, error);\r\n      // Revert the state change if update fails\r\n      if (day) {\r\n        day.isOpen = !day.isOpen; // Revert the isOpen state\r\n      }\r\n      if (newData) {\r\n        setPreparedData([...newData]); // Revert the state change\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleInputChange = async (event, weekIndex, dayIndex, header) => {\r\n    const newValue = event.target.value;\r\n    console.log(\"New input value:\", newValue); // Vérifiez ce log\r\n    await updateDayData(weekIndex, dayIndex, header, newValue);\r\n  };\r\n\r\n  const updateDayData = async (weekIndex, dayIndex, header, newValue) => {\r\n    // Deep copy to avoid mutating the state directly\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex].days[dayIndex]; // Accessing the specific day object\r\n\r\n    // Directly assign the new value. Do not use the fallback to empty string if newValue is null or empty\r\n    day[header] = newValue !== null ? newValue : \"\"; // Utilisez `header` directement\r\n\r\n    // Update the component state with the new data\r\n    setPreparedData(newData);\r\n\r\n    // Update the server with the new day data\r\n    try {\r\n      const { date, ...dayData } = day;\r\n      // Exclude the date property\r\n      const formattedDayData = {\r\n        date: formatDate(date), // Format the date\r\n        ...dayData,\r\n      };\r\n      await scheduleUpdateDay(date, formattedDayData);\r\n      console.log(`Day ${date} updated successfully.`);\r\n    } catch (error) {\r\n      console.error(`Error updating day ${day.date}:`, error);\r\n      // Revert the state change if update fails\r\n      day[header] = \"\"; // Revert to previous value using `header` directly\r\n      setPreparedData([...newData]); // Revert the state change\r\n    }\r\n  };\r\n\r\n  const pasteDefaultWeekContent = async (weekIndex) => {\r\n    try {\r\n      const defaultWeekData = await scheduleGetDefaultWeek();\r\n      if (defaultWeekData && defaultWeekData.length > 0 && preparedData[weekIndex]) {\r\n        defaultWeekData.forEach(async (defaultDay, index) => {\r\n          // Trouvez l'index du jour correspondant dans la semaine cible\r\n          const dayIndex = preparedData[weekIndex].days.findIndex(day => day.day_of_week === index + 1);\r\n  \r\n          if(dayIndex !== -1) { // Si le jour correspondant est trouvé\r\n            await updateDayData(weekIndex, dayIndex, \"isOpen\", defaultDay.isOpen);\r\n            await updateDayData(weekIndex, dayIndex, \"morningOpening\", defaultDay.morningOpening ? defaultDay.morningOpening.substring(0, 5) : \"\");\r\n            await updateDayData(weekIndex, dayIndex, \"morningClosing\", defaultDay.morningClosing ? defaultDay.morningClosing.substring(0, 5) : \"\");\r\n            await updateDayData(weekIndex, dayIndex, \"afternoonOpening\", defaultDay.afternoonOpening ? defaultDay.afternoonOpening.substring(0, 5) : \"\");\r\n            await updateDayData(weekIndex, dayIndex, \"afternoonClosing\", defaultDay.afternoonClosing ? defaultDay.afternoonClosing.substring(0, 5) : \"\");\r\n            // Répétez pour les autres champs si nécessaire\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"Aucune donnée de semaine par défaut ou données de semaine préparées invalides.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération de la semaine par défaut:\", error);\r\n    }\r\n  };\r\n  \r\n  const copyDayContent = (dayId) => {\r\n    console.log(\"day Id:\", dayId);\r\n    console.log(preparedData);\r\n\r\n    // Parcourir chaque semaine dans preparedData\r\n    for (const week of preparedData) {\r\n      // Trouver le jour spécifique par son ID dans le tableau de jours de cette semaine\r\n      const dayToCopy = week.days.find((day) => day.id === dayId);\r\n\r\n      if (dayToCopy) {\r\n        // Exclure la propriété 'date' lors de la copie\r\n        const { day_of_week, ...rest } = dayToCopy;\r\n        setCopiedDayData({ ...rest });\r\n        console.log(`Contenu du jour :`, dayToCopy);\r\n        console.log(`Contenu du jour ${dayId} copié, à l'exception du jour.`);\r\n        return; // Sortir de la fonction après avoir trouvé et copié le jour\r\n      }\r\n    }\r\n\r\n    console.log(\"Jour non trouvé.\");\r\n  };\r\n\r\n  const pasteStoredDayContent = (dayId) => {\r\n    if (!copiedDayData) {\r\n      console.log(\"Aucun contenu à coller.\");\r\n      return;\r\n    }\r\n\r\n    // Parcourir chaque semaine dans preparedData\r\n    const newData = preparedData.map((week) => {\r\n      // Trouver le jour spécifique par son ID dans le tableau de jours de cette semaine\r\n      const updatedDays = week.days.map((day) => {\r\n        if (day.id === dayId) {\r\n          // Copier les données du jour et les fusionner avec les données copiées\r\n          return { ...day, ...copiedDayData };\r\n        }\r\n        return day; // Retourner le jour inchangé si ce n'est pas celui à coller\r\n      });\r\n\r\n      // Retourner une nouvelle semaine avec les jours mis à jour\r\n      return { ...week, days: updatedDays };\r\n    });\r\n\r\n    // Mettre à jour preparedData avec les nouvelles données\r\n    setPreparedData(newData);\r\n    console.log(`Contenu collé dans le jour ${dayId}.`);\r\n  };\r\n\r\n  // Function to format the date\r\n  const formatDate = (date) => {\r\n    return format(new Date(date), \"yyyy-MM-dd\");\r\n  };\r\n\r\n  const handleInputBlur = async (event, weekIndex, dayIndex, header) => {\r\n    const newValue = event.target.value;\r\n    await updateDayData(weekIndex, dayIndex, header, newValue);\r\n  };\r\n\r\n  const openDaysInWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n\r\n    // Accéder à la propriété `days` pour la semaine concernée\r\n    newData[weekIndex].days = newData[weekIndex].days.map((day) => ({\r\n      ...day,\r\n      isOpen: true, // Ferme le jour\r\n      morningOpening: \"\", // Réinitialise les horaires d'ouverture et de fermeture\r\n      morningClosing: \"\",\r\n      afternoonOpening: \"\",\r\n      afternoonClosing: \"\",\r\n    }));\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n\r\n\r\n  const copyWeekContent = (weekIndex) => {\r\n    const weekToCopy = preparedData[weekIndex];\r\n    if (weekToCopy) {\r\n      // Exclure la propriété 'date' de chaque jour lors de la copie\r\n      const daysWithoutDate = weekToCopy.days.map((day) => {\r\n        const { date, ...dayWithoutDate } = day;\r\n        return dayWithoutDate;\r\n      });\r\n\r\n      // Stocker les données copiées sans les dates\r\n      setCopiedWeekData({ ...weekToCopy, days: daysWithoutDate });\r\n      console.log(\r\n        `Contenu de la semaine ${weekToCopy.weekNum} copié, à l'exception des dates.`\r\n      );\r\n      console.log(\"CopiedWeekData\", copiedWeekData);\r\n    }\r\n  };\r\n\r\n  const pasteStoredWeekContent = (weekIndex) => {\r\n    if (!copiedWeekData) {\r\n      console.log(\"Aucun contenu de semaine à coller.\");\r\n      return;\r\n    }\r\n\r\n    const newData = [...preparedData];\r\n    const targetWeek = newData[weekIndex];\r\n\r\n    // Fusionner les données copiées avec les jours cibles tout en conservant les dates originales\r\n    const mergedDays = targetWeek.days.map((day, index) => {\r\n      if (copiedWeekData.days[index]) {\r\n        return { ...day, ...copiedWeekData.days[index], date: day.date };\r\n      }\r\n      return day;\r\n    });\r\n\r\n    newData[weekIndex] = { ...targetWeek, days: mergedDays };\r\n    setPreparedData(newData);\r\n    console.log(\r\n      `Contenu de la semaine collé dans la semaine ${newData[weekIndex].weekNum}, en conservant les dates originales.`\r\n    );\r\n  };\r\n\r\n  const closeDaysInWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n\r\n    // Accéder à la propriété `days` pour la semaine concernée\r\n    newData[weekIndex].days = newData[weekIndex].days.map((day) => ({\r\n      ...day,\r\n      isOpen: false, // Ferme le jour\r\n      morningOpening: \"\", // Réinitialise les horaires d'ouverture et de fermeture\r\n      morningClosing: \"\",\r\n      afternoonOpening: \"\",\r\n      afternoonClosing: \"\",\r\n    }));\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  // Fonctions comme toggleDayState, copyDayContent, pasteStoredDayContent, etc.\r\n\r\n  return (\r\n    <ScheduleManagement\r\n      preparedData={preparedData}\r\n      toggleDayState={toggleDayState}\r\n      copyDayContent={copyDayContent}\r\n      pasteStoredDayContent={pasteStoredDayContent}\r\n      handleInputChange={handleInputChange}\r\n      handleInputBlur={handleInputBlur}\r\n      copyWeekContent={copyWeekContent}\r\n      pasteStoredWeekContent={pasteStoredWeekContent}\r\n      openDaysInWeek={openDaysInWeek}\r\n      closeDaysInWeek={closeDaysInWeek}\r\n      pasteDefaultWeekContent={pasteDefaultWeekContent}\r\n      updateDayData={updateDayData}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ScheduleManagementLogic;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}