{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport { scheduleGetAllDays, scheduleGetDefaultWeek } from \"../../../serverRelated/ApiRequest\";\nimport { format, parseISO, set } from \"date-fns\";\nimport { af, fr } from \"date-fns/locale\"; // Importer les locales françaises\nimport { getWeek } from \"date-fns\";\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagement = () => {\n  _s();\n  const [copiedDayData, setCopiedDayData] = useState(null);\n  const [preparedData, setPreparedData] = useState([]);\n  const [copiedWeekData, setCopiedWeekData] = useState(null);\n  const toggleDayState = (weekIndex, dayIndex) => {\n    const newData = [...preparedData];\n    // Trouver le bon jour dans la propriété `days`\n    const day = newData[weekIndex].days[dayIndex];\n\n    // Modifier l'état isOpen\n    day.isOpen = !day.isOpen;\n\n    // Appliquer d'autres logiques si nécessaire...\n\n    setPreparedData(newData);\n  };\n  const copyDayContent = dayId => {\n    // Directement trouver le jour spécifique par son ID dans le tableau de jours\n    const dayToCopy = preparedData.find(day => day.id === dayId);\n    if (dayToCopy) {\n      // Exclure la propriété 'date' lors de la copie\n      const {\n        day_of_week,\n        ...rest\n      } = dayToCopy;\n      setCopiedDayData({\n        ...rest\n      });\n      console.log(`Contenu du jour ${dayId} copié, à l'exception du jour.`);\n    } else {\n      console.log(\"Jour non trouvé.\");\n    }\n  };\n  const applyDefaultWeek = async weekIndex => {\n    try {\n      const defaultWeekData = await scheduleGetDefaultWeek();\n      if (defaultWeekData && defaultWeekData.length > 0) {\n        const newData = [...preparedData];\n        if (newData[weekIndex]) {\n          // Log avant mise à jour\n          console.log(\"Horaires avant mise à jour :\", newData[weekIndex].days.map(day => ({\n            morningOpening: day.morningOpening,\n            morningClosing: day.morningClosing,\n            afternoonOpening: day.afternoonOpening,\n            afternoonClosing: day.afternoonClosing\n          })));\n          const updatedDays = newData[weekIndex].days.map(currentDay => {\n            const dayOfWeek = new Date(currentDay.date).getDay() + 1; // +1 pour correspondre à votre indexation day_of_week\n            const defaultDay = defaultWeekData.find(d => d.day_of_week === dayOfWeek);\n            if (defaultDay) {\n              return {\n                ...currentDay,\n                // conservez toutes les propriétés existantes\n                isOpen: defaultDay.isOpen,\n                morningOpening: defaultDay.morningOpening ? defaultDay.morningOpening.substring(0, 5) : null,\n                morningClosing: defaultDay.morningClosing ? defaultDay.morningClosing.substring(0, 5) : null,\n                afternoonOpening: defaultDay.afternoonOpening ? defaultDay.afternoonOpening.substring(0, 5) : null,\n                afternoonClosing: defaultDay.afternoonClosing ? defaultDay.afternoonClosing.substring(0, 5) : null\n              };\n            }\n            return currentDay; // retournez le jour actuel non modifié si aucun jour par défaut n'est trouvé\n          });\n\n          newData[weekIndex].days = updatedDays;\n\n          // Log après mise à jour\n          console.log(\"Horaires après mise à jour :\", updatedDays.map(day => ({\n            morningOpening: day.morningOpening,\n            morningClosing: day.morningClosing,\n            afternoonOpening: day.afternoonOpening,\n            afternoonClosing: day.afternoonClosing\n          })));\n          console.log(\"newData\", newData);\n          setPreparedData(newData);\n          console.log(\"Set prepared data\", newData);\n          console.log(`Semaine par défaut appliquée à la semaine ${weekIndex + 1}.`);\n        }\n      } else {\n        console.error(\"Erreur lors de la récupération des données de la semaine par défaut.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des données de la semaine par défaut:\", error);\n    }\n  };\n  const pasteStoredDayContent = dayId => {\n    if (!copiedDayData) {\n      console.log(\"Aucun contenu à coller.\");\n      return;\n    }\n    const newData = preparedData.map(day => day.id === dayId ? {\n      ...day,\n      ...copiedDayData,\n      id: day.id\n    } : day);\n    setPreparedData(newData);\n    console.log(`Contenu collé dans le jour ${dayId}.`);\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        console.log(\"daysResponse\", daysResponse);\n        const preparedData = prepareDataForDisplay(daysResponse);\n        setPreparedData(preparedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    const fetchDefaultData = async () => {\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const defaultResponse = await scheduleGetDefaultWeek();\n        console.log(\"Default Data :\", defaultResponse);\n        const defaultData = prepareDataForDisplay(defaultResponse);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n    fetchDefaultData();\n  }, []);\n  const prepareDataForDisplay = data => {\n    const groupedData = [];\n    let currentGroup = [];\n    const currentWeekNumber = getWeek(new Date());\n    Object.keys(data).sort().forEach(weekNumber => {\n      if (parseInt(weekNumber) >= currentWeekNumber) {\n        const week = data[weekNumber];\n        const firstDayOfWeek = week[0] ? parseISO(week[0].date) : null;\n        const weekNum = firstDayOfWeek ? getWeek(firstDayOfWeek) : null;\n        week.forEach((day, index) => {\n          if (index < 7) {\n            currentGroup.push(day);\n          }\n        });\n        if (currentGroup.length > 0 && weekNum !== null) {\n          groupedData.push({\n            weekNum,\n            days: currentGroup\n          });\n          currentGroup = [];\n        }\n      }\n    });\n    return groupedData;\n  };\n  const handleInputChange = (event, weekIndex, dayIndex, key) => {\n    const value = event.target.value;\n    const newData = [...preparedData];\n    newData[weekIndex].days[dayIndex][key] = value;\n    setPreparedData(newData);\n  };\n  const handleInputBlur = (event, weekIndex, dayIndex, key) => {\n    handleInputChange(event, weekIndex, dayIndex, key);\n  };\n  const openDaysInWeek = weekIndex => {\n    const newData = [...preparedData];\n\n    // Accéder à la propriété `days` pour la semaine concernée\n    newData[weekIndex].days = newData[weekIndex].days.map(day => ({\n      ...day,\n      isOpen: true,\n      // Ferme le jour\n      morningOpening: \"\",\n      // Réinitialise les horaires d'ouverture et de fermeture\n      morningClosing: \"\",\n      afternoonOpening: \"\",\n      afternoonClosing: \"\"\n    }));\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  const copyWeekContent = weekIndex => {\n    const weekToCopy = preparedData[weekIndex];\n    if (weekToCopy) {\n      // Exclure la propriété 'date' de chaque jour lors de la copie\n      const daysWithoutDate = weekToCopy.days.map(day => {\n        const {\n          date,\n          ...dayWithoutDate\n        } = day;\n        return dayWithoutDate;\n      });\n\n      // Stocker les données copiées sans les dates\n      setCopiedWeekData({\n        ...weekToCopy,\n        days: daysWithoutDate\n      });\n      console.log(`Contenu de la semaine ${weekToCopy.weekNum} copié, à l'exception des dates.`);\n    }\n  };\n  const pasteStoredWeekContent = weekIndex => {\n    if (!copiedWeekData) {\n      console.log(\"Aucun contenu de semaine à coller.\");\n      return;\n    }\n    const newData = [...preparedData];\n    const targetWeek = newData[weekIndex];\n\n    // Fusionner les données copiées avec les jours cibles tout en conservant les dates originales\n    const mergedDays = targetWeek.days.map((day, index) => {\n      if (copiedWeekData.days[index]) {\n        return {\n          ...day,\n          ...copiedWeekData.days[index],\n          date: day.date\n        };\n      }\n      return day;\n    });\n    newData[weekIndex] = {\n      ...targetWeek,\n      days: mergedDays\n    };\n    setPreparedData(newData);\n    console.log(`Contenu de la semaine collé dans la semaine ${newData[weekIndex].weekNum}, en conservant les dates originales.`);\n  };\n  const closeDaysInWeek = weekIndex => {\n    const newData = [...preparedData];\n\n    // Accéder à la propriété `days` pour la semaine concernée\n    newData[weekIndex].days = newData[weekIndex].days.map(day => ({\n      ...day,\n      isOpen: false,\n      // Ferme le jour\n      morningOpening: \"\",\n      // Réinitialise les horaires d'ouverture et de fermeture\n      morningClosing: \"\",\n      afternoonOpening: \"\",\n      afternoonClosing: \"\"\n    }));\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  const rowsHeaders = [\"Date\", \"État\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\", `Actions`];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: preparedData.map((weekData, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-light mt-5\",\n            children: [\"Semaine \", weekData.weekNum]\n          }, `week-title-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => copyWeekContent(index),\n            children: \"Copier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => pasteStoredWeekContent(index),\n            children: \"Coller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => openDaysInWeek(index),\n            children: \"Ouvrir la semaine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => closeDaysInWeek(index),\n            children: \"Fermer la semaine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => applyDefaultWeek(index),\n            children: \"Appliquer semaine d\\xE9fault\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          striped: true,\n          bordered: true,\n          hover: true,\n          className: \"text-center mt-4\",\n          responsive: true,\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: rowsHeaders.map((header, headerIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: header\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 15\n              }, this), weekData.days.map((day, dayIndex) => {\n                let cellContent;\n                switch (header) {\n                  case \"Date\":\n                    const date = day.date ? parseISO(day.date) : null;\n                    cellContent = date ? format(date, \"EEEE dd MMMM yyyy\", {\n                      locale: fr\n                    }) : \"Date non définie\";\n                    break;\n                  case \"État\":\n                    cellContent = /*#__PURE__*/_jsxDEV(Button, {\n                      onClick: () => toggleDayState(index, dayIndex),\n                      style: {\n                        backgroundColor: day.isOpen ? \"green\" : \"red\",\n                        color: \"white\"\n                      },\n                      children: day.isOpen ? \"Ouvert\" : \"Fermé\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 339,\n                      columnNumber: 23\n                    }, this);\n                    break;\n                  case \"Ouverture Matin\":\n                  case \"Fermeture Matin\":\n                  case \"Ouverture Après-midi\":\n                  case \"Fermeture Après-midi\":\n                    const key = header.toLowerCase().replace(/\\s+/g, \"\");\n                    cellContent = /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      value: day[key] || \"\",\n                      onChange: e => handleInputChange(e, index, dayIndex, key),\n                      onBlur: e => handleInputBlur(e, index, dayIndex, key),\n                      disabled: !day.isOpen,\n                      style: {\n                        backgroundColor: day.isOpen ? \"lightyellow\" : \"lightgrey\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 350,\n                      columnNumber: 23\n                    }, this);\n                    break;\n                  case \"Actions\":\n                    // Actions comme Copier et Coller\n                    break;\n                  default:\n                    cellContent = \"N/A\";\n                }\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: cellContent\n                }, `${headerIndex}-${dayIndex}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 24\n                }, this);\n              })]\n            }, headerIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 13\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 9\n          }, this)\n        }, `table-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n};\n_s(ScheduleManagement, \"dt/pkK2fk2l91oClWq20YfY86HQ=\");\n_c = ScheduleManagement;\nexport default ScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","Table","Container","scheduleGetAllDays","scheduleGetDefaultWeek","format","parseISO","set","af","fr","getWeek","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagement","_s","copiedDayData","setCopiedDayData","preparedData","setPreparedData","copiedWeekData","setCopiedWeekData","toggleDayState","weekIndex","dayIndex","newData","day","days","isOpen","copyDayContent","dayId","dayToCopy","find","id","day_of_week","rest","console","log","applyDefaultWeek","defaultWeekData","length","map","morningOpening","morningClosing","afternoonOpening","afternoonClosing","updatedDays","currentDay","dayOfWeek","date","getDay","defaultDay","d","substring","error","pasteStoredDayContent","fetchData","year","daysResponse","prepareDataForDisplay","fetchDefaultData","defaultResponse","defaultData","data","groupedData","currentGroup","currentWeekNumber","Object","keys","sort","forEach","weekNumber","parseInt","week","firstDayOfWeek","weekNum","index","push","handleInputChange","event","key","value","target","handleInputBlur","openDaysInWeek","copyWeekContent","weekToCopy","daysWithoutDate","dayWithoutDate","pasteStoredWeekContent","targetWeek","mergedDays","closeDaysInWeek","rowsHeaders","children","weekData","className","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","striped","bordered","hover","responsive","header","headerIndex","cellContent","locale","style","backgroundColor","color","toLowerCase","replace","type","onChange","e","onBlur","disabled","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport {\r\n  scheduleGetAllDays,\r\n  scheduleGetDefaultWeek,\r\n} from \"../../../serverRelated/ApiRequest\";\r\n\r\nimport { format, parseISO, set } from \"date-fns\";\r\nimport { af, fr } from \"date-fns/locale\"; // Importer les locales françaises\r\nimport { getWeek } from \"date-fns\";\r\n\r\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagement = () => {\r\n  const [copiedDayData, setCopiedDayData] = useState(null);\r\n  const [preparedData, setPreparedData] = useState([]);\r\n  const [copiedWeekData, setCopiedWeekData] = useState(null);\r\n\r\n  const toggleDayState = (weekIndex, dayIndex) => {\r\n    const newData = [...preparedData];\r\n    // Trouver le bon jour dans la propriété `days`\r\n    const day = newData[weekIndex].days[dayIndex];\r\n\r\n    // Modifier l'état isOpen\r\n    day.isOpen = !day.isOpen;\r\n\r\n    // Appliquer d'autres logiques si nécessaire...\r\n\r\n    setPreparedData(newData);\r\n  };\r\n\r\n  const copyDayContent = (dayId) => {\r\n    // Directement trouver le jour spécifique par son ID dans le tableau de jours\r\n    const dayToCopy = preparedData.find((day) => day.id === dayId);\r\n\r\n    if (dayToCopy) {\r\n      // Exclure la propriété 'date' lors de la copie\r\n      const { day_of_week, ...rest } = dayToCopy;\r\n      setCopiedDayData({ ...rest });\r\n      console.log(`Contenu du jour ${dayId} copié, à l'exception du jour.`);\r\n    } else {\r\n      console.log(\"Jour non trouvé.\");\r\n    }\r\n  };\r\n\r\n  const applyDefaultWeek = async (weekIndex) => {\r\n    try {\r\n      const defaultWeekData = await scheduleGetDefaultWeek();\r\n      if (defaultWeekData && defaultWeekData.length > 0) {\r\n        const newData = [...preparedData];\r\n  \r\n        if (newData[weekIndex]) {\r\n          // Log avant mise à jour\r\n          console.log(\"Horaires avant mise à jour :\", newData[weekIndex].days.map(day => ({\r\n            morningOpening: day.morningOpening,\r\n            morningClosing: day.morningClosing,\r\n            afternoonOpening: day.afternoonOpening,\r\n            afternoonClosing: day.afternoonClosing,\r\n          })));\r\n  \r\n          const updatedDays = newData[weekIndex].days.map(currentDay => {\r\n            const dayOfWeek = new Date(currentDay.date).getDay() + 1; // +1 pour correspondre à votre indexation day_of_week\r\n            const defaultDay = defaultWeekData.find(d => d.day_of_week === dayOfWeek);\r\n  \r\n            if (defaultDay) {\r\n              return {\r\n                ...currentDay, // conservez toutes les propriétés existantes\r\n                isOpen: defaultDay.isOpen,\r\n                morningOpening: defaultDay.morningOpening ? defaultDay.morningOpening.substring(0, 5) : null,\r\n                morningClosing: defaultDay.morningClosing ? defaultDay.morningClosing.substring(0, 5) : null,\r\n                afternoonOpening: defaultDay.afternoonOpening ? defaultDay.afternoonOpening.substring(0, 5) : null,\r\n                afternoonClosing: defaultDay.afternoonClosing ? defaultDay.afternoonClosing.substring(0, 5) : null,\r\n              };\r\n            }\r\n  \r\n            return currentDay; // retournez le jour actuel non modifié si aucun jour par défaut n'est trouvé\r\n          });\r\n  \r\n          newData[weekIndex].days = updatedDays;\r\n  \r\n          // Log après mise à jour\r\n          console.log(\"Horaires après mise à jour :\", updatedDays.map(day => ({\r\n            morningOpening: day.morningOpening,\r\n            morningClosing: day.morningClosing,\r\n            afternoonOpening: day.afternoonOpening,\r\n            afternoonClosing: day.afternoonClosing,\r\n          })));\r\n  \r\n          console.log(\"newData\", newData)\r\n          setPreparedData(newData);\r\n          console.log(\"Set prepared data\", newData)\r\n          console.log(`Semaine par défaut appliquée à la semaine ${weekIndex + 1}.`);\r\n        }\r\n      } else {\r\n        console.error(\"Erreur lors de la récupération des données de la semaine par défaut.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération des données de la semaine par défaut:\", error);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  const pasteStoredDayContent = (dayId) => {\r\n    if (!copiedDayData) {\r\n      console.log(\"Aucun contenu à coller.\");\r\n      return;\r\n    }\r\n\r\n    const newData = preparedData.map((day) =>\r\n      day.id === dayId ? { ...day, ...copiedDayData, id: day.id } : day\r\n    );\r\n\r\n    setPreparedData(newData);\r\n    console.log(`Contenu collé dans le jour ${dayId}.`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        console.log(\"daysResponse\", daysResponse);\r\n\r\n        const preparedData = prepareDataForDisplay(daysResponse);\r\n        setPreparedData(preparedData);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchDefaultData = async () => {\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const defaultResponse = await scheduleGetDefaultWeek();\r\n        console.log(\"Default Data :\", defaultResponse);\r\n\r\n        const defaultData = prepareDataForDisplay(defaultResponse);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    fetchDefaultData();\r\n  }, []);\r\n\r\n  const prepareDataForDisplay = (data) => {\r\n    const groupedData = [];\r\n    let currentGroup = [];\r\n    const currentWeekNumber = getWeek(new Date());\r\n\r\n    Object.keys(data)\r\n      .sort()\r\n      .forEach((weekNumber) => {\r\n        if (parseInt(weekNumber) >= currentWeekNumber) {\r\n          const week = data[weekNumber];\r\n          const firstDayOfWeek = week[0] ? parseISO(week[0].date) : null;\r\n          const weekNum = firstDayOfWeek ? getWeek(firstDayOfWeek) : null;\r\n\r\n          week.forEach((day, index) => {\r\n            if (index < 7) {\r\n              currentGroup.push(day);\r\n            }\r\n          });\r\n\r\n          if (currentGroup.length > 0 && weekNum !== null) {\r\n            groupedData.push({ weekNum, days: currentGroup });\r\n            currentGroup = [];\r\n          }\r\n        }\r\n      });\r\n\r\n    return groupedData;\r\n  };\r\n\r\n  const handleInputChange = (event, weekIndex, dayIndex, key) => {\r\n    const value = event.target.value;\r\n    const newData = [...preparedData];\r\n    newData[weekIndex].days[dayIndex][key] = value;\r\n    setPreparedData(newData);\r\n  };\r\n  \r\n  const handleInputBlur = (event, weekIndex, dayIndex, key) => {\r\n    handleInputChange(event, weekIndex, dayIndex, key);\r\n  };\r\n  \r\n  const openDaysInWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n\r\n    // Accéder à la propriété `days` pour la semaine concernée\r\n    newData[weekIndex].days = newData[weekIndex].days.map((day) => ({\r\n      ...day,\r\n      isOpen: true, // Ferme le jour\r\n      morningOpening: \"\", // Réinitialise les horaires d'ouverture et de fermeture\r\n      morningClosing: \"\",\r\n      afternoonOpening: \"\",\r\n      afternoonClosing: \"\",\r\n    }));\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  const copyWeekContent = (weekIndex) => {\r\n    const weekToCopy = preparedData[weekIndex];\r\n    if (weekToCopy) {\r\n      // Exclure la propriété 'date' de chaque jour lors de la copie\r\n      const daysWithoutDate = weekToCopy.days.map((day) => {\r\n        const { date, ...dayWithoutDate } = day;\r\n        return dayWithoutDate;\r\n      });\r\n\r\n      // Stocker les données copiées sans les dates\r\n      setCopiedWeekData({ ...weekToCopy, days: daysWithoutDate });\r\n      console.log(\r\n        `Contenu de la semaine ${weekToCopy.weekNum} copié, à l'exception des dates.`\r\n      );\r\n    }\r\n  };\r\n\r\n  const pasteStoredWeekContent = (weekIndex) => {\r\n    if (!copiedWeekData) {\r\n      console.log(\"Aucun contenu de semaine à coller.\");\r\n      return;\r\n    }\r\n\r\n    const newData = [...preparedData];\r\n    const targetWeek = newData[weekIndex];\r\n\r\n    // Fusionner les données copiées avec les jours cibles tout en conservant les dates originales\r\n    const mergedDays = targetWeek.days.map((day, index) => {\r\n      if (copiedWeekData.days[index]) {\r\n        return { ...day, ...copiedWeekData.days[index], date: day.date };\r\n      }\r\n      return day;\r\n    });\r\n\r\n    newData[weekIndex] = { ...targetWeek, days: mergedDays };\r\n    setPreparedData(newData);\r\n    console.log(\r\n      `Contenu de la semaine collé dans la semaine ${newData[weekIndex].weekNum}, en conservant les dates originales.`\r\n    );\r\n  };\r\n\r\n  const closeDaysInWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n\r\n    // Accéder à la propriété `days` pour la semaine concernée\r\n    newData[weekIndex].days = newData[weekIndex].days.map((day) => ({\r\n      ...day,\r\n      isOpen: false, // Ferme le jour\r\n      morningOpening: \"\", // Réinitialise les horaires d'ouverture et de fermeture\r\n      morningClosing: \"\",\r\n      afternoonOpening: \"\",\r\n      afternoonClosing: \"\",\r\n    }));\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  const rowsHeaders = [\r\n    \"Date\",\r\n    \"État\",\r\n    \"Ouverture Matin\",\r\n    \"Fermeture Matin\",\r\n    \"Ouverture Après-midi\",\r\n    \"Fermeture Après-midi\",\r\n    `Actions`,\r\n  ];\r\n\r\n  return (\r\n    <>\r\n<Container>\r\n  {preparedData.map((weekData, index) => (\r\n    <>\r\n      <div>\r\n        <h2 key={`week-title-${index}`} className=\"text-light mt-5\">\r\n          Semaine {weekData.weekNum}\r\n        </h2>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => copyWeekContent(index)}\r\n              >\r\n                Copier\r\n              </Button>{\" \"}\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => pasteStoredWeekContent(index)}\r\n              >\r\n                Coller\r\n              </Button>{\" \"}\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => openDaysInWeek(index)}\r\n              >\r\n                Ouvrir la semaine\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => closeDaysInWeek(index)}\r\n              >\r\n                Fermer la semaine\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => applyDefaultWeek(index)}\r\n              >\r\n                Appliquer semaine défault\r\n              </Button>\r\n            </div>\r\n\r\n            <Table key={`table-${index}`} striped bordered hover className=\"text-center mt-4\" responsive>\r\n        <tbody>\r\n          {rowsHeaders.map((header, headerIndex) => (\r\n            <tr key={headerIndex}>\r\n              <th>{header}</th>\r\n              {weekData.days.map((day, dayIndex) => {\r\n                let cellContent;\r\n                switch (header) {\r\n                  case \"Date\":\r\n                    const date = day.date ? parseISO(day.date) : null;\r\n                    cellContent = date ? format(date, \"EEEE dd MMMM yyyy\", { locale: fr }) : \"Date non définie\";\r\n                    break;\r\n                  case \"État\":\r\n                    cellContent = (\r\n                      <Button onClick={() => toggleDayState(index, dayIndex)} style={{ backgroundColor: day.isOpen ? \"green\" : \"red\", color: \"white\" }}>\r\n                        {day.isOpen ? \"Ouvert\" : \"Fermé\"}\r\n                      </Button>\r\n                    );\r\n                    break;\r\n                  case \"Ouverture Matin\":\r\n                  case \"Fermeture Matin\":\r\n                  case \"Ouverture Après-midi\":\r\n                  case \"Fermeture Après-midi\":\r\n                    const key = header.toLowerCase().replace(/\\s+/g, \"\");\r\n                    cellContent = (\r\n                      <input\r\n                        type=\"time\"\r\n                        value={day[key] || \"\"}\r\n                        onChange={(e) => handleInputChange(e, index, dayIndex, key)}\r\n                        onBlur={(e) => handleInputBlur(e, index, dayIndex, key)}\r\n                        disabled={!day.isOpen}\r\n                        style={{ backgroundColor: day.isOpen ? \"lightyellow\" : \"lightgrey\" }}\r\n                      />\r\n                    );\r\n                    break;\r\n                  case \"Actions\":\r\n                    // Actions comme Copier et Coller\r\n                    break;\r\n                  default:\r\n                    cellContent = \"N/A\";\r\n                }\r\n                return <td key={`${headerIndex}-${dayIndex}`}>{cellContent}</td>;\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  ))}\r\n</Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScheduleManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}