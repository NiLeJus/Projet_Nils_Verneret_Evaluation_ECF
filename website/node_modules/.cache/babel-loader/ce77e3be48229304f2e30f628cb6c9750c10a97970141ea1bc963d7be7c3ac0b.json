{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport { scheduleGetAllDays, scheduleGetDefaultWeek } from \"../../../serverRelated/ApiRequest\";\nimport { format, parseISO, set } from \"date-fns\";\nimport { af, fr } from \"date-fns/locale\"; // Importer les locales françaises\nimport { getWeek } from \"date-fns\";\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagement = () => {\n  _s();\n  const [copiedDayData, setCopiedDayData] = useState(null);\n  const [preparedData, setPreparedData] = useState([]);\n  const [copiedWeekData, setCopiedWeekData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        console.log(\"daysResponse\", daysResponse);\n        const preparedData = prepareDataForDisplay(daysResponse);\n        setPreparedData(preparedData);\n        console.log(\"peparedData\", preparedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleInputChange = (event, weekIndex, dayIndex, header) => {\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\n\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n    const day = newData[weekIndex].days[dayIndex]; // Accéder à l'objet jour spécifique\n\n    // Mettre à jour la valeur spécifique\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertir l'en-tête en clé correspondante\n    day[key] = newValue || \"\"; // Utiliser une chaîne vide si la nouvelle valeur est falsy\n\n    // Mettre à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n  };\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\n    const newValue = event.target.value;\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertit l'en-tête en clé correspondante\n\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n    const day = newData[weekIndex].days[dayIndex]; // Accéder à l'objet jour spécifique\n\n    // Met à jour la valeur spécifique\n    day[key] = newValue || \"\"; // Utilisez une chaîne vide si la nouvelle valeur est falsy\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n  };\n  const openDaysInWeek = weekIndex => {\n    const newData = [...preparedData];\n\n    // Accéder à la propriété `days` pour la semaine concernée\n    newData[weekIndex].days = newData[weekIndex].days.map(day => ({\n      ...day,\n      isOpen: true,\n      // Ferme le jour\n      morningOpening: \"\",\n      // Réinitialise les horaires d'ouverture et de fermeture\n      morningClosing: \"\",\n      afternoonOpening: \"\",\n      afternoonClosing: \"\"\n    }));\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  const pasteDefaultWeekContent = async weekIndex => {\n    try {\n      const defaultWeekData = await scheduleGetDefaultWeek();\n      if (defaultWeekData && defaultWeekData.length > 0 && preparedData[weekIndex]) {\n        const newData = [...preparedData];\n        const targetWeek = newData[weekIndex];\n        const updatedDays = targetWeek.days.map((day, dayIndex) => {\n          const defaultDay = defaultWeekData.find(day => day.day_of_week === dayIndex + 1);\n          if (defaultDay) {\n            return {\n              ...day,\n              isOpen: defaultDay.isOpen,\n              morningOpening: defaultDay.morningOpening ? defaultDay.morningOpening.substring(0, 5) : day.morningOpening,\n              morningClosing: defaultDay.morningClosing ? defaultDay.morningClosing.substring(0, 5) : day.morningClosing,\n              afternoonOpening: defaultDay.afternoonOpening ? defaultDay.afternoonOpening.substring(0, 5) : day.afternoonOpening,\n              afternoonClosing: defaultDay.afternoonClosing ? defaultDay.afternoonClosing.substring(0, 5) : day.afternoonClosing\n            };\n          } else {\n            return day;\n          }\n        });\n        newData[weekIndex] = {\n          ...targetWeek,\n          days: updatedDays\n        };\n        setPreparedData(newData);\n        console.log(\"NewData\", newData);\n      } else {\n        console.error(\"Aucune donnée de semaine par défaut ou données de semaine préparées invalides.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération de la semaine par défaut:\", error);\n    }\n  };\n  const copyWeekContent = weekIndex => {\n    const weekToCopy = preparedData[weekIndex];\n    if (weekToCopy) {\n      // Exclure la propriété 'date' de chaque jour lors de la copie\n      const daysWithoutDate = weekToCopy.days.map(day => {\n        const {\n          date,\n          ...dayWithoutDate\n        } = day;\n        return dayWithoutDate;\n      });\n\n      // Stocker les données copiées sans les dates\n      setCopiedWeekData({\n        ...weekToCopy,\n        days: daysWithoutDate\n      });\n      console.log(`Contenu de la semaine ${weekToCopy.weekNum} copié, à l'exception des dates.`);\n      console.log(\"CopiedWeekData\", copiedWeekData);\n    }\n  };\n  const pasteStoredWeekContent = weekIndex => {\n    if (!copiedWeekData) {\n      console.log(\"Aucun contenu de semaine à coller.\");\n      return;\n    }\n    const newData = [...preparedData];\n    const targetWeek = newData[weekIndex];\n\n    // Fusionner les données copiées avec les jours cibles tout en conservant les dates originales\n    const mergedDays = targetWeek.days.map((day, index) => {\n      if (copiedWeekData.days[index]) {\n        return {\n          ...day,\n          ...copiedWeekData.days[index],\n          date: day.date\n        };\n      }\n      return day;\n    });\n    newData[weekIndex] = {\n      ...targetWeek,\n      days: mergedDays\n    };\n    setPreparedData(newData);\n    console.log(`Contenu de la semaine collé dans la semaine ${newData[weekIndex].weekNum}, en conservant les dates originales.`);\n  };\n  const closeDaysInWeek = weekIndex => {\n    const newData = [...preparedData];\n\n    // Accéder à la propriété `days` pour la semaine concernée\n    newData[weekIndex].days = newData[weekIndex].days.map(day => ({\n      ...day,\n      isOpen: false,\n      // Ferme le jour\n      morningOpening: \"\",\n      // Réinitialise les horaires d'ouverture et de fermeture\n      morningClosing: \"\",\n      afternoonOpening: \"\",\n      afternoonClosing: \"\"\n    }));\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  const rowsHeaders = [\"Date\", \"État\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\", `Actions`];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: preparedData.map((weekData, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-light mt-5\",\n            children: [\"Semaine \", weekData.weekNum]\n          }, `week-title-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => copyWeekContent(index),\n            children: \"Copier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => pasteStoredWeekContent(index),\n            children: \"Coller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => openDaysInWeek(index),\n            children: \"Ouvrir la semaine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => closeDaysInWeek(index),\n            children: \"Fermer la semaine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => pasteDefaultWeekContent(index),\n            children: \"Appliquer semaine d\\xE9fault\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          striped: true,\n          bordered: true,\n          hover: true,\n          className: \"text-center mt-4\",\n          responsive: true,\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: rowsHeaders.map((header, headerIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: header\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 21\n              }, this), weekData.days.map((day, dayIndex) => {\n                let cellContent;\n                switch (header) {\n                  case \"Date\":\n                    // Assurez-vous que day.date est défini avant de l'utiliser\n                    const date = day.date ? parseISO(day.date) : null;\n                    cellContent = date ? format(date, \"EEEE dd MMMM yyyy\", {\n                      locale: fr\n                    }) : \"Date non définie\"; // Gestion d'une date indéfinie\n                    break;\n                  case \"État\":\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        onClick: () => toggleDayState(index, dayIndex),\n                        style: {\n                          backgroundColor: day.isOpen ? \"green\" : \"red\",\n                          color: \"white\"\n                        },\n                        children: day.isOpen ? \"Ouvert\" : \"Fermé\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 278,\n                        columnNumber: 31\n                      }, this)\n                    }, `${headerIndex}-${dayIndex}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 277,\n                      columnNumber: 29\n                    }, this);\n                  case \"Ouverture Matin\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      value: day.morningOpening,\n                      onChange: e => handleInputChange(e, index, dayIndex, header),\n                      disabled: !day.isOpen,\n                      style: {\n                        backgroundColor: day.isOpen ? \"lightyellow\" : \"lightgrey\"\n                      }\n                    }, `input-${dayIndex}-${day.isOpen ? \"open\" : \"closed\"}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 290,\n                      columnNumber: 29\n                    }, this);\n                    break;\n                  case \"Fermeture Matin\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      value: day.morningClosing,\n                      onChange: e => handleInputChange(e, index, dayIndex, header),\n                      disabled: !day.isOpen,\n                      style: {\n                        backgroundColor: day.isOpen ? \"lightyellow\" : \"lightgrey\"\n                      }\n                    }, `input-${dayIndex}-${day.isOpen ? \"open\" : \"closed\"}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 312,\n                      columnNumber: 33\n                    }, this);\n                    break;\n                  case \"Ouverture Après-midi\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      value: day.afternoonOpening,\n                      onChange: e => handleInputChange(e, index, dayIndex, header),\n                      disabled: !day.isOpen,\n                      style: {\n                        backgroundColor: day.isOpen ? \"lightyellow\" : \"lightgrey\"\n                      }\n                    }, `input-${dayIndex}-${day.isOpen ? \"open\" : \"closed\"}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 334,\n                      columnNumber: 33\n                    }, this);\n                    break;\n                  case \"Fermeture Après-midi\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      value: day.afternoonClosing,\n                      onChange: e => handleInputChange(e, index, dayIndex, header),\n                      disabled: !day.isOpen,\n                      style: {\n                        backgroundColor: day.isOpen ? \"lightyellow\" : \"lightgrey\"\n                      }\n                    }, `input-${dayIndex}-${day.isOpen ? \"open\" : \"closed\"}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 356,\n                      columnNumber: 29\n                    }, this);\n                    break;\n                  case \"Actions\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"secondary\",\n                        onClick: () => pasteStoredDayContent(day.id),\n                        children: \"Coller\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 379,\n                        columnNumber: 31\n                      }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"secondary\",\n                        onClick: () => copyDayContent(day.id),\n                        children: \"Copier\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 385,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 378,\n                      columnNumber: 29\n                    }, this);\n                    break;\n                  default:\n                    cellContent = \"N/A\";\n                }\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: cellContent\n                }, `${headerIndex}-${dayIndex}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 25\n                }, this);\n              })]\n            }, headerIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 15\n          }, this)\n        }, `table-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ScheduleManagement, \"dt/pkK2fk2l91oClWq20YfY86HQ=\");\n_c = ScheduleManagement;\nexport default ScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","Table","Container","scheduleGetAllDays","scheduleGetDefaultWeek","format","parseISO","set","af","fr","getWeek","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagement","_s","copiedDayData","setCopiedDayData","preparedData","setPreparedData","copiedWeekData","setCopiedWeekData","fetchData","year","daysResponse","console","log","prepareDataForDisplay","error","handleInputChange","event","weekIndex","dayIndex","header","newValue","target","value","newData","day","days","key","toLowerCase","replace","handleInputBlur","openDaysInWeek","map","isOpen","morningOpening","morningClosing","afternoonOpening","afternoonClosing","pasteDefaultWeekContent","defaultWeekData","length","targetWeek","updatedDays","defaultDay","find","day_of_week","substring","copyWeekContent","weekToCopy","daysWithoutDate","date","dayWithoutDate","weekNum","pasteStoredWeekContent","mergedDays","index","closeDaysInWeek","rowsHeaders","children","weekData","className","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","striped","bordered","hover","responsive","headerIndex","cellContent","locale","toggleDayState","style","backgroundColor","color","type","onChange","e","disabled","pasteStoredDayContent","id","copyDayContent","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport {\r\n  scheduleGetAllDays,\r\n  scheduleGetDefaultWeek,\r\n} from \"../../../serverRelated/ApiRequest\";\r\n\r\nimport { format, parseISO, set } from \"date-fns\";\r\nimport { af, fr } from \"date-fns/locale\"; // Importer les locales françaises\r\nimport { getWeek } from \"date-fns\";\r\n\r\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagement = () => {\r\n  const [copiedDayData, setCopiedDayData] = useState(null);\r\n  const [preparedData, setPreparedData] = useState([]);\r\n  const [copiedWeekData, setCopiedWeekData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        console.log(\"daysResponse\", daysResponse);\r\n\r\n        const preparedData = prepareDataForDisplay(daysResponse);\r\n        setPreparedData(preparedData);\r\n        console.log(\"peparedData\", preparedData)\r\n\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n\r\n    fetchData();\r\n \r\n  }, []);\r\n\r\n\r\n \r\n\r\n  const handleInputChange = (event, weekIndex, dayIndex, header) => {\r\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\r\n  \r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex].days[dayIndex]; // Accéder à l'objet jour spécifique\r\n  \r\n    // Mettre à jour la valeur spécifique\r\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertir l'en-tête en clé correspondante\r\n    day[key] = newValue || \"\"; // Utiliser une chaîne vide si la nouvelle valeur est falsy\r\n  \r\n    // Mettre à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n  };\r\n  \r\n\r\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\r\n    const newValue = event.target.value;\r\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertit l'en-tête en clé correspondante\r\n  \r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex].days[dayIndex]; // Accéder à l'objet jour spécifique\r\n  \r\n    // Met à jour la valeur spécifique\r\n    day[key] = newValue || \"\"; // Utilisez une chaîne vide si la nouvelle valeur est falsy\r\n  \r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n  };\r\n\r\n  const openDaysInWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n\r\n    // Accéder à la propriété `days` pour la semaine concernée\r\n    newData[weekIndex].days = newData[weekIndex].days.map((day) => ({\r\n      ...day,\r\n      isOpen: true, // Ferme le jour\r\n      morningOpening: \"\", // Réinitialise les horaires d'ouverture et de fermeture\r\n      morningClosing: \"\",\r\n      afternoonOpening: \"\",\r\n      afternoonClosing: \"\",\r\n    }));\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n\r\n  const pasteDefaultWeekContent = async (weekIndex) => {\r\n    try {\r\n      const defaultWeekData = await scheduleGetDefaultWeek();\r\n      if (defaultWeekData && defaultWeekData.length > 0 && preparedData[weekIndex]) {\r\n        const newData = [...preparedData];\r\n        const targetWeek = newData[weekIndex];\r\n\r\n        const updatedDays = targetWeek.days.map((day, dayIndex) => {\r\n          const defaultDay = defaultWeekData.find(day => day.day_of_week === dayIndex + 1);\r\n          if (defaultDay) {\r\n            return {\r\n              ...day,\r\n              isOpen: defaultDay.isOpen,\r\n              morningOpening: defaultDay.morningOpening ? defaultDay.morningOpening.substring(0, 5) : day.morningOpening,\r\n              morningClosing: defaultDay.morningClosing ? defaultDay.morningClosing.substring(0, 5) : day.morningClosing,\r\n              afternoonOpening: defaultDay.afternoonOpening ? defaultDay.afternoonOpening.substring(0, 5) : day.afternoonOpening,\r\n              afternoonClosing: defaultDay.afternoonClosing ? defaultDay.afternoonClosing.substring(0, 5) : day.afternoonClosing,\r\n            };\r\n          } else {\r\n            return day;\r\n          }\r\n        });\r\n\r\n        newData[weekIndex] = { ...targetWeek, days: updatedDays };\r\n        setPreparedData(newData);\r\n        console.log(\"NewData\", newData);\r\n\r\n      } else {\r\n        console.error(\"Aucune donnée de semaine par défaut ou données de semaine préparées invalides.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération de la semaine par défaut:\", error);\r\n    }\r\n  };\r\n\r\n  const copyWeekContent = (weekIndex) => {\r\n    const weekToCopy = preparedData[weekIndex];\r\n    if (weekToCopy) {\r\n      // Exclure la propriété 'date' de chaque jour lors de la copie\r\n      const daysWithoutDate = weekToCopy.days.map((day) => {\r\n        const { date, ...dayWithoutDate } = day;\r\n        return dayWithoutDate;\r\n      });\r\n\r\n      // Stocker les données copiées sans les dates\r\n      setCopiedWeekData({ ...weekToCopy, days: daysWithoutDate });\r\n      console.log(\r\n        `Contenu de la semaine ${weekToCopy.weekNum} copié, à l'exception des dates.`\r\n      );\r\n      console.log(\"CopiedWeekData\", copiedWeekData);\r\n    }\r\n  };\r\n\r\n  const pasteStoredWeekContent = (weekIndex) => {\r\n    if (!copiedWeekData) {\r\n      console.log(\"Aucun contenu de semaine à coller.\");\r\n      return;\r\n    }\r\n\r\n    const newData = [...preparedData];\r\n    const targetWeek = newData[weekIndex];\r\n\r\n    // Fusionner les données copiées avec les jours cibles tout en conservant les dates originales\r\n    const mergedDays = targetWeek.days.map((day, index) => {\r\n      if (copiedWeekData.days[index]) {\r\n        return { ...day, ...copiedWeekData.days[index], date: day.date };\r\n      }\r\n      return day;\r\n    });\r\n\r\n    newData[weekIndex] = { ...targetWeek, days: mergedDays };\r\n    setPreparedData(newData);\r\n    console.log(\r\n      `Contenu de la semaine collé dans la semaine ${newData[weekIndex].weekNum}, en conservant les dates originales.`\r\n    );\r\n  };\r\n\r\n  const closeDaysInWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n\r\n    // Accéder à la propriété `days` pour la semaine concernée\r\n    newData[weekIndex].days = newData[weekIndex].days.map((day) => ({\r\n      ...day,\r\n      isOpen: false, // Ferme le jour\r\n      morningOpening: \"\", // Réinitialise les horaires d'ouverture et de fermeture\r\n      morningClosing: \"\",\r\n      afternoonOpening: \"\",\r\n      afternoonClosing: \"\",\r\n    }));\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  const rowsHeaders = [\r\n    \"Date\",\r\n    \"État\",\r\n    \"Ouverture Matin\",\r\n    \"Fermeture Matin\",\r\n    \"Ouverture Après-midi\",\r\n    \"Fermeture Après-midi\",\r\n    `Actions`,\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        {preparedData.map((weekData, index) => (\r\n          <>\r\n            <div>\r\n              <h2\r\n                key={`week-title-${index}`}\r\n                className=\"text-light mt-5\"\r\n              >\r\n                Semaine {weekData.weekNum}\r\n              </h2>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => copyWeekContent(index)}\r\n              >\r\n                Copier\r\n              </Button>{\" \"}\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => pasteStoredWeekContent(index)}\r\n              >\r\n                Coller\r\n              </Button>{\" \"}\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => openDaysInWeek(index)}\r\n              >\r\n                Ouvrir la semaine\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => closeDaysInWeek(index)}\r\n              >\r\n                Fermer la semaine\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => pasteDefaultWeekContent(index)}\r\n              >\r\n                Appliquer semaine défault\r\n              </Button>\r\n            </div>\r\n\r\n            <Table\r\n              key={`table-${index}`}\r\n              striped\r\n              bordered\r\n              hover\r\n              className=\"text-center mt-4\"\r\n              responsive\r\n            >\r\n              <tbody>\r\n                {rowsHeaders.map((header, headerIndex) => (\r\n                  <tr key={headerIndex}>\r\n                    <th>{header}</th>\r\n                    {weekData.days.map((day, dayIndex) => {\r\n                      let cellContent;\r\n                      switch (header) {\r\n                        case \"Date\":\r\n                          // Assurez-vous que day.date est défini avant de l'utiliser\r\n                          const date = day.date ? parseISO(day.date) : null;\r\n                          cellContent = date\r\n                            ? format(date, \"EEEE dd MMMM yyyy\", {\r\n                                locale: fr,\r\n                              })\r\n                            : \"Date non définie\"; // Gestion d'une date indéfinie\r\n                          break;\r\n                        case \"État\":\r\n                          return (\r\n                            <td key={`${headerIndex}-${dayIndex}`}>\r\n                              <Button\r\n                                onClick={() => toggleDayState(index, dayIndex)}\r\n                                style={{\r\n                                  backgroundColor: day.isOpen ? \"green\" : \"red\",\r\n                                  color: \"white\",\r\n                                }}\r\n                              >\r\n                                {day.isOpen ? \"Ouvert\" : \"Fermé\"}\r\n                              </Button>\r\n                            </td>\r\n                          );\r\n                          case \"Ouverture Matin\": cellContent = (\r\n                            <input\r\n                              key={`input-${dayIndex}-${\r\n                                day.isOpen ? \"open\" : \"closed\"\r\n                              }`}\r\n                              type=\"time\"\r\n                              value={\r\n                                day.morningOpening\r\n                              }\r\n                              onChange={(e) =>\r\n                                handleInputChange(e, index, dayIndex, header)\r\n                              }\r\n                              disabled={!day.isOpen}\r\n                              style={{\r\n                                backgroundColor: day.isOpen\r\n                                  ? \"lightyellow\"\r\n                                  : \"lightgrey\",\r\n                              }}\r\n                            />\r\n                          );\r\n                          break;\r\n                        case \"Fermeture Matin\":\r\n                            cellContent = (\r\n                                <input\r\n                                  key={`input-${dayIndex}-${\r\n                                    day.isOpen ? \"open\" : \"closed\"\r\n                                  }`}\r\n                                  type=\"time\"\r\n                                  value={\r\n                                    day.morningClosing\r\n                                  }\r\n                                  onChange={(e) =>\r\n                                    handleInputChange(e, index, dayIndex, header)\r\n                                  }\r\n                                  disabled={!day.isOpen}\r\n                                  style={{\r\n                                    backgroundColor: day.isOpen\r\n                                      ? \"lightyellow\"\r\n                                      : \"lightgrey\",\r\n                                  }}\r\n                                />\r\n                              );\r\n                              break;\r\n                        case \"Ouverture Après-midi\":\r\n                            cellContent = (\r\n                                <input\r\n                                  key={`input-${dayIndex}-${\r\n                                    day.isOpen ? \"open\" : \"closed\"\r\n                                  }`}\r\n                                  type=\"time\"\r\n                                  value={\r\n                                    day.afternoonOpening\r\n                                  }\r\n                                  onChange={(e) =>\r\n                                    handleInputChange(e, index, dayIndex, header)\r\n                                  }\r\n                                  disabled={!day.isOpen}\r\n                                  style={{\r\n                                    backgroundColor: day.isOpen\r\n                                      ? \"lightyellow\"\r\n                                      : \"lightgrey\",\r\n                                  }}\r\n                                />\r\n                              );\r\n                              break;\r\n                        case \"Fermeture Après-midi\":\r\n                          cellContent = (\r\n                            <input\r\n                              key={`input-${dayIndex}-${\r\n                                day.isOpen ? \"open\" : \"closed\"\r\n                              }`}\r\n                              type=\"time\"\r\n                              value={\r\n                                day.afternoonClosing\r\n                              }\r\n                              onChange={(e) =>\r\n                                handleInputChange(e, index, dayIndex, header)\r\n                              }\r\n                              disabled={!day.isOpen}\r\n                              style={{\r\n                                backgroundColor: day.isOpen\r\n                                  ? \"lightyellow\"\r\n                                  : \"lightgrey\",\r\n                              }}\r\n                            />\r\n                          );\r\n                          break;\r\n                       case \"Actions\":\r\n                          cellContent = (\r\n                            <div>\r\n                              <Button\r\n                                variant=\"secondary\"\r\n                                onClick={() => pasteStoredDayContent(day.id)}\r\n                              >\r\n                                Coller\r\n                              </Button>{\" \"}\r\n                              <Button\r\n                                variant=\"secondary\"\r\n                                onClick={() => copyDayContent(day.id)}\r\n                              >\r\n                                Copier\r\n                              </Button>\r\n                            </div>\r\n                          );\r\n                          break;\r\n\r\n                        default:\r\n                          cellContent = \"N/A\";\r\n                      }\r\n                      return (\r\n                        <td key={`${headerIndex}-${dayIndex}`}>\r\n                          {cellContent}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </>\r\n        ))}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScheduleManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}