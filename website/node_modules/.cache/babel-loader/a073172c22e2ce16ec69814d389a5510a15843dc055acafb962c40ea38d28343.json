{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { scheduleGetAllDays, scheduleGetWeek } from '../../../serverRelated/ApiRequest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ScheduleManagement = () => {\n  _s();\n  const [preparedData, setPreparedData] = useState([]);\n\n  // Fonction pour préparer les données pour l'affichage\n  const prepareDataForDisplay = data => {\n    const groupedData = [];\n    let currentGroup = [];\n    data.forEach(day => {\n      currentGroup.push(day);\n      if (currentGroup.length === 7) {\n        groupedData.push(currentGroup);\n        currentGroup = [];\n      }\n    });\n    if (currentGroup.length > 0) {\n      groupedData.push(currentGroup);\n    }\n    return groupedData;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear(); // Utiliser l'année actuelle\n      try {\n        const daysData = await scheduleGetAllDays(year);\n        const weekData = await scheduleGetWeek(10, year, 8); // Exemple de valeurs pour weekStart et weekNumber\n        const allData = [...daysData, ...weekData]; // Supposition sur la fusion des données\n        const prepared = prepareDataForDisplay(allData); // Préparer les données pour l'affichage\n        setPreparedData(prepared);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const rowsHeaders = [\"Date\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: preparedData.map((week, index) => /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rowsHeaders.map((header, headerIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: header\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this), week.map((day, dayIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: day[header] || \"N/A\"\n          }, dayIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 19\n          }, this))]\n        }, headerIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_s(ScheduleManagement, \"iKWBrHeWYydjV2iquAVOGFhht/M=\");\n_c = ScheduleManagement;\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport default ScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","Table","scheduleGetAllDays","scheduleGetWeek","jsxDEV","_jsxDEV","Fragment","_Fragment","ScheduleManagement","_s","preparedData","setPreparedData","prepareDataForDisplay","data","groupedData","currentGroup","forEach","day","push","length","fetchData","year","getCurrentYear","daysData","weekData","allData","prepared","error","console","rowsHeaders","children","map","week","index","striped","bordered","hover","header","headerIndex","fileName","_jsxFileName","lineNumber","columnNumber","dayIndex","_c","currentDate","Date","getFullYear","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagement.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { scheduleGetAllDays, scheduleGetWeek } from '../../../serverRelated/ApiRequest';\r\n\r\nexport const ScheduleManagement = () => {\r\n  const [preparedData, setPreparedData] = useState([]);\r\n\r\n  // Fonction pour préparer les données pour l'affichage\r\n  const prepareDataForDisplay = (data) => {\r\n    const groupedData = [];\r\n    let currentGroup = [];\r\n  \r\n    data.forEach(day => {\r\n      currentGroup.push(day);\r\n      if (currentGroup.length === 7) {\r\n        groupedData.push(currentGroup);\r\n        currentGroup = [];\r\n      }\r\n    });\r\n  \r\n    if (currentGroup.length > 0) {\r\n      groupedData.push(currentGroup);\r\n    }\r\n  \r\n    return groupedData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear(); // Utiliser l'année actuelle\r\n      try {\r\n        const daysData = await scheduleGetAllDays(year);\r\n        const weekData = await scheduleGetWeek(10, year, 8); // Exemple de valeurs pour weekStart et weekNumber\r\n        const allData = [...daysData, ...weekData]; // Supposition sur la fusion des données\r\n        const prepared = prepareDataForDisplay(allData); // Préparer les données pour l'affichage\r\n        setPreparedData(prepared);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, []);\r\n\r\n  const rowsHeaders = [\"Date\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\"];\r\n\r\n  return (\r\n    <>\r\n      {preparedData.map((week, index) => (\r\n        <Table key={index} striped bordered hover>\r\n          <tbody>\r\n            {rowsHeaders.map((header, headerIndex) => (\r\n              <tr key={headerIndex}>\r\n                <th>{header}</th>\r\n                {week.map((day, dayIndex) => (\r\n                  <td key={dayIndex}>\r\n                    {/* Adaptez l'accès aux données selon la structure de vos données */}\r\n                    {/* C'est un exemple, vous devrez adapter cela en fonction de la structure de day */}\r\n                    {day[header] || \"N/A\"}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport default ScheduleManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}