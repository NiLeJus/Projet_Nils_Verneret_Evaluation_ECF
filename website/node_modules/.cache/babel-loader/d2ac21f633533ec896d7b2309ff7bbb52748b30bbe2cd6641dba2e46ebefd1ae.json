{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\vehicleRelated\\\\vehicleForm\\\\keyInfosForm\\\\ModelForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport Select from \"react-select\";\nimport { capitalizeFirstLetter } from \"../../../../functions/capitalizeFirstLetter\";\nimport AddVehicleModelModal from \"../../../addingEntries/AddVehicleModelModal\";\n// Renommez cette variable pour éviter les conflits\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet initialModels = [\n  // { value: \"id\", label: \"Model name\" },\n];\nexport const ModelForm = ({\n  onModelChange,\n  brand_id\n}) => {\n  _s();\n  const [showModal, setShowModal] = useState(false);\n  const handleOpenModal = () => {\n    setShowModal(true);\n    setSelectedModel(null);\n  };\n  const handleChange = selectedOption => {\n    setSelectedModel(selectedOption);\n    onModelChange(selectedOption.value); // Appeler le callback avec la valeur sélectionnée\n  };\n\n  const handleCloseModal = () => setShowModal(false);\n  const [selectedModel, setSelectedModel] = useState(null);\n  const [models, setModels] = useState(initialModels); // Utilisez le nom renommé ici\n\n  const onModalClose = () => {\n    fetchModels(); // Ceci met à jour la liste des modèles\n  };\n\n  const fetchModels = async () => {\n    if (!brand_id) {\n      console.log(\"Brand ID is not set\");\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:5001/api/vehicleModels/byBrand/${brand_id}`);\n      const data = await response.json();\n      console.log(\"Fetched models:\", data); // Affiche les données reçues\n\n      const transformedModels = data.map(model => ({\n        value: model.id.toString(),\n        label: capitalizeFirstLetter(model.name)\n      }));\n      console.log(\"Transformed models:\", transformedModels); // Affiche les modèles transformés\n      setModels(transformedModels);\n    } catch (error) {\n      console.error(\"Error fetching models:\", error);\n    }\n  };\n  useEffect(() => {\n    if (brand_id) {\n      fetchModels();\n    }\n  }, [brand_id]); // Se déclenche lorsque brand_id change\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"key-info-title\",\n        children: \"Model :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      value: selectedModel,\n      onChange: handleChange,\n      options: models,\n      isSearchable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleOpenModal,\n      children: \"Ajouter une marque\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddVehicleModelModal, {\n      show: showModal,\n      onHide: handleCloseModal,\n      onModalClose: onModalClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ModelForm, \"j1Nt799ARKZpcySmcvKH5uVNCXg=\");\n_c = ModelForm;\nexport default ModelForm;\nvar _c;\n$RefreshReg$(_c, \"ModelForm\");","map":{"version":3,"names":["React","useState","useEffect","Button","Form","Select","capitalizeFirstLetter","AddVehicleModelModal","jsxDEV","_jsxDEV","Fragment","_Fragment","initialModels","ModelForm","onModelChange","brand_id","_s","showModal","setShowModal","handleOpenModal","setSelectedModel","handleChange","selectedOption","value","handleCloseModal","selectedModel","models","setModels","onModalClose","fetchModels","console","log","response","fetch","data","json","transformedModels","map","model","id","toString","label","name","error","children","Label","className","fileName","_jsxFileName","lineNumber","columnNumber","onChange","options","isSearchable","onClick","show","onHide","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/vehicleRelated/vehicleForm/keyInfosForm/ModelForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport { capitalizeFirstLetter } from \"../../../../functions/capitalizeFirstLetter\";\r\nimport AddVehicleModelModal from \"../../../addingEntries/AddVehicleModelModal\";\r\n// Renommez cette variable pour éviter les conflits\r\nlet initialModels = [\r\n  // { value: \"id\", label: \"Model name\" },\r\n];\r\n\r\nexport const ModelForm = ({onModelChange, brand_id}) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const handleOpenModal = () => {\r\n    setShowModal(true);\r\n    setSelectedModel(null);\r\n  };\r\n\r\n  const handleChange = (selectedOption) => {\r\n    setSelectedModel(selectedOption);\r\n    onModelChange(selectedOption.value); // Appeler le callback avec la valeur sélectionnée\r\n  };\r\n\r\n  const handleCloseModal = () => setShowModal(false);\r\n\r\n  const [selectedModel, setSelectedModel] = useState(null);\r\n  const [models, setModels] = useState(initialModels); // Utilisez le nom renommé ici\r\n\r\n  const onModalClose = () => {\r\n    fetchModels(); // Ceci met à jour la liste des modèles\r\n  };\r\n\r\n  const fetchModels = async () => {\r\n    if (!brand_id) {\r\n      console.log(\"Brand ID is not set\");\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const response = await fetch(`http://localhost:5001/api/vehicleModels/byBrand/${brand_id}`);\r\n      const data = await response.json();\r\n      console.log(\"Fetched models:\", data); // Affiche les données reçues\r\n  \r\n      const transformedModels = data.map(model => ({\r\n        value: model.id.toString(),\r\n        label: capitalizeFirstLetter(model.name),\r\n      }));\r\n  \r\n      console.log(\"Transformed models:\", transformedModels); // Affiche les modèles transformés\r\n      setModels(transformedModels);\r\n    } catch (error) {\r\n      console.error(\"Error fetching models:\", error);\r\n    }\r\n  };\r\n  \r\n  \r\n  useEffect(() => {\r\n    if (brand_id) {\r\n      fetchModels();\r\n    }\r\n  }, [brand_id]); // Se déclenche lorsque brand_id change\r\n\r\n  return (\r\n    <>\r\n      <Form.Label>\r\n        <h3 className=\"key-info-title\">Model :</h3>\r\n      </Form.Label>\r\n      <Select\r\n      value={selectedModel}\r\n      onChange={handleChange}\r\n      options={models}\r\n      isSearchable\r\n    />\r\n      <Button onClick={handleOpenModal}>Ajouter une marque</Button>\r\n      <AddVehicleModelModal\r\n        show={showModal}\r\n        onHide={handleCloseModal}\r\n        onModalClose={onModalClose}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModelForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}