{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagementTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport { scheduleGetAllDays, scheduleGetDefaultWeek } from \"../../../serverRelated/ApiRequest\";\nimport { format, parseISO, set } from \"date-fns\";\nimport { af, fr } from \"date-fns/locale\"; // Importer les locales françaises\nimport { getWeek } from \"date-fns\";\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagement = () => {\n  _s();\n  const [copiedDayData, setCopiedDayData] = useState(null);\n  const [preparedData, setPreparedData] = useState([]);\n  const [copiedWeekData, setCopiedWeekData] = useState(null);\n  const [inputValues, setInputValues] = useState([]);\n  const toggleDayState = (weekIndex, dayIndex) => {\n    const newData = [...preparedData];\n    // Trouver le bon jour dans la propriété `days`\n    const day = newData[weekIndex].days[dayIndex];\n\n    // Modifier l'état isOpen\n    day.isOpen = !day.isOpen;\n\n    // Appliquer d'autres logiques si nécessaire...\n\n    setPreparedData(newData);\n  };\n  const copyDayContent = dayId => {\n    // Directement trouver le jour spécifique par son ID dans le tableau de jours\n    const dayToCopy = preparedData.find(day => day.id === dayId);\n    if (dayToCopy) {\n      // Exclure la propriété 'date' lors de la copie\n      const {\n        day_of_week,\n        ...rest\n      } = dayToCopy;\n      setCopiedDayData({\n        ...rest\n      });\n      console.log(`Contenu du jour ${dayId} copié, à l'exception du jour.`);\n    } else {\n      console.log(\"Jour non trouvé.\");\n    }\n  };\n  const pasteStoredDayContent = dayId => {\n    if (!copiedDayData) {\n      console.log(\"Aucun contenu à coller.\");\n      return;\n    }\n    const newData = preparedData.map(day => day.id === dayId ? {\n      ...day,\n      ...copiedDayData,\n      id: day.id\n    } : day);\n    setPreparedData(newData);\n    console.log(`Contenu collé dans le jour ${dayId}.`);\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        console.log(\"daysResponse\", daysResponse);\n        const preparedData = prepareDataForDisplay(daysResponse);\n        setPreparedData(preparedData);\n        console.log(\"peparedData\", preparedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const prepareDataForDisplay = data => {\n    const groupedData = [];\n    let currentGroup = [];\n    const currentWeekNumber = getWeek(new Date());\n    Object.keys(data).sort().forEach(weekNumber => {\n      if (parseInt(weekNumber) >= currentWeekNumber) {\n        const week = data[weekNumber];\n        const firstDayOfWeek = week[0] ? parseISO(week[0].date) : null;\n        const weekNum = firstDayOfWeek ? getWeek(firstDayOfWeek) : null;\n        week.forEach((day, index) => {\n          if (index < 7) {\n            currentGroup.push(day);\n          }\n        });\n        if (currentGroup.length > 0 && weekNum !== null) {\n          groupedData.push({\n            weekNum,\n            days: currentGroup\n          });\n          currentGroup = [];\n        }\n      }\n    });\n    return groupedData;\n  };\n  const handleInputChange = (event, weekIndex, dayIndex, header) => {\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\n\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n    const day = newData[weekIndex].days[dayIndex]; // Accéder à l'objet jour spécifique\n\n    // Mettre à jour la valeur spécifique\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertir l'en-tête en clé correspondante\n    day[key] = newValue || \"\"; // Utiliser une chaîne vide si la nouvelle valeur est falsy\n\n    // Mettre à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n  };\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\n    const newValue = event.target.value;\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertit l'en-tête en clé correspondante\n\n    // Copie profonde pour éviter la mutation directe de l'état\n    const newData = [...preparedData];\n    const day = newData[weekIndex].days[dayIndex]; // Accéder à l'objet jour spécifique\n\n    // Met à jour la valeur spécifique\n    day[key] = newValue || \"\"; // Utilisez une chaîne vide si la nouvelle valeur est falsy\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n  };\n  const rowsHeaders = [\"Date\", \"État\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\", `Actions`];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: preparedData.map((weekData, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-light mt-5\",\n            children: [\"Semaine \", weekData.weekNum]\n          }, `week-title-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          striped: true,\n          bordered: true,\n          hover: true,\n          className: \"text-center mt-4\",\n          responsive: true,\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: rowsHeaders.map((header, headerIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: header\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 21\n              }, this), weekData.days.map((day, dayIndex) => {\n                let cellContent;\n                switch (header) {\n                  case \"Date\":\n                    // Assurez-vous que day.date est défini avant de l'utiliser\n                    const date = day.date ? parseISO(day.date) : null;\n                    cellContent = date ? format(date, \"EEEE dd MMMM yyyy\", {\n                      locale: fr\n                    }) : \"Date non définie\"; // Gestion d'une date indéfinie\n                    break;\n                  case \"État\":\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        onClick: () => toggleDayState(index, dayIndex),\n                        style: {\n                          backgroundColor: day.isOpen ? \"green\" : \"red\",\n                          color: \"white\"\n                        },\n                        children: day.isOpen ? \"Ouvert\" : \"Fermé\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 201,\n                        columnNumber: 31\n                      }, this)\n                    }, `${headerIndex}-${dayIndex}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 200,\n                      columnNumber: 29\n                    }, this);\n                  case \"Ouverture Matin\":\n                  case \"Fermeture Matin\":\n                  case \"Ouverture Après-midi\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      value: day.morningOpening,\n                      onChange: e => handleInputChange(e, index, dayIndex, header),\n                      disabled: !day.isOpen,\n                      style: {\n                        backgroundColor: day.isOpen ? \"lightyellow\" : \"lightgrey\"\n                      }\n                    }, `input-${dayIndex}-${day.isOpen ? \"open\" : \"closed\"}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 216,\n                      columnNumber: 33\n                    }, this);\n                    break;\n                  case \"Fermeture Après-midi\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      value: day.morningOpening,\n                      onChange: e => handleInputChange(e, index, dayIndex, header),\n                      disabled: !day.isOpen,\n                      style: {\n                        backgroundColor: day.isOpen ? \"lightyellow\" : \"lightgrey\"\n                      }\n                    }, `input-${dayIndex}-${day.isOpen ? \"open\" : \"closed\"}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 238,\n                      columnNumber: 29\n                    }, this);\n                    break;\n                  case \"Actions\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"secondary\",\n                        onClick: () => pasteStoredDayContent(day.id),\n                        children: \"Coller\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 261,\n                        columnNumber: 31\n                      }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"secondary\",\n                        onClick: () => copyDayContent(day.id),\n                        children: \"Copier\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 267,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 260,\n                      columnNumber: 29\n                    }, this);\n                    break;\n                  default:\n                    cellContent = \"N/A\";\n                }\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: cellContent\n                }, `${headerIndex}-${dayIndex}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 25\n                }, this);\n              })]\n            }, headerIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this)\n        }, `table-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ScheduleManagement, \"PKYRE6gQEsI/6VlDoqfXpmZnd3I=\");\n_c = ScheduleManagement;\nexport default ScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","Table","Container","scheduleGetAllDays","scheduleGetDefaultWeek","format","parseISO","set","af","fr","getWeek","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagement","_s","copiedDayData","setCopiedDayData","preparedData","setPreparedData","copiedWeekData","setCopiedWeekData","inputValues","setInputValues","toggleDayState","weekIndex","dayIndex","newData","day","days","isOpen","copyDayContent","dayId","dayToCopy","find","id","day_of_week","rest","console","log","pasteStoredDayContent","map","fetchData","year","daysResponse","prepareDataForDisplay","error","data","groupedData","currentGroup","currentWeekNumber","Object","keys","sort","forEach","weekNumber","parseInt","week","firstDayOfWeek","date","weekNum","index","push","length","handleInputChange","event","header","newValue","target","value","key","toLowerCase","replace","handleInputBlur","rowsHeaders","children","weekData","className","fileName","_jsxFileName","lineNumber","columnNumber","striped","bordered","hover","responsive","headerIndex","cellContent","locale","onClick","style","backgroundColor","color","type","morningOpening","onChange","e","disabled","variant","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagementTest.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport {\r\n  scheduleGetAllDays,\r\n  scheduleGetDefaultWeek,\r\n} from \"../../../serverRelated/ApiRequest\";\r\n\r\nimport { format, parseISO, set } from \"date-fns\";\r\nimport { af, fr } from \"date-fns/locale\"; // Importer les locales françaises\r\nimport { getWeek } from \"date-fns\";\r\n\r\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagement = () => {\r\n  const [copiedDayData, setCopiedDayData] = useState(null);\r\n  const [preparedData, setPreparedData] = useState([]);\r\n  const [copiedWeekData, setCopiedWeekData] = useState(null);\r\n  const [inputValues, setInputValues] = useState([]);\r\n\r\n\r\n  const toggleDayState = (weekIndex, dayIndex) => {\r\n    const newData = [...preparedData];\r\n    // Trouver le bon jour dans la propriété `days`\r\n    const day = newData[weekIndex].days[dayIndex];\r\n\r\n    // Modifier l'état isOpen\r\n    day.isOpen = !day.isOpen;\r\n\r\n    // Appliquer d'autres logiques si nécessaire...\r\n\r\n    setPreparedData(newData);\r\n  };\r\n\r\n  const copyDayContent = (dayId) => {\r\n    // Directement trouver le jour spécifique par son ID dans le tableau de jours\r\n    const dayToCopy = preparedData.find((day) => day.id === dayId);\r\n\r\n    if (dayToCopy) {\r\n      // Exclure la propriété 'date' lors de la copie\r\n      const { day_of_week, ...rest } = dayToCopy;\r\n      setCopiedDayData({ ...rest });\r\n      console.log(`Contenu du jour ${dayId} copié, à l'exception du jour.`);\r\n    } else {\r\n      console.log(\"Jour non trouvé.\");\r\n    }\r\n  };\r\n\r\n\r\n  const pasteStoredDayContent = (dayId) => {\r\n    if (!copiedDayData) {\r\n      console.log(\"Aucun contenu à coller.\");\r\n      return;\r\n    }\r\n\r\n    const newData = preparedData.map((day) =>\r\n      day.id === dayId ? { ...day, ...copiedDayData, id: day.id } : day\r\n    );\r\n\r\n    setPreparedData(newData);\r\n    console.log(`Contenu collé dans le jour ${dayId}.`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        console.log(\"daysResponse\", daysResponse);\r\n\r\n        const preparedData = prepareDataForDisplay(daysResponse);\r\n        setPreparedData(preparedData);\r\n        console.log(\"peparedData\", preparedData)\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const prepareDataForDisplay = (data) => {\r\n    const groupedData = [];\r\n    let currentGroup = [];\r\n    const currentWeekNumber = getWeek(new Date());\r\n\r\n    Object.keys(data)\r\n      .sort()\r\n      .forEach((weekNumber) => {\r\n        if (parseInt(weekNumber) >= currentWeekNumber) {\r\n          const week = data[weekNumber];\r\n          const firstDayOfWeek = week[0] ? parseISO(week[0].date) : null;\r\n          const weekNum = firstDayOfWeek ? getWeek(firstDayOfWeek) : null;\r\n\r\n          week.forEach((day, index) => {\r\n            if (index < 7) {\r\n              currentGroup.push(day);\r\n            }\r\n          });\r\n\r\n          if (currentGroup.length > 0 && weekNum !== null) {\r\n            groupedData.push({ weekNum, days: currentGroup });\r\n            currentGroup = [];\r\n          }\r\n        }\r\n      });\r\n\r\n    return groupedData;\r\n  };\r\n\r\n  const handleInputChange = (event, weekIndex, dayIndex, header) => {\r\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\r\n  \r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex].days[dayIndex]; // Accéder à l'objet jour spécifique\r\n  \r\n    // Mettre à jour la valeur spécifique\r\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertir l'en-tête en clé correspondante\r\n    day[key] = newValue || \"\"; // Utiliser une chaîne vide si la nouvelle valeur est falsy\r\n  \r\n    // Mettre à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n  };\r\n  \r\n\r\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\r\n    const newValue = event.target.value;\r\n    const key = header.toLowerCase().replace(/\\s/g, \"\"); // Convertit l'en-tête en clé correspondante\r\n  \r\n    // Copie profonde pour éviter la mutation directe de l'état\r\n    const newData = [...preparedData];\r\n    const day = newData[weekIndex].days[dayIndex]; // Accéder à l'objet jour spécifique\r\n  \r\n    // Met à jour la valeur spécifique\r\n    day[key] = newValue || \"\"; // Utilisez une chaîne vide si la nouvelle valeur est falsy\r\n  \r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n  };\r\n\r\n  const rowsHeaders = [\r\n    \"Date\",\r\n    \"État\",\r\n    \"Ouverture Matin\",\r\n    \"Fermeture Matin\",\r\n    \"Ouverture Après-midi\",\r\n    \"Fermeture Après-midi\",\r\n    `Actions`,\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        {preparedData.map((weekData, index) => (\r\n          <>\r\n            <div>\r\n              <h2\r\n                key={`week-title-${index}`}\r\n                className=\"text-light mt-5\"\r\n              >\r\n                Semaine {weekData.weekNum}\r\n              </h2>\r\n            </div>\r\n\r\n            <Table\r\n              key={`table-${index}`}\r\n              striped\r\n              bordered\r\n              hover\r\n              className=\"text-center mt-4\"\r\n              responsive\r\n            >\r\n              <tbody>\r\n                {rowsHeaders.map((header, headerIndex) => (\r\n                  <tr key={headerIndex}>\r\n                    <th>{header}</th>\r\n                    {weekData.days.map((day, dayIndex) => {\r\n                      let cellContent;\r\n                      switch (header) {\r\n                        case \"Date\":\r\n                          // Assurez-vous que day.date est défini avant de l'utiliser\r\n                          const date = day.date ? parseISO(day.date) : null;\r\n                          cellContent = date\r\n                            ? format(date, \"EEEE dd MMMM yyyy\", {\r\n                                locale: fr,\r\n                              })\r\n                            : \"Date non définie\"; // Gestion d'une date indéfinie\r\n                          break;\r\n                        case \"État\":\r\n                          return (\r\n                            <td key={`${headerIndex}-${dayIndex}`}>\r\n                              <Button\r\n                                onClick={() => toggleDayState(index, dayIndex)}\r\n                                style={{\r\n                                  backgroundColor: day.isOpen ? \"green\" : \"red\",\r\n                                  color: \"white\",\r\n                                }}\r\n                              >\r\n                                {day.isOpen ? \"Ouvert\" : \"Fermé\"}\r\n                              </Button>\r\n                            </td>\r\n                          );\r\n                        case \"Ouverture Matin\":\r\n                        case \"Fermeture Matin\":\r\n                        case \"Ouverture Après-midi\":\r\n                            cellContent = (\r\n                                <input\r\n                                  key={`input-${dayIndex}-${\r\n                                    day.isOpen ? \"open\" : \"closed\"\r\n                                  }`}\r\n                                  type=\"time\"\r\n                                  value={\r\n                                    day.morningOpening\r\n                                  }\r\n                                  onChange={(e) =>\r\n                                    handleInputChange(e, index, dayIndex, header)\r\n                                  }\r\n                                  disabled={!day.isOpen}\r\n                                  style={{\r\n                                    backgroundColor: day.isOpen\r\n                                      ? \"lightyellow\"\r\n                                      : \"lightgrey\",\r\n                                  }}\r\n                                />\r\n                              );\r\n                              break;\r\n                        case \"Fermeture Après-midi\":\r\n                          cellContent = (\r\n                            <input\r\n                              key={`input-${dayIndex}-${\r\n                                day.isOpen ? \"open\" : \"closed\"\r\n                              }`}\r\n                              type=\"time\"\r\n                              value={\r\n                                day.morningOpening\r\n                              }\r\n                              onChange={(e) =>\r\n                                handleInputChange(e, index, dayIndex, header)\r\n                              }\r\n                              disabled={!day.isOpen}\r\n                              style={{\r\n                                backgroundColor: day.isOpen\r\n                                  ? \"lightyellow\"\r\n                                  : \"lightgrey\",\r\n                              }}\r\n                            />\r\n                          );\r\n                          break;\r\n                        case \"Actions\":\r\n                          cellContent = (\r\n                            <div>\r\n                              <Button\r\n                                variant=\"secondary\"\r\n                                onClick={() => pasteStoredDayContent(day.id)}\r\n                              >\r\n                                Coller\r\n                              </Button>{\" \"}\r\n                              <Button\r\n                                variant=\"secondary\"\r\n                                onClick={() => copyDayContent(day.id)}\r\n                              >\r\n                                Copier\r\n                              </Button>\r\n                            </div>\r\n                          );\r\n                          break;\r\n\r\n                        default:\r\n                          cellContent = \"N/A\";\r\n                      }\r\n                      return (\r\n                        <td key={`${headerIndex}-${dayIndex}`}>\r\n                          {cellContent}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </>\r\n        ))}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScheduleManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}