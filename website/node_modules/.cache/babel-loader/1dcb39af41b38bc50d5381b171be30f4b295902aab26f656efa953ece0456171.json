{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\management\\\\ScheduleManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport { scheduleGetAllDays, scheduleGetDefaultWeek } from \"../../../serverRelated/ApiRequest\";\nimport { format, parseISO } from \"date-fns\";\nimport { af, fr } from \"date-fns/locale\"; // Importer les locales françaises\nimport { getWeek } from \"date-fns\";\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getCurrentYear = () => {\n  const currentDate = new Date();\n  return currentDate.getFullYear();\n};\nexport const ScheduleManagement = () => {\n  _s();\n  const [copiedDayData, setCopiedDayData] = useState(null);\n  const [preparedData, setPreparedData] = useState([]);\n  const [copiedWeekData, setCopiedWeekData] = useState(null);\n  const toggleDayState = (weekIndex, dayIndex) => {\n    const newData = [...preparedData];\n    // Trouver le bon jour dans la propriété `days`\n    const day = newData[weekIndex].days[dayIndex];\n\n    // Modifier l'état isOpen\n    day.isOpen = !day.isOpen;\n\n    // Appliquer d'autres logiques si nécessaire...\n\n    setPreparedData(newData);\n  };\n  const copyDayContent = dayId => {\n    // Directement trouver le jour spécifique par son ID dans le tableau de jours\n    const dayToCopy = preparedData.find(day => day.id === dayId);\n    if (dayToCopy) {\n      // Exclure la propriété 'date' lors de la copie\n      const {\n        day_of_week,\n        ...rest\n      } = dayToCopy;\n      setCopiedDayData({\n        ...rest\n      });\n      console.log(`Contenu du jour ${dayId} copié, à l'exception du jour.`);\n    } else {\n      console.log(\"Jour non trouvé.\");\n    }\n  };\n  const applyDefaultWeek = weekIndex => {\n    const newData = [...preparedData];\n    const weekToApply = newData[weekIndex];\n    if (weekToApply) {\n      // Exclure la propriété 'date' de chaque jour lors de la copie\n      const daysWithoutDate = weekToApply.days.map(day => {\n        const {\n          date,\n          ...dayWithoutDate\n        } = day;\n        return dayWithoutDate;\n      });\n      // Stocker les données copiées sans les dates\n      setCopiedWeekData({\n        ...weekToApply,\n        days: daysWithoutDate\n      });\n      console.log(`Contenu de la semaine ${weekToApply.weekNum} copié, à l'exception des dates.`);\n    }\n  };\n  const pasteStoredDayContent = dayId => {\n    if (!copiedDayData) {\n      console.log(\"Aucun contenu à coller.\");\n      return;\n    }\n    const newData = preparedData.map(day => day.id === dayId ? {\n      ...day,\n      ...copiedDayData,\n      id: day.id\n    } : day);\n    setPreparedData(newData);\n    console.log(`Contenu collé dans le jour ${dayId}.`);\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const year = getCurrentYear();\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const daysResponse = await scheduleGetAllDays(year);\n        console.log(\"daysResponse\", daysResponse);\n        const preparedData = prepareDataForDisplay(daysResponse);\n        setPreparedData(preparedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    const fetchDefaultData = async () => {\n      try {\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\n        const defaultResponse = await scheduleGetDefaultWeek();\n        console.log(\"Default Data :\", defaultResponse);\n        const defaultData = prepareDataForDisplay(defaultResponse);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n    fetchDefaultData();\n  }, []);\n  const prepareDataForDisplay = data => {\n    const groupedData = [];\n    let currentGroup = [];\n    const currentWeekNumber = getWeek(new Date());\n    Object.keys(data).sort().forEach(weekNumber => {\n      if (parseInt(weekNumber) >= currentWeekNumber) {\n        const week = data[weekNumber];\n        const firstDayOfWeek = week[0] ? parseISO(week[0].date) : null;\n        const weekNum = firstDayOfWeek ? getWeek(firstDayOfWeek) : null;\n        week.forEach((day, index) => {\n          if (index < 7) {\n            currentGroup.push(day);\n          }\n        });\n        if (currentGroup.length > 0 && weekNum !== null) {\n          groupedData.push({\n            weekNum,\n            days: currentGroup\n          });\n          currentGroup = [];\n        }\n      }\n    });\n    return groupedData;\n  };\n  const handleInputChange = (event, weekIndex, dayIndex, type) => {\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\n    const key = type.toLowerCase().replace(/\\s/g, \"\"); // \"Ouverture Matin\" devient \"ouverturematin\"\n\n    // Faire une copie profonde de preparedData pour éviter la mutation directe\n    const newData = [...preparedData];\n\n    // Assurer l'accès correct à la propriété 'days' de la semaine concernée et au jour spécifique\n    if (newData[weekIndex] && newData[weekIndex].days && newData[weekIndex].days[dayIndex]) {\n      newData[weekIndex].days[dayIndex][key] = newValue;\n      setPreparedData(newData);\n    } else {\n      console.error(\"Tentative de mise à jour d'un jour non existant dans la semaine spécifiée.\");\n    }\n  };\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\n    const newValue = event.target.value;\n    const key = header.toLowerCase().replace(/\\s/g, \"\");\n\n    // Faire une copie profonde de preparedData pour éviter la mutation directe\n    const newData = [...preparedData];\n\n    // Vérifier si le jour spécifié existe, ensuite mettre à jour sa valeur\n    if (newData[weekIndex] && newData[weekIndex].days[dayIndex]) {\n      newData[weekIndex].days[dayIndex][key] = newValue || \"\"; // Utiliser une chaîne vide si la valeur est falsy\n      setPreparedData(newData);\n    } else {\n      console.error(\"Tentative de mise à jour d'un jour non existant.\");\n    }\n  };\n  const openDaysInWeek = weekIndex => {\n    const newData = [...preparedData];\n\n    // Accéder à la propriété `days` pour la semaine concernée\n    newData[weekIndex].days = newData[weekIndex].days.map(day => ({\n      ...day,\n      isOpen: true,\n      // Ferme le jour\n      morningOpening: \"\",\n      // Réinitialise les horaires d'ouverture et de fermeture\n      morningClosing: \"\",\n      afternoonOpening: \"\",\n      afternoonClosing: \"\"\n    }));\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  const copyWeekContent = weekIndex => {\n    const weekToCopy = preparedData[weekIndex];\n    if (weekToCopy) {\n      // Exclure la propriété 'date' de chaque jour lors de la copie\n      const daysWithoutDate = weekToCopy.days.map(day => {\n        const {\n          date,\n          ...dayWithoutDate\n        } = day;\n        return dayWithoutDate;\n      });\n\n      // Stocker les données copiées sans les dates\n      setCopiedWeekData({\n        ...weekToCopy,\n        days: daysWithoutDate\n      });\n      console.log(`Contenu de la semaine ${weekToCopy.weekNum} copié, à l'exception des dates.`);\n    }\n  };\n  const pasteStoredWeekContent = weekIndex => {\n    if (!copiedWeekData) {\n      console.log(\"Aucun contenu de semaine à coller.\");\n      return;\n    }\n    const newData = [...preparedData];\n    const targetWeek = newData[weekIndex];\n\n    // Fusionner les données copiées avec les jours cibles tout en conservant les dates originales\n    const mergedDays = targetWeek.days.map((day, index) => {\n      if (copiedWeekData.days[index]) {\n        return {\n          ...day,\n          ...copiedWeekData.days[index],\n          date: day.date\n        };\n      }\n      return day;\n    });\n    newData[weekIndex] = {\n      ...targetWeek,\n      days: mergedDays\n    };\n    setPreparedData(newData);\n    console.log(`Contenu de la semaine collé dans la semaine ${newData[weekIndex].weekNum}, en conservant les dates originales.`);\n  };\n  const closeDaysInWeek = weekIndex => {\n    const newData = [...preparedData];\n\n    // Accéder à la propriété `days` pour la semaine concernée\n    newData[weekIndex].days = newData[weekIndex].days.map(day => ({\n      ...day,\n      isOpen: false,\n      // Ferme le jour\n      morningOpening: \"\",\n      // Réinitialise les horaires d'ouverture et de fermeture\n      morningClosing: \"\",\n      afternoonOpening: \"\",\n      afternoonClosing: \"\"\n    }));\n\n    // Met à jour l'état du composant avec les nouvelles données\n    setPreparedData(newData);\n\n    // Si nécessaire, mettez à jour les données sur le serveur ici\n  };\n\n  const rowsHeaders = [\"Date\", \"État\", \"Ouverture Matin\", \"Fermeture Matin\", \"Ouverture Après-midi\", \"Fermeture Après-midi\", `Actions`];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: preparedData.map((weekData, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-light mt-5\",\n            children: [\"Semaine \", weekData.weekNum]\n          }, `week-title-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => copyWeekContent(index),\n            children: \"Copier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => pasteStoredWeekContent(index),\n            children: \"Coller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => openDaysInWeek(index),\n            children: \"Ouvrir la semaine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => closeDaysInWeek(index),\n            children: \"Fermer la semaine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => applyDefaultWeek(index),\n            children: \"Appliquer semaine d\\xE9fault\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          striped: true,\n          bordered: true,\n          hover: true,\n          className: \"text-center mt-4\",\n          responsive: true,\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: rowsHeaders.map((header, headerIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: header\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 21\n              }, this), weekData.days.map((day, dayIndex) => {\n                let cellContent;\n                switch (header) {\n                  case \"Date\":\n                    const date = parseISO(day.date); // Supposons que vous avez déjà importé parseISO et format\n                    cellContent = format(date, \"EEEE dd MMMM yyyy\", {\n                      locale: fr\n                    });\n                    break;\n                  case \"État\":\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        onClick: () => toggleDayState(index, dayIndex),\n                        style: {\n                          backgroundColor: day.isOpen ? \"green\" : \"red\",\n                          color: \"white\"\n                        },\n                        children: day.isOpen ? \"Ouvert\" : \"Fermé\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 341,\n                        columnNumber: 31\n                      }, this)\n                    }, `${headerIndex}-${dayIndex}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 340,\n                      columnNumber: 29\n                    }, this);\n                  case \"Ouverture Matin\":\n                  case \"Fermeture Matin\":\n                  case \"Ouverture Après-midi\":\n                  case \"Fermeture Après-midi\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      value: day[header.toLowerCase().replace(/\\s/g, \"\")] || \"\",\n                      onChange: e => handleInputChange(e, index, dayIndex, header),\n                      onBlur: e => handleInputBlur(e, index, dayIndex, header),\n                      disabled: !day.isOpen,\n                      style: {\n                        backgroundColor: day.isOpen ? \"lightyellow\" : \"lightgrey\"\n                      }\n                    }, `input-${dayIndex}-${day.isOpen ? \"open\" : \"closed\"}`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 357,\n                      columnNumber: 29\n                    }, this);\n                    break;\n                  case \"Actions\":\n                    cellContent = /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"secondary\",\n                        onClick: () => pasteStoredDayContent(day.id),\n                        children: \"Coller\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 384,\n                        columnNumber: 31\n                      }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"secondary\",\n                        onClick: () => copyDayContent(day.id),\n                        children: \"Copier\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 390,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 383,\n                      columnNumber: 29\n                    }, this);\n                    break;\n                  default:\n                    cellContent = \"N/A\";\n                }\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: cellContent\n                }, `${headerIndex}-${dayIndex}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 25\n                }, this);\n              })]\n            }, headerIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 15\n          }, this)\n        }, `table-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ScheduleManagement, \"dt/pkK2fk2l91oClWq20YfY86HQ=\");\n_c = ScheduleManagement;\nexport default ScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"ScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","Table","Container","scheduleGetAllDays","scheduleGetDefaultWeek","format","parseISO","af","fr","getWeek","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","getCurrentYear","currentDate","Date","getFullYear","ScheduleManagement","_s","copiedDayData","setCopiedDayData","preparedData","setPreparedData","copiedWeekData","setCopiedWeekData","toggleDayState","weekIndex","dayIndex","newData","day","days","isOpen","copyDayContent","dayId","dayToCopy","find","id","day_of_week","rest","console","log","applyDefaultWeek","weekToApply","daysWithoutDate","map","date","dayWithoutDate","weekNum","pasteStoredDayContent","fetchData","year","daysResponse","prepareDataForDisplay","error","fetchDefaultData","defaultResponse","defaultData","data","groupedData","currentGroup","currentWeekNumber","Object","keys","sort","forEach","weekNumber","parseInt","week","firstDayOfWeek","index","push","length","handleInputChange","event","type","newValue","target","value","key","toLowerCase","replace","handleInputBlur","header","openDaysInWeek","morningOpening","morningClosing","afternoonOpening","afternoonClosing","copyWeekContent","weekToCopy","pasteStoredWeekContent","targetWeek","mergedDays","closeDaysInWeek","rowsHeaders","children","weekData","className","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","striped","bordered","hover","responsive","headerIndex","cellContent","locale","style","backgroundColor","color","onChange","e","onBlur","disabled","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/management/ScheduleManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { scheduleGetAllDays, scheduleGetDefaultWeek } from \"../../../serverRelated/ApiRequest\";\r\n\r\nimport { format, parseISO } from \"date-fns\";\r\nimport { af, fr } from \"date-fns/locale\"; // Importer les locales françaises\r\nimport { getWeek } from \"date-fns\";\r\n\r\nimport Button from \"react-bootstrap/Button\"; // Assurez-vous d'importer Button\r\n\r\nconst getCurrentYear = () => {\r\n  const currentDate = new Date();\r\n  return currentDate.getFullYear();\r\n};\r\n\r\nexport const ScheduleManagement = () => {\r\n  const [copiedDayData, setCopiedDayData] = useState(null);\r\n  const [preparedData, setPreparedData] = useState([]);\r\n  const [copiedWeekData, setCopiedWeekData] = useState(null);\r\n\r\n  const toggleDayState = (weekIndex, dayIndex) => {\r\n    const newData = [...preparedData];\r\n    // Trouver le bon jour dans la propriété `days`\r\n    const day = newData[weekIndex].days[dayIndex];\r\n\r\n    // Modifier l'état isOpen\r\n    day.isOpen = !day.isOpen;\r\n\r\n    // Appliquer d'autres logiques si nécessaire...\r\n\r\n    setPreparedData(newData);\r\n  };\r\n\r\n  const copyDayContent = (dayId) => {\r\n    // Directement trouver le jour spécifique par son ID dans le tableau de jours\r\n    const dayToCopy = preparedData.find((day) => day.id === dayId);\r\n  \r\n    if (dayToCopy) {\r\n      // Exclure la propriété 'date' lors de la copie\r\n      const { day_of_week, ...rest } = dayToCopy;\r\n      setCopiedDayData({ ...rest });\r\n      console.log(`Contenu du jour ${dayId} copié, à l'exception du jour.`);\r\n    } else {\r\n      console.log(\"Jour non trouvé.\");\r\n    }\r\n  };\r\n  \r\n  const applyDefaultWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n    const weekToApply = newData[weekIndex];\r\n    if (weekToApply) {\r\n      // Exclure la propriété 'date' de chaque jour lors de la copie\r\n      const daysWithoutDate = weekToApply.days.map((day) => {\r\n        const { date, ...dayWithoutDate } = day;\r\n        return dayWithoutDate;\r\n      });\r\n      // Stocker les données copiées sans les dates\r\n      setCopiedWeekData({ ...weekToApply, days: daysWithoutDate });\r\n      console.log(\r\n        `Contenu de la semaine ${weekToApply.weekNum} copié, à l'exception des dates.`\r\n      );\r\n    }\r\n  };\r\n  \r\n\r\n  const pasteStoredDayContent = (dayId) => {\r\n    if (!copiedDayData) {\r\n      console.log(\"Aucun contenu à coller.\");\r\n      return;\r\n    }\r\n  \r\n    const newData = preparedData.map(day =>\r\n      day.id === dayId ? { ...day, ...copiedDayData, id: day.id } : day\r\n    );\r\n  \r\n    setPreparedData(newData);\r\n    console.log(`Contenu collé dans le jour ${dayId}.`);\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const year = getCurrentYear();\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const daysResponse = await scheduleGetAllDays(year);\r\n        console.log(\"daysResponse\", daysResponse);\r\n\r\n        const preparedData = prepareDataForDisplay(daysResponse);\r\n        setPreparedData(preparedData);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchDefaultData = async () => {\r\n      try {\r\n        // Assurez-vous que les fonctions renvoient directement un tableau ou extrayez le tableau comme nécessaire\r\n        const defaultResponse = await scheduleGetDefaultWeek();\r\n        console.log(\"Default Data :\", defaultResponse);\r\n\r\n        const defaultData = prepareDataForDisplay(defaultResponse);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    fetchDefaultData();\r\n  }, []);\r\n\r\n  const prepareDataForDisplay = (data) => {\r\n    const groupedData = [];\r\n    let currentGroup = [];\r\n    const currentWeekNumber = getWeek(new Date());\r\n\r\n    Object.keys(data)\r\n      .sort()\r\n      .forEach((weekNumber) => {\r\n        if (parseInt(weekNumber) >= currentWeekNumber) {\r\n          const week = data[weekNumber];\r\n          const firstDayOfWeek = week[0] ? parseISO(week[0].date) : null;\r\n          const weekNum = firstDayOfWeek ? getWeek(firstDayOfWeek) : null;\r\n\r\n          week.forEach((day, index) => {\r\n            if (index < 7) {\r\n              currentGroup.push(day);\r\n            }\r\n          });\r\n\r\n          if (currentGroup.length > 0 && weekNum !== null) {\r\n            groupedData.push({ weekNum, days: currentGroup });\r\n            currentGroup = [];\r\n          }\r\n        }\r\n      });\r\n\r\n    return groupedData;\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n\r\n  const handleInputChange = (event, weekIndex, dayIndex, type) => {\r\n    const newValue = event.target.value !== \"\" ? event.target.value : null;\r\n    const key = type.toLowerCase().replace(/\\s/g, \"\"); // \"Ouverture Matin\" devient \"ouverturematin\"\r\n\r\n    // Faire une copie profonde de preparedData pour éviter la mutation directe\r\n    const newData = [...preparedData];\r\n\r\n    // Assurer l'accès correct à la propriété 'days' de la semaine concernée et au jour spécifique\r\n    if (\r\n      newData[weekIndex] &&\r\n      newData[weekIndex].days &&\r\n      newData[weekIndex].days[dayIndex]\r\n    ) {\r\n      newData[weekIndex].days[dayIndex][key] = newValue;\r\n      setPreparedData(newData);\r\n    } else {\r\n      console.error(\r\n        \"Tentative de mise à jour d'un jour non existant dans la semaine spécifiée.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleInputBlur = (event, weekIndex, dayIndex, header) => {\r\n    const newValue = event.target.value;\r\n    const key = header.toLowerCase().replace(/\\s/g, \"\");\r\n\r\n    // Faire une copie profonde de preparedData pour éviter la mutation directe\r\n    const newData = [...preparedData];\r\n\r\n    // Vérifier si le jour spécifié existe, ensuite mettre à jour sa valeur\r\n    if (newData[weekIndex] && newData[weekIndex].days[dayIndex]) {\r\n      newData[weekIndex].days[dayIndex][key] = newValue || \"\"; // Utiliser une chaîne vide si la valeur est falsy\r\n      setPreparedData(newData);\r\n    } else {\r\n      console.error(\"Tentative de mise à jour d'un jour non existant.\");\r\n    }\r\n  };\r\n\r\n  const openDaysInWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n\r\n    // Accéder à la propriété `days` pour la semaine concernée\r\n    newData[weekIndex].days = newData[weekIndex].days.map((day) => ({\r\n      ...day,\r\n      isOpen: true, // Ferme le jour\r\n      morningOpening: \"\", // Réinitialise les horaires d'ouverture et de fermeture\r\n      morningClosing: \"\",\r\n      afternoonOpening: \"\",\r\n      afternoonClosing: \"\",\r\n    }));\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  const copyWeekContent = (weekIndex) => {\r\n    const weekToCopy = preparedData[weekIndex];\r\n    if (weekToCopy) {\r\n      // Exclure la propriété 'date' de chaque jour lors de la copie\r\n      const daysWithoutDate = weekToCopy.days.map((day) => {\r\n        const { date, ...dayWithoutDate } = day;\r\n        return dayWithoutDate;\r\n      });\r\n\r\n      // Stocker les données copiées sans les dates\r\n      setCopiedWeekData({ ...weekToCopy, days: daysWithoutDate });\r\n      console.log(\r\n        `Contenu de la semaine ${weekToCopy.weekNum} copié, à l'exception des dates.`\r\n      );\r\n    }\r\n  };\r\n\r\n  const pasteStoredWeekContent = (weekIndex) => {\r\n    if (!copiedWeekData) {\r\n      console.log(\"Aucun contenu de semaine à coller.\");\r\n      return;\r\n    }\r\n\r\n    const newData = [...preparedData];\r\n    const targetWeek = newData[weekIndex];\r\n\r\n    // Fusionner les données copiées avec les jours cibles tout en conservant les dates originales\r\n    const mergedDays = targetWeek.days.map((day, index) => {\r\n      if (copiedWeekData.days[index]) {\r\n        return { ...day, ...copiedWeekData.days[index], date: day.date };\r\n      }\r\n      return day;\r\n    });\r\n\r\n    newData[weekIndex] = { ...targetWeek, days: mergedDays };\r\n    setPreparedData(newData);\r\n    console.log(\r\n      `Contenu de la semaine collé dans la semaine ${newData[weekIndex].weekNum}, en conservant les dates originales.`\r\n    );\r\n  };\r\n\r\n  const closeDaysInWeek = (weekIndex) => {\r\n    const newData = [...preparedData];\r\n\r\n    // Accéder à la propriété `days` pour la semaine concernée\r\n    newData[weekIndex].days = newData[weekIndex].days.map((day) => ({\r\n      ...day,\r\n      isOpen: false, // Ferme le jour\r\n      morningOpening: \"\", // Réinitialise les horaires d'ouverture et de fermeture\r\n      morningClosing: \"\",\r\n      afternoonOpening: \"\",\r\n      afternoonClosing: \"\",\r\n    }));\r\n\r\n    // Met à jour l'état du composant avec les nouvelles données\r\n    setPreparedData(newData);\r\n\r\n    // Si nécessaire, mettez à jour les données sur le serveur ici\r\n  };\r\n\r\n  const rowsHeaders = [\r\n    \"Date\",\r\n    \"État\",\r\n    \"Ouverture Matin\",\r\n    \"Fermeture Matin\",\r\n    \"Ouverture Après-midi\",\r\n    \"Fermeture Après-midi\",\r\n    `Actions`,\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        {preparedData.map((weekData, index) => (\r\n          <>\r\n            <div>\r\n              <h2\r\n                key={`week-title-${index}`}\r\n                className=\"text-light mt-5\"\r\n              >\r\n                Semaine {weekData.weekNum}\r\n              </h2>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => copyWeekContent(index)}\r\n              >\r\n                Copier\r\n              </Button>{\" \"}\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => pasteStoredWeekContent(index)}\r\n              >\r\n                Coller\r\n              </Button>{\" \"}\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => openDaysInWeek(index)}\r\n              >\r\n                Ouvrir la semaine\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => closeDaysInWeek(index)}\r\n              >\r\n                Fermer la semaine\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => applyDefaultWeek(index) }\r\n              >\r\n                Appliquer semaine défault\r\n              </Button>\r\n            </div>\r\n\r\n            <Table\r\n              key={`table-${index}`}\r\n              striped\r\n              bordered\r\n              hover\r\n              className=\"text-center mt-4\"\r\n              responsive\r\n            >\r\n              <tbody>\r\n                {rowsHeaders.map((header, headerIndex) => (\r\n                  <tr key={headerIndex}>\r\n                    <th>{header}</th>\r\n                    {weekData.days.map((day, dayIndex) => {\r\n                      let cellContent;\r\n                      switch (header) {\r\n                        case \"Date\":\r\n                          const date = parseISO(day.date); // Supposons que vous avez déjà importé parseISO et format\r\n                          cellContent = format(date, \"EEEE dd MMMM yyyy\", {\r\n                            locale: fr,\r\n                          });\r\n                          break;\r\n                        case \"État\":\r\n                          return (\r\n                            <td key={`${headerIndex}-${dayIndex}`}>\r\n                              <Button\r\n                                onClick={() => toggleDayState(index, dayIndex)}\r\n                                style={{\r\n                                  backgroundColor: day.isOpen ? \"green\" : \"red\",\r\n                                  color: \"white\",\r\n                                }}\r\n                              >\r\n                                {day.isOpen ? \"Ouvert\" : \"Fermé\"}\r\n                              </Button>\r\n                            </td>\r\n                          );\r\n                        case \"Ouverture Matin\":\r\n                        case \"Fermeture Matin\":\r\n                        case \"Ouverture Après-midi\":\r\n                        case \"Fermeture Après-midi\":\r\n                          cellContent = (\r\n                            <input\r\n                              key={`input-${dayIndex}-${\r\n                                day.isOpen ? \"open\" : \"closed\"\r\n                              }`}\r\n                              type=\"time\"\r\n                              value={\r\n                                day[header.toLowerCase().replace(/\\s/g, \"\")] ||\r\n                                \"\"\r\n                              }\r\n                              onChange={(e) =>\r\n                                handleInputChange(e, index, dayIndex, header)\r\n                              }\r\n                              onBlur={(e) =>\r\n                                handleInputBlur(e, index, dayIndex, header)\r\n                              }\r\n                              disabled={!day.isOpen}\r\n                              style={{\r\n                                backgroundColor: day.isOpen\r\n                                  ? \"lightyellow\"\r\n                                  : \"lightgrey\",\r\n                              }}\r\n                            />\r\n                          );\r\n                          break;\r\n                        case \"Actions\":\r\n                          cellContent = (\r\n                            <div>\r\n                              <Button\r\n                                variant=\"secondary\"\r\n                                onClick={() => pasteStoredDayContent(day.id)}\r\n                              >\r\n                                Coller\r\n                              </Button>{\" \"}\r\n                              <Button\r\n                                variant=\"secondary\"\r\n                                onClick={() => copyDayContent(day.id)}\r\n                              >\r\n                                Copier\r\n                              </Button>\r\n                            </div>\r\n                          );\r\n                          break;\r\n\r\n                        default:\r\n                          cellContent = \"N/A\";\r\n                      }\r\n                      return (\r\n                        <td key={`${headerIndex}-${dayIndex}`}>\r\n                          {cellContent}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </>\r\n        ))}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScheduleManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}