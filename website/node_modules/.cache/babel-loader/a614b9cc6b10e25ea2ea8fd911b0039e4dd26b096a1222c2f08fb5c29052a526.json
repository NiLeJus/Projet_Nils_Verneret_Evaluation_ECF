{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\admin\\\\AdminConnexionPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport useAuthToken from \"../../functions/useAuthToken\"; // Assurez-vous que le chemin d'importation est correct\nimport { useNavigate } from \"react-router-dom\";\nimport { serverUrl } from \"../../serverRelated/ApiRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AdminConnexionPanel = ({\n  show,\n  onHide\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const isValidToken = useAuthToken(); // Utilisez le hook pour vérifier l'état du token\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  // Effectuer une redirection si l'utilisateur est déjà authentifié\n  useEffect(() => {\n    if (isValidToken) {\n      navigate(\"/admin\"); // Redirigez vers le tableau de bord admin ou une autre page appropriée\n    }\n  }, [isValidToken, navigate]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch(`${serverUrl}api/admins/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json(); // Parse la réponse JSON\n\n      if (response.ok) {\n        // Stocker le token JWT dans le stockage local\n        localStorage.setItem('token', data.token);\n        navigate(\"/admin\");\n        onHide();\n      } else {\n        console.error(\"Erreur de connexion\");\n      }\n    } catch (error) {\n      console.error(\"Erreur de connexion : \", error.response ? error.response.data : error.message);\n    }\n  };\n\n  // Affichage conditionnel basé sur le show et le token\n  if (!show || isValidToken) {\n    return null; // Ne rien rendre ou rediriger si le modal ne doit pas être montré ou si token est valide\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: onHide,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Connexion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onHide,\n        children: \" Fermer \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminConnexionPanel, \"ykjJgRY6tO+YWtDWmV1rvC8uFE8=\", false, function () {\n  return [useNavigate, useAuthToken];\n});\n_c = AdminConnexionPanel;\nexport default AdminConnexionPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminConnexionPanel\");","map":{"version":3,"names":["React","useState","useEffect","Button","Form","Modal","useAuthToken","useNavigate","serverUrl","jsxDEV","_jsxDEV","AdminConnexionPanel","show","onHide","_s","navigate","isValidToken","email","setEmail","password","setPassword","handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","localStorage","setItem","token","console","error","message","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","onSubmit","Footer","variant","onClick","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/admin/AdminConnexionPanel.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport useAuthToken from \"../../functions/useAuthToken\"; // Assurez-vous que le chemin d'importation est correct\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { serverUrl } from \"../../serverRelated/ApiRequest\";\r\n\r\nexport const AdminConnexionPanel = ({ show, onHide }) => {\r\n  const navigate = useNavigate();\r\n  const isValidToken = useAuthToken(); // Utilisez le hook pour vérifier l'état du token\r\n\r\n  const [email, setEmail] = useState(\"\"); \r\n  const [password, setPassword] = useState(\"\"); \r\n\r\n  // Effectuer une redirection si l'utilisateur est déjà authentifié\r\n  useEffect(() => {\r\n    if (isValidToken) {\r\n      navigate(\"/admin\"); // Redirigez vers le tableau de bord admin ou une autre page appropriée\r\n    }\r\n  }, [isValidToken, navigate]);\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault(); \r\n    try {\r\n      const response = await fetch(`${serverUrl}api/admins/login`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      const data = await response.json(); // Parse la réponse JSON\r\n\r\n      if (response.ok) {\r\n        // Stocker le token JWT dans le stockage local\r\n        localStorage.setItem('token', data.token);\r\n\r\n        navigate(\"/admin\");\r\n        onHide();\r\n      } else {\r\n        console.error(\"Erreur de connexion\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\r\n        \"Erreur de connexion : \",\r\n        error.response ? error.response.data : error.message\r\n      );\r\n    }\r\n  };\r\n\r\n  // Affichage conditionnel basé sur le show et le token\r\n  if (!show || isValidToken) {\r\n    return null; // Ne rien rendre ou rediriger si le modal ne doit pas être montré ou si token est valide\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={onHide}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Connexion</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          {/* Les champs du formulaire et le bouton de soumission restent inchangés */}\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={onHide}> Fermer </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AdminConnexionPanel;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}