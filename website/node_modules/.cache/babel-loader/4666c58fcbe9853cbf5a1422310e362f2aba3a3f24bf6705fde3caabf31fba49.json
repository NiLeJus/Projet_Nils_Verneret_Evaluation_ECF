{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\general\\\\FooterSchedule.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { scheduleGetWeek } from \"../../serverRelated/ApiRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getCurrentDate = () => {\n  const now = new Date();\n  // Cette fonction doit idéalement retourner le numéro de la semaine actuelle et l'année.\n  return {\n    year: now.getFullYear(),\n    // La logique pour obtenir le numéro de la semaine doit être ici. Utilisez un placeholder pour l'exemple.\n    weekNumber: now.getDate() - now.getDay() + (now.getDay() === 0 ? -6 : 1) // Calcul simplifié pour l'exemple\n  };\n};\n\nexport const FooterSchedule = () => {\n  _s();\n  const [schedule, setSchedule] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const currentDate = getCurrentDate();\n      try {\n        const year = currentDate.year;\n        const weekNumber = currentDate.weekNumber; // Utilisez le numéro de semaine pour récupérer les données\n\n        // Assumez que vous ajustez votre API ou votre logique frontale pour utiliser un numéro de semaine\n        const response = await scheduleGetWeek(year, weekNumber, 1);\n        console.log(\"fetched schedule get week\", response);\n\n        // Ici, nous supposons que vous voulez afficher les jours de la semaine '11'\n        // Vous devez ajuster cette logique selon vos besoins réels\n        const weekData = response['11'];\n        if (weekData) {\n          setSchedule(weekData);\n        } else {\n          // Gérer le cas où les données de la semaine spécifique ne sont pas trouvées\n          setSchedule([]);\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: schedule.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: schedule.map((day, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Matin : \", day.morningClosing]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Aucun horaire disponible\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(FooterSchedule, \"ufj6drX7OuS1FJ8vycY2bacy/To=\");\n_c = FooterSchedule;\nexport default FooterSchedule;\nvar _c;\n$RefreshReg$(_c, \"FooterSchedule\");","map":{"version":3,"names":["React","useEffect","useState","scheduleGetWeek","jsxDEV","_jsxDEV","getCurrentDate","now","Date","year","getFullYear","weekNumber","getDate","getDay","FooterSchedule","_s","schedule","setSchedule","fetchData","currentDate","response","console","log","weekData","error","children","length","map","day","index","morningClosing","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/general/FooterSchedule.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { scheduleGetWeek } from \"../../serverRelated/ApiRequest\";\r\n\r\nconst getCurrentDate = () => {\r\n  const now = new Date();\r\n  // Cette fonction doit idéalement retourner le numéro de la semaine actuelle et l'année.\r\n  return {\r\n    year: now.getFullYear(),\r\n    // La logique pour obtenir le numéro de la semaine doit être ici. Utilisez un placeholder pour l'exemple.\r\n    weekNumber: now.getDate() - now.getDay() + (now.getDay() === 0 ? -6 : 1), // Calcul simplifié pour l'exemple\r\n\r\n  };\r\n};\r\n\r\nexport const FooterSchedule = () => {\r\n  const [schedule, setSchedule] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const currentDate = getCurrentDate();\r\n      try {\r\n        const year = currentDate.year;\r\n        const weekNumber = currentDate.weekNumber; // Utilisez le numéro de semaine pour récupérer les données\r\n\r\n        // Assumez que vous ajustez votre API ou votre logique frontale pour utiliser un numéro de semaine\r\n        const response = await scheduleGetWeek(year, weekNumber, 1);\r\n        console.log(\"fetched schedule get week\", response);\r\n\r\n        // Ici, nous supposons que vous voulez afficher les jours de la semaine '11'\r\n        // Vous devez ajuster cette logique selon vos besoins réels\r\n        const weekData = response['11'];\r\n        if (weekData) {\r\n          setSchedule(weekData);\r\n        } else {\r\n          // Gérer le cas où les données de la semaine spécifique ne sont pas trouvées\r\n          setSchedule([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des horaires:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {schedule.length > 0 ? (\r\n        <ul>\r\n          {schedule.map((day, index) => (\r\n            \r\n            <li key={index}>Matin : {day.morningClosing}</li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>Aucun horaire disponible</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FooterSchedule;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,eAAe,QAAQ,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB;EACA,OAAO;IACLC,IAAI,EAAEF,GAAG,CAACG,WAAW,CAAC,CAAC;IACvB;IACAC,UAAU,EAAEJ,GAAG,CAACK,OAAO,CAAC,CAAC,GAAGL,GAAG,CAACM,MAAM,CAAC,CAAC,IAAIN,GAAG,CAACM,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAE;EAE5E,CAAC;AACH,CAAC;;AAED,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,WAAW,GAAGb,cAAc,CAAC,CAAC;MACpC,IAAI;QACF,MAAMG,IAAI,GAAGU,WAAW,CAACV,IAAI;QAC7B,MAAME,UAAU,GAAGQ,WAAW,CAACR,UAAU,CAAC,CAAC;;QAE3C;QACA,MAAMS,QAAQ,GAAG,MAAMjB,eAAe,CAACM,IAAI,EAAEE,UAAU,EAAE,CAAC,CAAC;QAC3DU,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,QAAQ,CAAC;;QAElD;QACA;QACA,MAAMG,QAAQ,GAAGH,QAAQ,CAAC,IAAI,CAAC;QAC/B,IAAIG,QAAQ,EAAE;UACZN,WAAW,CAACM,QAAQ,CAAC;QACvB,CAAC,MAAM;UACL;UACAN,WAAW,CAAC,EAAE,CAAC;QACjB;MACF,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;MACtE;IACF,CAAC;IAEDN,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEb,OAAA;IAAAoB,QAAA,EACGT,QAAQ,CAACU,MAAM,GAAG,CAAC,gBAClBrB,OAAA;MAAAoB,QAAA,EACGT,QAAQ,CAACW,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBAEvBxB,OAAA;QAAAoB,QAAA,GAAgB,UAAQ,EAACG,GAAG,CAACE,cAAc;MAAA,GAAlCD,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkC,CACjD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,gBAEL7B,OAAA;MAAAoB,QAAA,EAAG;IAAwB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAC/B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnB,EAAA,CA7CWD,cAAc;AAAAqB,EAAA,GAAdrB,cAAc;AA+C3B,eAAeA,cAAc;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}