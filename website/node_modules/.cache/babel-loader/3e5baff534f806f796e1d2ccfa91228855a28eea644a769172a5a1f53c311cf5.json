{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\vehicleRelated\\\\vehicleForm\\\\keyInfosForm\\\\FuelForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport Select from \"react-select\";\nimport { capitalizeFirstLetter } from \"../../../../functions/capitalizeFirstLetter\";\nimport AddFuelModal from \"../../../addingEntries/AddFuelModal\";\n\n// Variable renommée pour éviter les conflits\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet initialFuelTypeOptions = [\n// Ajoutez une option pour \"Créer une nouvelle entrée\"\n{\n  value: \"new\",\n  label: \"Créer une nouvelle entrée\"\n}];\nexport const FuelForm = ({\n  onFuelChange\n}) => {\n  _s();\n  const [showModal, setShowModal] = useState(false);\n  const handleOpenModal = () => setShowModal(true);\n  const handleCloseModal = () => setShowModal(false);\n  const [selectedFuelType, setSelectedFuelType] = useState(null);\n  const [fuelTypeOptions, setFuelTypeOptions] = useState(initialFuelTypeOptions); // Utilisez le nom renommé ici\n\n  const handleFuelChange = selectedOption => {\n    setSelectedFuelType(selectedOption);\n    if (onFuelChange) {\n      onFuelChange(selectedOption.value); // Envoyer l'ID du type de carburant au parent\n    }\n\n    // Si l'option sélectionnée a une valeur de \"new\", ouvrir le modal\n    if (selectedOption && selectedOption.value === \"new\") {\n      handleOpenModal();\n    }\n  };\n  const fetchFuelTypes = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5001/api/fuelTypes\");\n      const data = await response.json();\n      const transformedFuelTypes = data.map(fuelType => ({\n        value: fuelType.id.toString(),\n        label: capitalizeFirstLetter(fuelType.name)\n      }));\n\n      // Ajoutez l'option \"Créer une nouvelle entrée\" aux types de carburants transformés\n      transformedFuelTypes.unshift({\n        value: \"new\",\n        label: \"Créer une nouvelle entrée\"\n      });\n      setFuelTypeOptions(transformedFuelTypes); // Modifiez pour remplacer complètement les types de carburants\n    } catch (error) {\n      console.error(\"Error fetching options:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchFuelTypes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      value: selectedFuelType,\n      onChange: handleFuelChange,\n      options: fuelTypeOptions,\n      isSearchable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleOpenModal,\n      children: \"Ajouter un type de carburant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddFuelModal, {\n      show: showModal,\n      onHide: handleCloseModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(FuelForm, \"ZvnizmFIgUZGOq45j1QFvUf9xVg=\");\n_c = FuelForm;\nexport default FuelForm;\nvar _c;\n$RefreshReg$(_c, \"FuelForm\");","map":{"version":3,"names":["React","useState","useEffect","Button","Form","Select","capitalizeFirstLetter","AddFuelModal","jsxDEV","_jsxDEV","Fragment","_Fragment","initialFuelTypeOptions","value","label","FuelForm","onFuelChange","_s","showModal","setShowModal","handleOpenModal","handleCloseModal","selectedFuelType","setSelectedFuelType","fuelTypeOptions","setFuelTypeOptions","handleFuelChange","selectedOption","fetchFuelTypes","response","fetch","data","json","transformedFuelTypes","map","fuelType","id","toString","name","unshift","error","console","children","onChange","options","isSearchable","fileName","_jsxFileName","lineNumber","columnNumber","onClick","show","onHide","_c","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/vehicleRelated/vehicleForm/keyInfosForm/FuelForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport { capitalizeFirstLetter } from \"../../../../functions/capitalizeFirstLetter\";\r\nimport AddFuelModal from \"../../../addingEntries/AddFuelModal\";\r\n\r\n// Variable renommée pour éviter les conflits\r\nlet initialFuelTypeOptions = [\r\n  // Ajoutez une option pour \"Créer une nouvelle entrée\"\r\n  { value: \"new\", label: \"Créer une nouvelle entrée\" },\r\n];\r\n\r\nexport const FuelForm = ({ onFuelChange }) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const handleOpenModal = () => setShowModal(true);\r\n  const handleCloseModal = () => setShowModal(false);\r\n  const [selectedFuelType, setSelectedFuelType] = useState(null);\r\n  const [fuelTypeOptions, setFuelTypeOptions] = useState(initialFuelTypeOptions); // Utilisez le nom renommé ici\r\n\r\n  const handleFuelChange = (selectedOption) => {\r\n    setSelectedFuelType(selectedOption);\r\n    if (onFuelChange) {\r\n      onFuelChange(selectedOption.value); // Envoyer l'ID du type de carburant au parent\r\n    }\r\n\r\n    // Si l'option sélectionnée a une valeur de \"new\", ouvrir le modal\r\n    if (selectedOption && selectedOption.value === \"new\") {\r\n      handleOpenModal();\r\n    }\r\n  };\r\n\r\n  const fetchFuelTypes = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5001/api/fuelTypes\");\r\n      const data = await response.json();\r\n\r\n      const transformedFuelTypes = data.map((fuelType) => ({\r\n        value: fuelType.id.toString(),\r\n        label: capitalizeFirstLetter(fuelType.name),\r\n      }));\r\n\r\n      // Ajoutez l'option \"Créer une nouvelle entrée\" aux types de carburants transformés\r\n      transformedFuelTypes.unshift({\r\n        value: \"new\",\r\n        label: \"Créer une nouvelle entrée\",\r\n      });\r\n\r\n      setFuelTypeOptions(transformedFuelTypes); // Modifiez pour remplacer complètement les types de carburants\r\n    } catch (error) {\r\n      console.error(\"Error fetching options:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchFuelTypes();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Select\r\n        value={selectedFuelType}\r\n        onChange={handleFuelChange}\r\n        options={fuelTypeOptions}\r\n        isSearchable\r\n      />\r\n      <Button onClick={handleOpenModal}>Ajouter un type de carburant</Button>\r\n      <AddFuelModal show={showModal} onHide={handleCloseModal} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FuelForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}