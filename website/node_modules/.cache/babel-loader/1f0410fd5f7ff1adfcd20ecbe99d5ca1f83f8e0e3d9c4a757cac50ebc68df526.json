{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilsv\\\\Documents\\\\2_TRAVAIL\\\\WEB_DEV\\\\EVAL_ECF\\\\projet\\\\website\\\\src\\\\components\\\\vehicleRelated\\\\vehicleForm\\\\keyInfosForm\\\\ColorForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport Select, { components } from \"react-select\";\nimport { capitalizeFirstLetter } from \"../../../../functions/capitalizeFirstLetter\";\nimport GUIIcons from \"../../../general/GUIIcons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ColorOption = props => {\n  return /*#__PURE__*/_jsxDEV(components.Option, {\n    ...props,\n    children: [/*#__PURE__*/_jsxDEV(GUIIcons.Square, {\n      className: \"color-square-icon\",\n      style: {\n        fill: props.data.hex\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), \" \", props.data.label]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n_c = ColorOption;\nexport const ColorForm = () => {\n  _s();\n  const [selectedColor, setSelectedColor] = useState(null);\n  const [colors, setColors] = useState([]);\n  useEffect(() => {\n    const fetchColors = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5001/api/colors\");\n        const data = await response.json();\n        const transformedColors = data.map(color => ({\n          value: color.id.toString(),\n          label: capitalizeFirstLetter(color.name),\n          hex: color.hex // Ajoutez ceci pour utiliser la couleur dans le composant d'option personnalisé\n        }));\n\n        setColors(transformedColors);\n      } catch (error) {\n        console.error(\"Error fetching colors:\", error);\n      }\n    };\n    fetchColors();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"key-info-title\",\n        children: \"Couleurs :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      value: selectedColor,\n      onChange: setSelectedColor,\n      options: colors,\n      components: {\n        Option: ColorOption\n      } // Utilisez le composant d'option personnalisé ici\n      ,\n      isSearchable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ColorForm, \"mYaz8molE8CcZUW3oiKRl0zZXAk=\");\n_c2 = ColorForm;\nexport default ColorForm;\nvar _c, _c2;\n$RefreshReg$(_c, \"ColorOption\");\n$RefreshReg$(_c2, \"ColorForm\");","map":{"version":3,"names":["React","useState","useEffect","Button","Form","Select","components","capitalizeFirstLetter","GUIIcons","jsxDEV","_jsxDEV","Fragment","_Fragment","ColorOption","props","Option","children","Square","className","style","fill","data","hex","fileName","_jsxFileName","lineNumber","columnNumber","label","_c","ColorForm","_s","selectedColor","setSelectedColor","colors","setColors","fetchColors","response","fetch","json","transformedColors","map","color","value","id","toString","name","error","console","Label","onChange","options","isSearchable","_c2","$RefreshReg$"],"sources":["C:/Users/nilsv/Documents/2_TRAVAIL/WEB_DEV/EVAL_ECF/projet/website/src/components/vehicleRelated/vehicleForm/keyInfosForm/ColorForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport Select, { components } from \"react-select\";\r\nimport { capitalizeFirstLetter } from \"../../../../functions/capitalizeFirstLetter\";\r\nimport GUIIcons from \"../../../general/GUIIcons\";\r\n\r\nconst ColorOption = (props) => {\r\n  return (\r\n    <components.Option {...props}>\r\n      <GUIIcons.Square className=\"color-square-icon\" style={{ fill: props.data.hex }} /> {/* Assurez-vous que GUIIcons.Square fonctionne comme prévu */}\r\n      {props.data.label}\r\n    </components.Option>\r\n  );\r\n};\r\n\r\nexport const ColorForm = () => {\r\n  const [selectedColor, setSelectedColor] = useState(null);\r\n  const [colors, setColors] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchColors = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5001/api/colors\");\r\n        const data = await response.json();\r\n\r\n        const transformedColors = data.map(color => ({\r\n          value: color.id.toString(),\r\n          label: capitalizeFirstLetter(color.name),\r\n          hex: color.hex, // Ajoutez ceci pour utiliser la couleur dans le composant d'option personnalisé\r\n        }));\r\n\r\n        setColors(transformedColors);\r\n      } catch (error) {\r\n        console.error(\"Error fetching colors:\", error);\r\n      }\r\n    };\r\n    fetchColors();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Form.Label>\r\n        <h3 className=\"key-info-title\">Couleurs :</h3>\r\n      </Form.Label>\r\n      <Select\r\n        value={selectedColor}\r\n        onChange={setSelectedColor}\r\n        options={colors}\r\n        components={{ Option: ColorOption }} // Utilisez le composant d'option personnalisé ici\r\n        isSearchable\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ColorForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}